
Auto-correction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08008964  08008964  00009964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af8  08008af8  0000a088  2**0
                  CONTENTS
  4 .ARM          00000008  08008af8  08008af8  00009af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b00  08008b00  0000a088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b00  08008b00  00009b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b04  08008b04  00009b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08008b08  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000088  08008b90  0000a088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08008b90  0000a420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001858b  00000000  00000000  0000a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000404c  00000000  00000000  00022643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00026690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001159  00000000  00000000  00027cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002461f  00000000  00000000  00028e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020cea  00000000  00000000  0004d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfc3c  00000000  00000000  0006e15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013dd96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000614c  00000000  00000000  0013dddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00143f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800894c 	.word	0x0800894c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800894c 	.word	0x0800894c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9b5 	b.w	80005fc <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <set_time>:
int32_t ppm = -629;
uint32_t ppmCounter = 0;
uint32_t ppmThreshold = 0;

// Function to set the initial time
void set_time(uint8_t year, uint8_t month, uint8_t day, uint8_t week, uint8_t hour, uint8_t minute, uint8_t second, uint8_t DTS) {
 8000600:	b490      	push	{r4, r7}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	4604      	mov	r4, r0
 8000608:	4608      	mov	r0, r1
 800060a:	4611      	mov	r1, r2
 800060c:	461a      	mov	r2, r3
 800060e:	4623      	mov	r3, r4
 8000610:	71fb      	strb	r3, [r7, #7]
 8000612:	4603      	mov	r3, r0
 8000614:	71bb      	strb	r3, [r7, #6]
 8000616:	460b      	mov	r3, r1
 8000618:	717b      	strb	r3, [r7, #5]
 800061a:	4613      	mov	r3, r2
 800061c:	713b      	strb	r3, [r7, #4]
    currentTime.year = year;
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	b29a      	uxth	r2, r3
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <set_time+0x5c>)
 8000624:	801a      	strh	r2, [r3, #0]
    currentTime.month = month;
 8000626:	4a0d      	ldr	r2, [pc, #52]	@ (800065c <set_time+0x5c>)
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	7093      	strb	r3, [r2, #2]
    currentTime.day = day;
 800062c:	4a0b      	ldr	r2, [pc, #44]	@ (800065c <set_time+0x5c>)
 800062e:	797b      	ldrb	r3, [r7, #5]
 8000630:	70d3      	strb	r3, [r2, #3]
    currentTime.week = week;
 8000632:	4a0a      	ldr	r2, [pc, #40]	@ (800065c <set_time+0x5c>)
 8000634:	793b      	ldrb	r3, [r7, #4]
 8000636:	7113      	strb	r3, [r2, #4]
    currentTime.hour = hour;
 8000638:	4a08      	ldr	r2, [pc, #32]	@ (800065c <set_time+0x5c>)
 800063a:	7c3b      	ldrb	r3, [r7, #16]
 800063c:	7153      	strb	r3, [r2, #5]
    currentTime.minute = minute;
 800063e:	4a07      	ldr	r2, [pc, #28]	@ (800065c <set_time+0x5c>)
 8000640:	7d3b      	ldrb	r3, [r7, #20]
 8000642:	7193      	strb	r3, [r2, #6]
    currentTime.second = second;
 8000644:	4a05      	ldr	r2, [pc, #20]	@ (800065c <set_time+0x5c>)
 8000646:	7e3b      	ldrb	r3, [r7, #24]
 8000648:	71d3      	strb	r3, [r2, #7]
    dts_flag = DTS; //0 for Apr to Oct and 1 for Nov to March
 800064a:	4a05      	ldr	r2, [pc, #20]	@ (8000660 <set_time+0x60>)
 800064c:	7f3b      	ldrb	r3, [r7, #28]
 800064e:	7013      	strb	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bc90      	pop	{r4, r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000a4 	.word	0x200000a4
 8000660:	20000000 	.word	0x20000000

08000664 <weekday_string>:

// Function to convert weekday number to string
const char* weekday_string(uint8_t week) {
 8000664:	b4b0      	push	{r4, r5, r7}
 8000666:	b08b      	sub	sp, #44	@ 0x2c
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	71fb      	strb	r3, [r7, #7]
    const char *weekdays[] = {"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"};
 800066e:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <weekday_string+0x48>)
 8000670:	f107 040c 	add.w	r4, r7, #12
 8000674:	461d      	mov	r5, r3
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    if (week >= 1 && week <= 7) {
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00a      	beq.n	800069e <weekday_string+0x3a>
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	2b07      	cmp	r3, #7
 800068c:	d807      	bhi.n	800069e <weekday_string+0x3a>
        return weekdays[week-1];
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	3b01      	subs	r3, #1
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	3328      	adds	r3, #40	@ 0x28
 8000696:	443b      	add	r3, r7
 8000698:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800069c:	e000      	b.n	80006a0 <weekday_string+0x3c>
    } else {
        return "N/A"; // If week number is out of range
 800069e:	4b04      	ldr	r3, [pc, #16]	@ (80006b0 <weekday_string+0x4c>)
    }
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	372c      	adds	r7, #44	@ 0x2c
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bcb0      	pop	{r4, r5, r7}
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	08008984 	.word	0x08008984
 80006b0:	08008964 	.word	0x08008964

080006b4 <days_in_month>:

// Function to get the number of days in the current month
uint8_t days_in_month(uint8_t month, uint8_t year) {
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	460a      	mov	r2, r1
 80006be:	71fb      	strb	r3, [r7, #7]
 80006c0:	4613      	mov	r3, r2
 80006c2:	71bb      	strb	r3, [r7, #6]
    switch (month) {
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	2b0b      	cmp	r3, #11
 80006ca:	d83b      	bhi.n	8000744 <days_in_month+0x90>
 80006cc:	a201      	add	r2, pc, #4	@ (adr r2, 80006d4 <days_in_month+0x20>)
 80006ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d2:	bf00      	nop
 80006d4:	08000705 	.word	0x08000705
 80006d8:	08000709 	.word	0x08000709
 80006dc:	0800071d 	.word	0x0800071d
 80006e0:	08000721 	.word	0x08000721
 80006e4:	08000725 	.word	0x08000725
 80006e8:	08000729 	.word	0x08000729
 80006ec:	0800072d 	.word	0x0800072d
 80006f0:	08000731 	.word	0x08000731
 80006f4:	08000735 	.word	0x08000735
 80006f8:	08000739 	.word	0x08000739
 80006fc:	0800073d 	.word	0x0800073d
 8000700:	08000741 	.word	0x08000741
        case 1: return 31; // January
 8000704:	231f      	movs	r3, #31
 8000706:	e01e      	b.n	8000746 <days_in_month+0x92>
        case 2: return (year % 4 == 0) ? 29 : 28; // February
 8000708:	79bb      	ldrb	r3, [r7, #6]
 800070a:	f003 0303 	and.w	r3, r3, #3
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <days_in_month+0x64>
 8000714:	231d      	movs	r3, #29
 8000716:	e016      	b.n	8000746 <days_in_month+0x92>
 8000718:	231c      	movs	r3, #28
 800071a:	e014      	b.n	8000746 <days_in_month+0x92>
        case 3: return 31; // March
 800071c:	231f      	movs	r3, #31
 800071e:	e012      	b.n	8000746 <days_in_month+0x92>
        case 4: return 30; // April
 8000720:	231e      	movs	r3, #30
 8000722:	e010      	b.n	8000746 <days_in_month+0x92>
        case 5: return 31; // May
 8000724:	231f      	movs	r3, #31
 8000726:	e00e      	b.n	8000746 <days_in_month+0x92>
        case 6: return 30; // June
 8000728:	231e      	movs	r3, #30
 800072a:	e00c      	b.n	8000746 <days_in_month+0x92>
        case 7: return 31; // July
 800072c:	231f      	movs	r3, #31
 800072e:	e00a      	b.n	8000746 <days_in_month+0x92>
        case 8: return 31; // August
 8000730:	231f      	movs	r3, #31
 8000732:	e008      	b.n	8000746 <days_in_month+0x92>
        case 9: return 30; // September
 8000734:	231e      	movs	r3, #30
 8000736:	e006      	b.n	8000746 <days_in_month+0x92>
        case 10: return 31; // October
 8000738:	231f      	movs	r3, #31
 800073a:	e004      	b.n	8000746 <days_in_month+0x92>
        case 11: return 30; // November
 800073c:	231e      	movs	r3, #30
 800073e:	e002      	b.n	8000746 <days_in_month+0x92>
        case 12: return 31; // December
 8000740:	231f      	movs	r3, #31
 8000742:	e000      	b.n	8000746 <days_in_month+0x92>
        default: return 30; // Default case (should not happen)
 8000744:	231e      	movs	r3, #30
    }
}
 8000746:	4618      	mov	r0, r3
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop

08000754 <is_last_sunday>:

int is_last_sunday(uint8_t day, uint8_t month, uint8_t year) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
 800075e:	460b      	mov	r3, r1
 8000760:	71bb      	strb	r3, [r7, #6]
 8000762:	4613      	mov	r3, r2
 8000764:	717b      	strb	r3, [r7, #5]
    // Get the total number of days in the month
    uint8_t days = days_in_month(month, year);
 8000766:	797a      	ldrb	r2, [r7, #5]
 8000768:	79bb      	ldrb	r3, [r7, #6]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ffa1 	bl	80006b4 <days_in_month>
 8000772:	4603      	mov	r3, r0
 8000774:	73fb      	strb	r3, [r7, #15]

    // If the day is a Sunday and it's the last occurrence of that weekday in the month
    if ((day + 7) > days && currentTime.week == 7) {
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	1d9a      	adds	r2, r3, #6
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	429a      	cmp	r2, r3
 800077e:	db05      	blt.n	800078c <is_last_sunday+0x38>
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <is_last_sunday+0x44>)
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	2b07      	cmp	r3, #7
 8000786:	d101      	bne.n	800078c <is_last_sunday+0x38>
        return 1; // True if it is the last Sunday
 8000788:	2301      	movs	r3, #1
 800078a:	e000      	b.n	800078e <is_last_sunday+0x3a>
    }
    return 0; // False otherwise
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200000a4 	.word	0x200000a4

0800079c <HAL_TIM_PeriodElapsedCallback>:

// Timer callback function to update the time each second
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800079c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80007a0:	b084      	sub	sp, #16
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM15)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a54      	ldr	r2, [pc, #336]	@ (80008fc <HAL_TIM_PeriodElapsedCallback+0x160>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d15e      	bne.n	800086e <HAL_TIM_PeriodElapsedCallback+0xd2>
	{
		Update_Time_OnScreen();
 80007b0:	f000 fe64 	bl	800147c <Update_Time_OnScreen>
		adjust_flag = !adjust_flag;
 80007b4:	4b52      	ldr	r3, [pc, #328]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	bf0c      	ite	eq
 80007bc:	2301      	moveq	r3, #1
 80007be:	2300      	movne	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b4e      	ldr	r3, [pc, #312]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80007c6:	701a      	strb	r2, [r3, #0]
		if(adjust_flag)
 80007c8:	4b4d      	ldr	r3, [pc, #308]	@ (8000900 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d04e      	beq.n	800086e <HAL_TIM_PeriodElapsedCallback+0xd2>
		{
			switch (adjustment_stage) {
 80007d0:	4b4c      	ldr	r3, [pc, #304]	@ (8000904 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	3b01      	subs	r3, #1
 80007d6:	2b06      	cmp	r3, #6
 80007d8:	d848      	bhi.n	800086c <HAL_TIM_PeriodElapsedCallback+0xd0>
 80007da:	a201      	add	r2, pc, #4	@ (adr r2, 80007e0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80007dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e0:	080007fd 	.word	0x080007fd
 80007e4:	0800080d 	.word	0x0800080d
 80007e8:	0800081d 	.word	0x0800081d
 80007ec:	0800082d 	.word	0x0800082d
 80007f0:	0800083d 	.word	0x0800083d
 80007f4:	0800084d 	.word	0x0800084d
 80007f8:	0800085d 	.word	0x0800085d
				case 1:
					LCD_Set_Cursor(0,3);
 80007fc:	2103      	movs	r1, #3
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 fd92 	bl	8001328 <LCD_Set_Cursor>
					LCD_Send_String("    ");
 8000804:	4840      	ldr	r0, [pc, #256]	@ (8000908 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000806:	f000 fe23 	bl	8001450 <LCD_Send_String>
					break;
 800080a:	e030      	b.n	800086e <HAL_TIM_PeriodElapsedCallback+0xd2>
				case 2:
					LCD_Set_Cursor(0,8);
 800080c:	2108      	movs	r1, #8
 800080e:	2000      	movs	r0, #0
 8000810:	f000 fd8a 	bl	8001328 <LCD_Set_Cursor>
					LCD_Send_String("  ");
 8000814:	483d      	ldr	r0, [pc, #244]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000816:	f000 fe1b 	bl	8001450 <LCD_Send_String>
					break;
 800081a:	e028      	b.n	800086e <HAL_TIM_PeriodElapsedCallback+0xd2>
				case 3:
					LCD_Set_Cursor(0,11);
 800081c:	210b      	movs	r1, #11
 800081e:	2000      	movs	r0, #0
 8000820:	f000 fd82 	bl	8001328 <LCD_Set_Cursor>
					LCD_Send_String("  ");
 8000824:	4839      	ldr	r0, [pc, #228]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000826:	f000 fe13 	bl	8001450 <LCD_Send_String>
					break;
 800082a:	e020      	b.n	800086e <HAL_TIM_PeriodElapsedCallback+0xd2>
				case 4:
					LCD_Set_Cursor(0,14);
 800082c:	210e      	movs	r1, #14
 800082e:	2000      	movs	r0, #0
 8000830:	f000 fd7a 	bl	8001328 <LCD_Set_Cursor>
					LCD_Send_String("   ");
 8000834:	4836      	ldr	r0, [pc, #216]	@ (8000910 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000836:	f000 fe0b 	bl	8001450 <LCD_Send_String>
					break;
 800083a:	e018      	b.n	800086e <HAL_TIM_PeriodElapsedCallback+0xd2>
				case 5:
					LCD_Set_Cursor(1,6);
 800083c:	2106      	movs	r1, #6
 800083e:	2001      	movs	r0, #1
 8000840:	f000 fd72 	bl	8001328 <LCD_Set_Cursor>
					LCD_Send_String("  ");
 8000844:	4831      	ldr	r0, [pc, #196]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000846:	f000 fe03 	bl	8001450 <LCD_Send_String>
					break;
 800084a:	e010      	b.n	800086e <HAL_TIM_PeriodElapsedCallback+0xd2>
				case 6:
					LCD_Set_Cursor(1,9);
 800084c:	2109      	movs	r1, #9
 800084e:	2001      	movs	r0, #1
 8000850:	f000 fd6a 	bl	8001328 <LCD_Set_Cursor>
					LCD_Send_String("  ");
 8000854:	482d      	ldr	r0, [pc, #180]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000856:	f000 fdfb 	bl	8001450 <LCD_Send_String>
					break;
 800085a:	e008      	b.n	800086e <HAL_TIM_PeriodElapsedCallback+0xd2>
				case 7:
					LCD_Set_Cursor(1,12);
 800085c:	210c      	movs	r1, #12
 800085e:	2001      	movs	r0, #1
 8000860:	f000 fd62 	bl	8001328 <LCD_Set_Cursor>
					LCD_Send_String("  ");
 8000864:	4829      	ldr	r0, [pc, #164]	@ (800090c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000866:	f000 fdf3 	bl	8001450 <LCD_Send_String>
					break;
 800086a:	e000      	b.n	800086e <HAL_TIM_PeriodElapsedCallback+0xd2>
				default:
					break;
 800086c:	bf00      	nop
				}
		}
	}
    if (htim->Instance == TIM2) { // Assuming TIM2 is used for the 10Hz timer
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000876:	f040 810f 	bne.w	8000a98 <HAL_TIM_PeriodElapsedCallback+0x2fc>
    	uint32_t currentTick = HAL_GetTick();
 800087a:	f003 fe63 	bl	8004544 <HAL_GetTick>
 800087e:	60f8      	str	r0, [r7, #12]

		// Calculate the time elapsed since the last callback (handles wrap-around)
		uint32_t tickDifference = currentTick - previousTick;
 8000880:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	60bb      	str	r3, [r7, #8]
		previousTick = currentTick;
 800088a:	4a22      	ldr	r2, [pc, #136]	@ (8000914 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	6013      	str	r3, [r2, #0]

		// Add the tick difference to the total elapsed time
		elapsedTime += tickDifference;
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	2200      	movs	r2, #0
 8000894:	461c      	mov	r4, r3
 8000896:	4615      	mov	r5, r2
 8000898:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800089a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800089e:	eb14 0802 	adds.w	r8, r4, r2
 80008a2:	eb45 0903 	adc.w	r9, r5, r3
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80008a8:	e9c3 8900 	strd	r8, r9, [r3]
    	sub_second_counter++;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b19      	ldr	r3, [pc, #100]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80008b6:	701a      	strb	r2, [r3, #0]
    	if(ppm != 0){
 80008b8:	4b19      	ldr	r3, [pc, #100]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d004      	beq.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x12e>
    		ppmCounter++;
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a17      	ldr	r2, [pc, #92]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008c8:	6013      	str	r3, [r2, #0]
    	}
    	if(ppm != 0 && ppmThreshold != 0 && ppmCounter >= ppmThreshold)
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d035      	beq.n	800093e <HAL_TIM_PeriodElapsedCallback+0x1a2>
 80008d2:	4b15      	ldr	r3, [pc, #84]	@ (8000928 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d031      	beq.n	800093e <HAL_TIM_PeriodElapsedCallback+0x1a2>
 80008da:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d32b      	bcc.n	800093e <HAL_TIM_PeriodElapsedCallback+0x1a2>
    	{
    		if(ppm>0){
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	dd1e      	ble.n	800092c <HAL_TIM_PeriodElapsedCallback+0x190>
    			sub_second_counter--;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <HAL_TIM_PeriodElapsedCallback+0x180>)
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e01d      	b.n	8000938 <HAL_TIM_PeriodElapsedCallback+0x19c>
 80008fc:	40014000 	.word	0x40014000
 8000900:	200000b4 	.word	0x200000b4
 8000904:	200000ad 	.word	0x200000ad
 8000908:	080089a0 	.word	0x080089a0
 800090c:	080089a8 	.word	0x080089a8
 8000910:	080089ac 	.word	0x080089ac
 8000914:	200000b8 	.word	0x200000b8
 8000918:	200000c0 	.word	0x200000c0
 800091c:	200000ac 	.word	0x200000ac
 8000920:	20000004 	.word	0x20000004
 8000924:	200000c8 	.word	0x200000c8
 8000928:	200000cc 	.word	0x200000cc
    		}
    		else{
    			sub_second_counter++;
 800092c:	4b5d      	ldr	r3, [pc, #372]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b5b      	ldr	r3, [pc, #364]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000936:	701a      	strb	r2, [r3, #0]
    		}
    		ppmCounter = 0;
 8000938:	4b5b      	ldr	r3, [pc, #364]	@ (8000aa8 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
    	}
		// Increment the second
		if (sub_second_counter >= 10){
 800093e:	4b59      	ldr	r3, [pc, #356]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b09      	cmp	r3, #9
 8000944:	f240 80a6 	bls.w	8000a94 <HAL_TIM_PeriodElapsedCallback+0x2f8>
			sub_second_counter = 0;
 8000948:	4b56      	ldr	r3, [pc, #344]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
			currentTime.second++;
 800094e:	4b57      	ldr	r3, [pc, #348]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000950:	79db      	ldrb	r3, [r3, #7]
 8000952:	3301      	adds	r3, #1
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b55      	ldr	r3, [pc, #340]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000958:	71da      	strb	r2, [r3, #7]

			// Handle minute increment
			if (currentTime.second >= 60) {
 800095a:	4b54      	ldr	r3, [pc, #336]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 800095c:	79db      	ldrb	r3, [r3, #7]
 800095e:	2b3b      	cmp	r3, #59	@ 0x3b
 8000960:	f240 8098 	bls.w	8000a94 <HAL_TIM_PeriodElapsedCallback+0x2f8>
				currentTime.second = 0;
 8000964:	4b51      	ldr	r3, [pc, #324]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000966:	2200      	movs	r2, #0
 8000968:	71da      	strb	r2, [r3, #7]
				currentTime.minute++;
 800096a:	4b50      	ldr	r3, [pc, #320]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 800096c:	799b      	ldrb	r3, [r3, #6]
 800096e:	3301      	adds	r3, #1
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4b4e      	ldr	r3, [pc, #312]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000974:	719a      	strb	r2, [r3, #6]

				// Handle hour increment
				if (currentTime.minute >= 60) {
 8000976:	4b4d      	ldr	r3, [pc, #308]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000978:	799b      	ldrb	r3, [r3, #6]
 800097a:	2b3b      	cmp	r3, #59	@ 0x3b
 800097c:	f240 808a 	bls.w	8000a94 <HAL_TIM_PeriodElapsedCallback+0x2f8>
					currentTime.minute = 0;
 8000980:	4b4a      	ldr	r3, [pc, #296]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000982:	2200      	movs	r2, #0
 8000984:	719a      	strb	r2, [r3, #6]
					currentTime.hour++;
 8000986:	4b49      	ldr	r3, [pc, #292]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000988:	795b      	ldrb	r3, [r3, #5]
 800098a:	3301      	adds	r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b47      	ldr	r3, [pc, #284]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000990:	715a      	strb	r2, [r3, #5]

					// Handle day increment
					if (currentTime.hour >= 24) {
 8000992:	4b46      	ldr	r3, [pc, #280]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000994:	795b      	ldrb	r3, [r3, #5]
 8000996:	2b17      	cmp	r3, #23
 8000998:	d93e      	bls.n	8000a18 <HAL_TIM_PeriodElapsedCallback+0x27c>
						currentTime.hour = 0;
 800099a:	4b44      	ldr	r3, [pc, #272]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 800099c:	2200      	movs	r2, #0
 800099e:	715a      	strb	r2, [r3, #5]
						currentTime.day++;
 80009a0:	4b42      	ldr	r3, [pc, #264]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 80009a2:	78db      	ldrb	r3, [r3, #3]
 80009a4:	3301      	adds	r3, #1
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b40      	ldr	r3, [pc, #256]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 80009aa:	70da      	strb	r2, [r3, #3]
						currentTime.week = (currentTime.week % 7) + 1; // Increment the weekday, wrapping around
 80009ac:	4b3f      	ldr	r3, [pc, #252]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 80009ae:	791a      	ldrb	r2, [r3, #4]
 80009b0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ab0 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80009b2:	fba3 1302 	umull	r1, r3, r3, r2
 80009b6:	1ad1      	subs	r1, r2, r3
 80009b8:	0849      	lsrs	r1, r1, #1
 80009ba:	440b      	add	r3, r1
 80009bc:	0899      	lsrs	r1, r3, #2
 80009be:	460b      	mov	r3, r1
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	1a5b      	subs	r3, r3, r1
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	3301      	adds	r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b37      	ldr	r3, [pc, #220]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 80009ce:	711a      	strb	r2, [r3, #4]

						// Handle month increment with correct day limits
						if (currentTime.day > days_in_month(currentTime.month, currentTime.year)) {
 80009d0:	4b36      	ldr	r3, [pc, #216]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 80009d2:	78dc      	ldrb	r4, [r3, #3]
 80009d4:	4b35      	ldr	r3, [pc, #212]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 80009d6:	789b      	ldrb	r3, [r3, #2]
 80009d8:	4a34      	ldr	r2, [pc, #208]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 80009da:	8812      	ldrh	r2, [r2, #0]
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fe67 	bl	80006b4 <days_in_month>
 80009e6:	4603      	mov	r3, r0
 80009e8:	429c      	cmp	r4, r3
 80009ea:	d915      	bls.n	8000a18 <HAL_TIM_PeriodElapsedCallback+0x27c>
							currentTime.day = 1;
 80009ec:	4b2f      	ldr	r3, [pc, #188]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	70da      	strb	r2, [r3, #3]
							currentTime.month++;
 80009f2:	4b2e      	ldr	r3, [pc, #184]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 80009f4:	789b      	ldrb	r3, [r3, #2]
 80009f6:	3301      	adds	r3, #1
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4b2c      	ldr	r3, [pc, #176]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 80009fc:	709a      	strb	r2, [r3, #2]

							// Handle year increment
							if (currentTime.month > 12) {
 80009fe:	4b2b      	ldr	r3, [pc, #172]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a00:	789b      	ldrb	r3, [r3, #2]
 8000a02:	2b0c      	cmp	r3, #12
 8000a04:	d908      	bls.n	8000a18 <HAL_TIM_PeriodElapsedCallback+0x27c>
								currentTime.month = 1;
 8000a06:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	709a      	strb	r2, [r3, #2]
								currentTime.year++;
 8000a0c:	4b27      	ldr	r3, [pc, #156]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	3301      	adds	r3, #1
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a16:	801a      	strh	r2, [r3, #0]
							}
						}
					}

					// Handle Daylight Saving Time changes
					if (currentTime.month == 10 && is_last_sunday(currentTime.day, currentTime.month, currentTime.year)) {
 8000a18:	4b24      	ldr	r3, [pc, #144]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a1a:	789b      	ldrb	r3, [r3, #2]
 8000a1c:	2b0a      	cmp	r3, #10
 8000a1e:	d11a      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x2ba>
 8000a20:	4b22      	ldr	r3, [pc, #136]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a22:	78db      	ldrb	r3, [r3, #3]
 8000a24:	4a21      	ldr	r2, [pc, #132]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a26:	7891      	ldrb	r1, [r2, #2]
 8000a28:	4a20      	ldr	r2, [pc, #128]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a2a:	8812      	ldrh	r2, [r2, #0]
 8000a2c:	b2d2      	uxtb	r2, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fe90 	bl	8000754 <is_last_sunday>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00d      	beq.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x2ba>
						// DST ends: Move clock back by 1 hour at 1 AM
						if (currentTime.hour == 1 && dts_flag == 0) {
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a3c:	795b      	ldrb	r3, [r3, #5]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d109      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x2ba>
 8000a42:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d105      	bne.n	8000a56 <HAL_TIM_PeriodElapsedCallback+0x2ba>
							currentTime.hour = 0;
 8000a4a:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	715a      	strb	r2, [r3, #5]
							dts_flag = 1;
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
						}
					}
					if (currentTime.month == 3 && is_last_sunday(currentTime.day, currentTime.month, currentTime.year)) {
 8000a56:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a58:	789b      	ldrb	r3, [r3, #2]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d11a      	bne.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8000a5e:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a60:	78db      	ldrb	r3, [r3, #3]
 8000a62:	4a12      	ldr	r2, [pc, #72]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a64:	7891      	ldrb	r1, [r2, #2]
 8000a66:	4a11      	ldr	r2, [pc, #68]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a68:	8812      	ldrh	r2, [r2, #0]
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fe71 	bl	8000754 <is_last_sunday>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00d      	beq.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x2f8>
						// DST starts: Move clock forward by 1 hour at 1 AM
						if (currentTime.hour == 0 && dts_flag == 1) {
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a7a:	795b      	ldrb	r3, [r3, #5]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d109      	bne.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d105      	bne.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x2f8>
							currentTime.hour = 1;
 8000a88:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <HAL_TIM_PeriodElapsedCallback+0x310>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	715a      	strb	r2, [r3, #5]
							dts_flag = 0;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
						}
					}
				}
			}
    	}
        Update_Time_OnScreen(); // Update the LCD with the current time
 8000a94:	f000 fcf2 	bl	800147c <Update_Time_OnScreen>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000ac 	.word	0x200000ac
 8000aa8:	200000c8 	.word	0x200000c8
 8000aac:	200000a4 	.word	0x200000a4
 8000ab0:	24924925 	.word	0x24924925
 8000ab4:	20000000 	.word	0x20000000

08000ab8 <Adjustment>:

void Adjustment()
{
 8000ab8:	b598      	push	{r3, r4, r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	if(calibration_stage == 0) // only execute when not in the calibration mode
 8000abc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <Adjustment+0xbc>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d053      	beq.n	8000b72 <Adjustment+0xba>
	{
		if(adjustment_stage == 0)
 8000aca:	4b2b      	ldr	r3, [pc, #172]	@ (8000b78 <Adjustment+0xc0>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d110      	bne.n	8000af4 <Adjustment+0x3c>
		{
			HAL_TIM_Base_Stop_IT(&htim2);
 8000ad2:	482a      	ldr	r0, [pc, #168]	@ (8000b7c <Adjustment+0xc4>)
 8000ad4:	f006 fa3a 	bl	8006f4c <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Start_IT(&htim15);
 8000ad8:	4829      	ldr	r0, [pc, #164]	@ (8000b80 <Adjustment+0xc8>)
 8000ada:	f006 f9e3 	bl	8006ea4 <HAL_TIM_Base_Start_IT>
			LCD_Set_Cursor(3,0);
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2003      	movs	r0, #3
 8000ae2:	f000 fc21 	bl	8001328 <LCD_Set_Cursor>
			LCD_Send_String("Adjustment ON");
 8000ae6:	4827      	ldr	r0, [pc, #156]	@ (8000b84 <Adjustment+0xcc>)
 8000ae8:	f000 fcb2 	bl	8001450 <LCD_Send_String>
			HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 8000aec:	2102      	movs	r1, #2
 8000aee:	4826      	ldr	r0, [pc, #152]	@ (8000b88 <Adjustment+0xd0>)
 8000af0:	f004 fb44 	bl	800517c <HAL_GPIO_TogglePin>
		}
		if(adjustment_stage > 6)
 8000af4:	4b20      	ldr	r3, [pc, #128]	@ (8000b78 <Adjustment+0xc0>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b06      	cmp	r3, #6
 8000afa:	d934      	bls.n	8000b66 <Adjustment+0xae>
		{
			LCD_Set_Cursor(3,0);
 8000afc:	2100      	movs	r1, #0
 8000afe:	2003      	movs	r0, #3
 8000b00:	f000 fc12 	bl	8001328 <LCD_Set_Cursor>
			LCD_Send_String("                    ");
 8000b04:	4821      	ldr	r0, [pc, #132]	@ (8000b8c <Adjustment+0xd4>)
 8000b06:	f000 fca3 	bl	8001450 <LCD_Send_String>
			HAL_TIM_Base_Stop_IT(&htim15);
 8000b0a:	481d      	ldr	r0, [pc, #116]	@ (8000b80 <Adjustment+0xc8>)
 8000b0c:	f006 fa1e 	bl	8006f4c <HAL_TIM_Base_Stop_IT>
			adjustment_stage = 0;
 8000b10:	4b19      	ldr	r3, [pc, #100]	@ (8000b78 <Adjustment+0xc0>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
			if(currentTime.day > days_in_month(currentTime.month, currentTime.year))
 8000b16:	4b1e      	ldr	r3, [pc, #120]	@ (8000b90 <Adjustment+0xd8>)
 8000b18:	78dc      	ldrb	r4, [r3, #3]
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <Adjustment+0xd8>)
 8000b1c:	789b      	ldrb	r3, [r3, #2]
 8000b1e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b90 <Adjustment+0xd8>)
 8000b20:	8812      	ldrh	r2, [r2, #0]
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fdc4 	bl	80006b4 <days_in_month>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	429c      	cmp	r4, r3
 8000b30:	d90c      	bls.n	8000b4c <Adjustment+0x94>
			{
				currentTime.day = days_in_month(currentTime.month, currentTime.year);
 8000b32:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <Adjustment+0xd8>)
 8000b34:	789b      	ldrb	r3, [r3, #2]
 8000b36:	4a16      	ldr	r2, [pc, #88]	@ (8000b90 <Adjustment+0xd8>)
 8000b38:	8812      	ldrh	r2, [r2, #0]
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	4611      	mov	r1, r2
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fdb8 	bl	80006b4 <days_in_month>
 8000b44:	4603      	mov	r3, r0
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <Adjustment+0xd8>)
 8000b4a:	70da      	strb	r2, [r3, #3]
			}
			HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	480e      	ldr	r0, [pc, #56]	@ (8000b88 <Adjustment+0xd0>)
 8000b50:	f004 fb14 	bl	800517c <HAL_GPIO_TogglePin>
			previousTick = HAL_GetTick(); // update previousTick to ignore the time used to adjust the clock, because the clock is not operating under this mode
 8000b54:	f003 fcf6 	bl	8004544 <HAL_GetTick>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b94 <Adjustment+0xdc>)
 8000b5c:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8000b5e:	4807      	ldr	r0, [pc, #28]	@ (8000b7c <Adjustment+0xc4>)
 8000b60:	f006 f9a0 	bl	8006ea4 <HAL_TIM_Base_Start_IT>
			return;
 8000b64:	e005      	b.n	8000b72 <Adjustment+0xba>
		}
		adjustment_stage++;
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <Adjustment+0xc0>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b02      	ldr	r3, [pc, #8]	@ (8000b78 <Adjustment+0xc0>)
 8000b70:	701a      	strb	r2, [r3, #0]
	}
}
 8000b72:	bd98      	pop	{r3, r4, r7, pc}
 8000b74:	200000ae 	.word	0x200000ae
 8000b78:	200000ad 	.word	0x200000ad
 8000b7c:	200001b4 	.word	0x200001b4
 8000b80:	20000200 	.word	0x20000200
 8000b84:	080089b0 	.word	0x080089b0
 8000b88:	48000400 	.word	0x48000400
 8000b8c:	080089c0 	.word	0x080089c0
 8000b90:	200000a4 	.word	0x200000a4
 8000b94:	200000b8 	.word	0x200000b8

08000b98 <Calibration>:

void Calibration()
{
 8000b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000b9c:	b08a      	sub	sp, #40	@ 0x28
 8000b9e:	af00      	add	r7, sp, #0
	if(adjustment_stage == 0) // only execute when not in the adjustment mode
 8000ba0:	4b59      	ldr	r3, [pc, #356]	@ (8000d08 <Calibration+0x170>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f040 80a9 	bne.w	8000cfc <Calibration+0x164>
	{
		HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin);
 8000baa:	2102      	movs	r1, #2
 8000bac:	4857      	ldr	r0, [pc, #348]	@ (8000d0c <Calibration+0x174>)
 8000bae:	f004 fae5 	bl	800517c <HAL_GPIO_TogglePin>
		calibration_stage = !calibration_stage;
 8000bb2:	4b57      	ldr	r3, [pc, #348]	@ (8000d10 <Calibration+0x178>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bf14      	ite	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	2300      	moveq	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f083 0301 	eor.w	r3, r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b50      	ldr	r3, [pc, #320]	@ (8000d10 <Calibration+0x178>)
 8000bce:	701a      	strb	r2, [r3, #0]
		if(calibration_stage == 1)
 8000bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8000d10 <Calibration+0x178>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d007      	beq.n	8000be8 <Calibration+0x50>
		{
			LCD_Set_Cursor(3,0);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2003      	movs	r0, #3
 8000bdc:	f000 fba4 	bl	8001328 <LCD_Set_Cursor>
			LCD_Send_String("Calibration ON");
 8000be0:	484c      	ldr	r0, [pc, #304]	@ (8000d14 <Calibration+0x17c>)
 8000be2:	f000 fc35 	bl	8001450 <LCD_Send_String>
			}
			LCD_Set_Cursor(3,0);
			LCD_Send_String("                    ");
		}
	}
}
 8000be6:	e089      	b.n	8000cfc <Calibration+0x164>
			int32_t delta_ppm = (int32_t)((driftTime * 1000000LL) / (int64_t)elapsedTime);
 8000be8:	4b4b      	ldr	r3, [pc, #300]	@ (8000d18 <Calibration+0x180>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	17da      	asrs	r2, r3, #31
 8000bee:	469a      	mov	sl, r3
 8000bf0:	4693      	mov	fp, r2
 8000bf2:	4652      	mov	r2, sl
 8000bf4:	465b      	mov	r3, fp
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	f04f 0100 	mov.w	r1, #0
 8000bfe:	0159      	lsls	r1, r3, #5
 8000c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8000c04:	0150      	lsls	r0, r2, #5
 8000c06:	4602      	mov	r2, r0
 8000c08:	460b      	mov	r3, r1
 8000c0a:	ebb2 040a 	subs.w	r4, r2, sl
 8000c0e:	eb63 050b 	sbc.w	r5, r3, fp
 8000c12:	f04f 0200 	mov.w	r2, #0
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	026b      	lsls	r3, r5, #9
 8000c1c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8000c20:	0262      	lsls	r2, r4, #9
 8000c22:	4614      	mov	r4, r2
 8000c24:	461d      	mov	r5, r3
 8000c26:	eb14 080a 	adds.w	r8, r4, sl
 8000c2a:	eb45 090b 	adc.w	r9, r5, fp
 8000c2e:	f04f 0200 	mov.w	r2, #0
 8000c32:	f04f 0300 	mov.w	r3, #0
 8000c36:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8000c3a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8000c3e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8000c42:	ebb2 0108 	subs.w	r1, r2, r8
 8000c46:	6039      	str	r1, [r7, #0]
 8000c48:	eb63 0309 	sbc.w	r3, r3, r9
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000c52:	460b      	mov	r3, r1
 8000c54:	eb13 030a 	adds.w	r3, r3, sl
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	eb43 030b 	adc.w	r3, r3, fp
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b2e      	ldr	r3, [pc, #184]	@ (8000d1c <Calibration+0x184>)
 8000c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c6c:	f7ff fb00 	bl	8000270 <__aeabi_ldivmod>
 8000c70:	4602      	mov	r2, r0
 8000c72:	460b      	mov	r3, r1
 8000c74:	4613      	mov	r3, r2
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
			if(delta_ppm != 0){
 8000c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d037      	beq.n	8000cee <Calibration+0x156>
				ppm += delta_ppm;
 8000c7e:	4b28      	ldr	r3, [pc, #160]	@ (8000d20 <Calibration+0x188>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c84:	4413      	add	r3, r2
 8000c86:	4a26      	ldr	r2, [pc, #152]	@ (8000d20 <Calibration+0x188>)
 8000c88:	6013      	str	r3, [r2, #0]
				driftTime = 0;
 8000c8a:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <Calibration+0x180>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
				elapsedTime = 0;
 8000c90:	4922      	ldr	r1, [pc, #136]	@ (8000d1c <Calibration+0x184>)
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	f04f 0300 	mov.w	r3, #0
 8000c9a:	e9c1 2300 	strd	r2, r3, [r1]
				EEPROM_WriteInt32(VIRT_ADDRESS_PPM, ppm);
 8000c9e:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <Calibration+0x188>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f000 fa63 	bl	8001170 <EEPROM_WriteInt32>
				ppmThreshold = 100000 / labs(ppm/10);
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <Calibration+0x188>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a1d      	ldr	r2, [pc, #116]	@ (8000d24 <Calibration+0x18c>)
 8000cb0:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb4:	1092      	asrs	r2, r2, #2
 8000cb6:	17db      	asrs	r3, r3, #31
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	bfb8      	it	lt
 8000cbe:	425b      	neglt	r3, r3
 8000cc0:	4a19      	ldr	r2, [pc, #100]	@ (8000d28 <Calibration+0x190>)
 8000cc2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <Calibration+0x194>)
 8000cca:	601a      	str	r2, [r3, #0]
				snprintf(ppmString, sizeof(ppmString), "PPM=%+d", (int)ppm); // %+d includes the sign
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <Calibration+0x188>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f107 0014 	add.w	r0, r7, #20
 8000cd4:	4a16      	ldr	r2, [pc, #88]	@ (8000d30 <Calibration+0x198>)
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f007 f984 	bl	8007fe4 <sniprintf>
				LCD_Set_Cursor(2,0);
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2002      	movs	r0, #2
 8000ce0:	f000 fb22 	bl	8001328 <LCD_Set_Cursor>
				LCD_Send_String(ppmString);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fbb1 	bl	8001450 <LCD_Send_String>
			LCD_Set_Cursor(3,0);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 fb19 	bl	8001328 <LCD_Set_Cursor>
			LCD_Send_String("                    ");
 8000cf6:	480f      	ldr	r0, [pc, #60]	@ (8000d34 <Calibration+0x19c>)
 8000cf8:	f000 fbaa 	bl	8001450 <LCD_Send_String>
}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	@ 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d06:	bf00      	nop
 8000d08:	200000ad 	.word	0x200000ad
 8000d0c:	48000400 	.word	0x48000400
 8000d10:	200000ae 	.word	0x200000ae
 8000d14:	080089d8 	.word	0x080089d8
 8000d18:	200000b0 	.word	0x200000b0
 8000d1c:	200000c0 	.word	0x200000c0
 8000d20:	20000004 	.word	0x20000004
 8000d24:	66666667 	.word	0x66666667
 8000d28:	000186a0 	.word	0x000186a0
 8000d2c:	200000cc 	.word	0x200000cc
 8000d30:	080089e8 	.word	0x080089e8
 8000d34:	080089c0 	.word	0x080089c0

08000d38 <Plus>:

void Plus()
{
 8000d38:	b598      	push	{r3, r4, r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	if(calibration_stage == 0 && adjustment_stage != 0) // not in the calibration mode but in the adjustment mode
 8000d3c:	4b6a      	ldr	r3, [pc, #424]	@ (8000ee8 <Plus+0x1b0>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	f083 0301 	eor.w	r3, r3, #1
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 80a2 	beq.w	8000e90 <Plus+0x158>
 8000d4c:	4b67      	ldr	r3, [pc, #412]	@ (8000eec <Plus+0x1b4>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f000 809d 	beq.w	8000e90 <Plus+0x158>
	{
		switch (adjustment_stage) {
 8000d56:	4b65      	ldr	r3, [pc, #404]	@ (8000eec <Plus+0x1b4>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	2b06      	cmp	r3, #6
 8000d5e:	f200 8095 	bhi.w	8000e8c <Plus+0x154>
 8000d62:	a201      	add	r2, pc, #4	@ (adr r2, 8000d68 <Plus+0x30>)
 8000d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d68:	08000d85 	.word	0x08000d85
 8000d6c:	08000da7 	.word	0x08000da7
 8000d70:	08000dc9 	.word	0x08000dc9
 8000d74:	08000df7 	.word	0x08000df7
 8000d78:	08000e1d 	.word	0x08000e1d
 8000d7c:	08000e41 	.word	0x08000e41
 8000d80:	08000e67 	.word	0x08000e67
			case 1:
				// Adjust year (increase)
				currentTime.year = (currentTime.year + 1) % 100;
 8000d84:	4b5a      	ldr	r3, [pc, #360]	@ (8000ef0 <Plus+0x1b8>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	4a5a      	ldr	r2, [pc, #360]	@ (8000ef4 <Plus+0x1bc>)
 8000d8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d90:	1151      	asrs	r1, r2, #5
 8000d92:	17da      	asrs	r2, r3, #31
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	2164      	movs	r1, #100	@ 0x64
 8000d98:	fb01 f202 	mul.w	r2, r1, r2
 8000d9c:	1a9a      	subs	r2, r3, r2
 8000d9e:	b292      	uxth	r2, r2
 8000da0:	4b53      	ldr	r3, [pc, #332]	@ (8000ef0 <Plus+0x1b8>)
 8000da2:	801a      	strh	r2, [r3, #0]
				break;
 8000da4:	e073      	b.n	8000e8e <Plus+0x156>
			case 2:
				// Adjust month (increase)
				currentTime.month = (currentTime.month % 12) + 1;
 8000da6:	4b52      	ldr	r3, [pc, #328]	@ (8000ef0 <Plus+0x1b8>)
 8000da8:	789a      	ldrb	r2, [r3, #2]
 8000daa:	4b53      	ldr	r3, [pc, #332]	@ (8000ef8 <Plus+0x1c0>)
 8000dac:	fba3 1302 	umull	r1, r3, r3, r2
 8000db0:	08d9      	lsrs	r1, r3, #3
 8000db2:	460b      	mov	r3, r1
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	440b      	add	r3, r1
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ef0 <Plus+0x1b8>)
 8000dc4:	709a      	strb	r2, [r3, #2]
				break;
 8000dc6:	e062      	b.n	8000e8e <Plus+0x156>
			case 3:
				// Adjust day (increase)
				currentTime.day = (currentTime.day % days_in_month(currentTime.month, currentTime.year)) + 1;
 8000dc8:	4b49      	ldr	r3, [pc, #292]	@ (8000ef0 <Plus+0x1b8>)
 8000dca:	78dc      	ldrb	r4, [r3, #3]
 8000dcc:	4b48      	ldr	r3, [pc, #288]	@ (8000ef0 <Plus+0x1b8>)
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	4a47      	ldr	r2, [pc, #284]	@ (8000ef0 <Plus+0x1b8>)
 8000dd2:	8812      	ldrh	r2, [r2, #0]
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fc6b 	bl	80006b4 <days_in_month>
 8000dde:	4603      	mov	r3, r0
 8000de0:	fbb4 f2f3 	udiv	r2, r4, r3
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
 8000de8:	1ae3      	subs	r3, r4, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	3301      	adds	r3, #1
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ef0 <Plus+0x1b8>)
 8000df2:	70da      	strb	r2, [r3, #3]
				break;
 8000df4:	e04b      	b.n	8000e8e <Plus+0x156>
			case 4:
				// Adjust week (increase)
				currentTime.week = (currentTime.week % 7) + 1;
 8000df6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef0 <Plus+0x1b8>)
 8000df8:	791a      	ldrb	r2, [r3, #4]
 8000dfa:	4b40      	ldr	r3, [pc, #256]	@ (8000efc <Plus+0x1c4>)
 8000dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8000e00:	1ad1      	subs	r1, r2, r3
 8000e02:	0849      	lsrs	r1, r1, #1
 8000e04:	440b      	add	r3, r1
 8000e06:	0899      	lsrs	r1, r3, #2
 8000e08:	460b      	mov	r3, r1
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	3301      	adds	r3, #1
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b36      	ldr	r3, [pc, #216]	@ (8000ef0 <Plus+0x1b8>)
 8000e18:	711a      	strb	r2, [r3, #4]
				break;
 8000e1a:	e038      	b.n	8000e8e <Plus+0x156>
			case 5:
				// Adjust hour (increase)
				currentTime.hour = (currentTime.hour + 1) % 24;
 8000e1c:	4b34      	ldr	r3, [pc, #208]	@ (8000ef0 <Plus+0x1b8>)
 8000e1e:	795b      	ldrb	r3, [r3, #5]
 8000e20:	1c5a      	adds	r2, r3, #1
 8000e22:	4b37      	ldr	r3, [pc, #220]	@ (8000f00 <Plus+0x1c8>)
 8000e24:	fb83 1302 	smull	r1, r3, r3, r2
 8000e28:	1099      	asrs	r1, r3, #2
 8000e2a:	17d3      	asrs	r3, r2, #31
 8000e2c:	1ac9      	subs	r1, r1, r3
 8000e2e:	460b      	mov	r3, r1
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	440b      	add	r3, r1
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	1ad1      	subs	r1, r2, r3
 8000e38:	b2ca      	uxtb	r2, r1
 8000e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <Plus+0x1b8>)
 8000e3c:	715a      	strb	r2, [r3, #5]
				break;
 8000e3e:	e026      	b.n	8000e8e <Plus+0x156>
			case 6:
				// Adjust minute (increase)
				currentTime.minute = (currentTime.minute + 1) % 60;
 8000e40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef0 <Plus+0x1b8>)
 8000e42:	799b      	ldrb	r3, [r3, #6]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	4b2f      	ldr	r3, [pc, #188]	@ (8000f04 <Plus+0x1cc>)
 8000e48:	fb83 1302 	smull	r1, r3, r3, r2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	1159      	asrs	r1, r3, #5
 8000e50:	17d3      	asrs	r3, r2, #31
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	460b      	mov	r3, r1
 8000e56:	011b      	lsls	r3, r3, #4
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	1ad1      	subs	r1, r2, r3
 8000e5e:	b2ca      	uxtb	r2, r1
 8000e60:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <Plus+0x1b8>)
 8000e62:	719a      	strb	r2, [r3, #6]
				break;
 8000e64:	e013      	b.n	8000e8e <Plus+0x156>
			case 7:
				// Adjust second (increase)
				currentTime.second = (currentTime.second + 1) % 60;
 8000e66:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <Plus+0x1b8>)
 8000e68:	79db      	ldrb	r3, [r3, #7]
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	4b25      	ldr	r3, [pc, #148]	@ (8000f04 <Plus+0x1cc>)
 8000e6e:	fb83 1302 	smull	r1, r3, r3, r2
 8000e72:	4413      	add	r3, r2
 8000e74:	1159      	asrs	r1, r3, #5
 8000e76:	17d3      	asrs	r3, r2, #31
 8000e78:	1ac9      	subs	r1, r1, r3
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	011b      	lsls	r3, r3, #4
 8000e7e:	1a5b      	subs	r3, r3, r1
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	1ad1      	subs	r1, r2, r3
 8000e84:	b2ca      	uxtb	r2, r1
 8000e86:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <Plus+0x1b8>)
 8000e88:	71da      	strb	r2, [r3, #7]
				break;
 8000e8a:	e000      	b.n	8000e8e <Plus+0x156>
			default:
				break;
 8000e8c:	bf00      	nop
		switch (adjustment_stage) {
 8000e8e:	e02a      	b.n	8000ee6 <Plus+0x1ae>
		    }
	}
	else if(calibration_stage == 1 && adjustment_stage == 0) //not in the adjustment mode but in the calibration mode
 8000e90:	4b15      	ldr	r3, [pc, #84]	@ (8000ee8 <Plus+0x1b0>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d025      	beq.n	8000ee4 <Plus+0x1ac>
 8000e98:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <Plus+0x1b4>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d121      	bne.n	8000ee4 <Plus+0x1ac>
	{
		if (sub_second_counter + 5 >= 10) {
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <Plus+0x1d0>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b04      	cmp	r3, #4
 8000ea6:	d905      	bls.n	8000eb4 <Plus+0x17c>
		    currentTime.second++;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <Plus+0x1b8>)
 8000eaa:	79db      	ldrb	r3, [r3, #7]
 8000eac:	3301      	adds	r3, #1
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <Plus+0x1b8>)
 8000eb2:	71da      	strb	r2, [r3, #7]
		}
		sub_second_counter = (sub_second_counter + 5) % 10;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	@ (8000f08 <Plus+0x1d0>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	1d5a      	adds	r2, r3, #5
 8000eba:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <Plus+0x1d4>)
 8000ebc:	fb83 1302 	smull	r1, r3, r3, r2
 8000ec0:	1099      	asrs	r1, r3, #2
 8000ec2:	17d3      	asrs	r3, r2, #31
 8000ec4:	1ac9      	subs	r1, r1, r3
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	440b      	add	r3, r1
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1ad1      	subs	r1, r2, r3
 8000ed0:	b2ca      	uxtb	r2, r1
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <Plus+0x1d0>)
 8000ed4:	701a      	strb	r2, [r3, #0]
		driftTime -= 500; //minus 500 millisecond each press as the clock is slower so negative ppm
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <Plus+0x1d8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8000ede:	4a0c      	ldr	r2, [pc, #48]	@ (8000f10 <Plus+0x1d8>)
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	e000      	b.n	8000ee6 <Plus+0x1ae>
	}
	else
	{
		return;
 8000ee4:	bf00      	nop
	}
}
 8000ee6:	bd98      	pop	{r3, r4, r7, pc}
 8000ee8:	200000ae 	.word	0x200000ae
 8000eec:	200000ad 	.word	0x200000ad
 8000ef0:	200000a4 	.word	0x200000a4
 8000ef4:	51eb851f 	.word	0x51eb851f
 8000ef8:	aaaaaaab 	.word	0xaaaaaaab
 8000efc:	24924925 	.word	0x24924925
 8000f00:	2aaaaaab 	.word	0x2aaaaaab
 8000f04:	88888889 	.word	0x88888889
 8000f08:	200000ac 	.word	0x200000ac
 8000f0c:	66666667 	.word	0x66666667
 8000f10:	200000b0 	.word	0x200000b0

08000f14 <Minus>:

void Minus()
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	if(calibration_stage == 0 && adjustment_stage != 0) // not in the calibration mode but in the adjustment mode
 8000f18:	4b6f      	ldr	r3, [pc, #444]	@ (80010d8 <Minus+0x1c4>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	f083 0301 	eor.w	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8081 	beq.w	800102a <Minus+0x116>
 8000f28:	4b6c      	ldr	r3, [pc, #432]	@ (80010dc <Minus+0x1c8>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d07c      	beq.n	800102a <Minus+0x116>
	{
		switch (adjustment_stage) {
 8000f30:	4b6a      	ldr	r3, [pc, #424]	@ (80010dc <Minus+0x1c8>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d875      	bhi.n	8001026 <Minus+0x112>
 8000f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f40 <Minus+0x2c>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000f5d 	.word	0x08000f5d
 8000f44:	08000f77 	.word	0x08000f77
 8000f48:	08000f91 	.word	0x08000f91
 8000f4c:	08000fbf 	.word	0x08000fbf
 8000f50:	08000fd9 	.word	0x08000fd9
 8000f54:	08000ff3 	.word	0x08000ff3
 8000f58:	0800100d 	.word	0x0800100d
			case 1:
				// Adjust year (decrease)
				currentTime.year = (currentTime.year == 0) ? 99 : currentTime.year - 1;
 8000f5c:	4b60      	ldr	r3, [pc, #384]	@ (80010e0 <Minus+0x1cc>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d004      	beq.n	8000f6e <Minus+0x5a>
 8000f64:	4b5e      	ldr	r3, [pc, #376]	@ (80010e0 <Minus+0x1cc>)
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	e000      	b.n	8000f70 <Minus+0x5c>
 8000f6e:	2363      	movs	r3, #99	@ 0x63
 8000f70:	4a5b      	ldr	r2, [pc, #364]	@ (80010e0 <Minus+0x1cc>)
 8000f72:	8013      	strh	r3, [r2, #0]
				break;
 8000f74:	e058      	b.n	8001028 <Minus+0x114>
			case 2:
				// Adjust month (decrease)
				currentTime.month = (currentTime.month == 1) ? 12 : currentTime.month - 1;
 8000f76:	4b5a      	ldr	r3, [pc, #360]	@ (80010e0 <Minus+0x1cc>)
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d004      	beq.n	8000f88 <Minus+0x74>
 8000f7e:	4b58      	ldr	r3, [pc, #352]	@ (80010e0 <Minus+0x1cc>)
 8000f80:	789b      	ldrb	r3, [r3, #2]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	e000      	b.n	8000f8a <Minus+0x76>
 8000f88:	230c      	movs	r3, #12
 8000f8a:	4a55      	ldr	r2, [pc, #340]	@ (80010e0 <Minus+0x1cc>)
 8000f8c:	7093      	strb	r3, [r2, #2]
				break;
 8000f8e:	e04b      	b.n	8001028 <Minus+0x114>
			case 3:
				// Adjust day (decrease)
				currentTime.day = (currentTime.day == 1) ? days_in_month(currentTime.month, currentTime.year) : currentTime.day - 1;
 8000f90:	4b53      	ldr	r3, [pc, #332]	@ (80010e0 <Minus+0x1cc>)
 8000f92:	78db      	ldrb	r3, [r3, #3]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d10b      	bne.n	8000fb0 <Minus+0x9c>
 8000f98:	4b51      	ldr	r3, [pc, #324]	@ (80010e0 <Minus+0x1cc>)
 8000f9a:	789b      	ldrb	r3, [r3, #2]
 8000f9c:	4a50      	ldr	r2, [pc, #320]	@ (80010e0 <Minus+0x1cc>)
 8000f9e:	8812      	ldrh	r2, [r2, #0]
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fb85 	bl	80006b4 <days_in_month>
 8000faa:	4603      	mov	r3, r0
 8000fac:	461a      	mov	r2, r3
 8000fae:	e003      	b.n	8000fb8 <Minus+0xa4>
 8000fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80010e0 <Minus+0x1cc>)
 8000fb2:	78db      	ldrb	r3, [r3, #3]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b49      	ldr	r3, [pc, #292]	@ (80010e0 <Minus+0x1cc>)
 8000fba:	70da      	strb	r2, [r3, #3]
				break;
 8000fbc:	e034      	b.n	8001028 <Minus+0x114>
			case 4:
				// Adjust week (decrease)
				currentTime.week = (currentTime.week == 1) ? 7 : currentTime.week - 1;
 8000fbe:	4b48      	ldr	r3, [pc, #288]	@ (80010e0 <Minus+0x1cc>)
 8000fc0:	791b      	ldrb	r3, [r3, #4]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d004      	beq.n	8000fd0 <Minus+0xbc>
 8000fc6:	4b46      	ldr	r3, [pc, #280]	@ (80010e0 <Minus+0x1cc>)
 8000fc8:	791b      	ldrb	r3, [r3, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	e000      	b.n	8000fd2 <Minus+0xbe>
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	4a43      	ldr	r2, [pc, #268]	@ (80010e0 <Minus+0x1cc>)
 8000fd4:	7113      	strb	r3, [r2, #4]
				break;
 8000fd6:	e027      	b.n	8001028 <Minus+0x114>
			case 5:
				// Adjust hour (decrease)
				currentTime.hour = (currentTime.hour == 0) ? 23 : currentTime.hour - 1;
 8000fd8:	4b41      	ldr	r3, [pc, #260]	@ (80010e0 <Minus+0x1cc>)
 8000fda:	795b      	ldrb	r3, [r3, #5]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d004      	beq.n	8000fea <Minus+0xd6>
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80010e0 <Minus+0x1cc>)
 8000fe2:	795b      	ldrb	r3, [r3, #5]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	e000      	b.n	8000fec <Minus+0xd8>
 8000fea:	2317      	movs	r3, #23
 8000fec:	4a3c      	ldr	r2, [pc, #240]	@ (80010e0 <Minus+0x1cc>)
 8000fee:	7153      	strb	r3, [r2, #5]
				break;
 8000ff0:	e01a      	b.n	8001028 <Minus+0x114>
			case 6:
				// Adjust minute (decrease)
				currentTime.minute = (currentTime.minute == 0) ? 59 : currentTime.minute - 1;
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80010e0 <Minus+0x1cc>)
 8000ff4:	799b      	ldrb	r3, [r3, #6]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <Minus+0xf0>
 8000ffa:	4b39      	ldr	r3, [pc, #228]	@ (80010e0 <Minus+0x1cc>)
 8000ffc:	799b      	ldrb	r3, [r3, #6]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	e000      	b.n	8001006 <Minus+0xf2>
 8001004:	233b      	movs	r3, #59	@ 0x3b
 8001006:	4a36      	ldr	r2, [pc, #216]	@ (80010e0 <Minus+0x1cc>)
 8001008:	7193      	strb	r3, [r2, #6]
				break;
 800100a:	e00d      	b.n	8001028 <Minus+0x114>
			case 7:
				// Adjust second (decrease)
				currentTime.second = (currentTime.second == 0) ? 59 : currentTime.second - 1;
 800100c:	4b34      	ldr	r3, [pc, #208]	@ (80010e0 <Minus+0x1cc>)
 800100e:	79db      	ldrb	r3, [r3, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d004      	beq.n	800101e <Minus+0x10a>
 8001014:	4b32      	ldr	r3, [pc, #200]	@ (80010e0 <Minus+0x1cc>)
 8001016:	79db      	ldrb	r3, [r3, #7]
 8001018:	3b01      	subs	r3, #1
 800101a:	b2db      	uxtb	r3, r3
 800101c:	e000      	b.n	8001020 <Minus+0x10c>
 800101e:	233b      	movs	r3, #59	@ 0x3b
 8001020:	4a2f      	ldr	r2, [pc, #188]	@ (80010e0 <Minus+0x1cc>)
 8001022:	71d3      	strb	r3, [r2, #7]
				break;
 8001024:	e000      	b.n	8001028 <Minus+0x114>
			default:
				break;
 8001026:	bf00      	nop
		switch (adjustment_stage) {
 8001028:	e055      	b.n	80010d6 <Minus+0x1c2>
		    }
	}
	else if(calibration_stage == 1 && adjustment_stage == 0) //not in the adjustment mode but in the calibration mode
 800102a:	4b2b      	ldr	r3, [pc, #172]	@ (80010d8 <Minus+0x1c4>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d050      	beq.n	80010d4 <Minus+0x1c0>
 8001032:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <Minus+0x1c8>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d14c      	bne.n	80010d4 <Minus+0x1c0>
	{
		if (sub_second_counter < 5) {
 800103a:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <Minus+0x1d0>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b04      	cmp	r3, #4
 8001040:	d83b      	bhi.n	80010ba <Minus+0x1a6>
		    sub_second_counter = (sub_second_counter + 10 - 5) % 10;
 8001042:	4b28      	ldr	r3, [pc, #160]	@ (80010e4 <Minus+0x1d0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	1d5a      	adds	r2, r3, #5
 8001048:	4b27      	ldr	r3, [pc, #156]	@ (80010e8 <Minus+0x1d4>)
 800104a:	fb83 1302 	smull	r1, r3, r3, r2
 800104e:	1099      	asrs	r1, r3, #2
 8001050:	17d3      	asrs	r3, r2, #31
 8001052:	1ac9      	subs	r1, r1, r3
 8001054:	460b      	mov	r3, r1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	1ad1      	subs	r1, r2, r3
 800105e:	b2ca      	uxtb	r2, r1
 8001060:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <Minus+0x1d0>)
 8001062:	701a      	strb	r2, [r3, #0]
		    // Handle underflow for seconds, minutes and hours
		    if (currentTime.second > 0) {
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <Minus+0x1cc>)
 8001066:	79db      	ldrb	r3, [r3, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <Minus+0x166>
		        currentTime.second--;
 800106c:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <Minus+0x1cc>)
 800106e:	79db      	ldrb	r3, [r3, #7]
 8001070:	3b01      	subs	r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <Minus+0x1cc>)
 8001076:	71da      	strb	r2, [r3, #7]
 8001078:	e025      	b.n	80010c6 <Minus+0x1b2>
		    }
			else
			{
				currentTime.second = 59;
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <Minus+0x1cc>)
 800107c:	223b      	movs	r2, #59	@ 0x3b
 800107e:	71da      	strb	r2, [r3, #7]
				if (currentTime.minute > 0) {
 8001080:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <Minus+0x1cc>)
 8001082:	799b      	ldrb	r3, [r3, #6]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d006      	beq.n	8001096 <Minus+0x182>
					currentTime.minute--;
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <Minus+0x1cc>)
 800108a:	799b      	ldrb	r3, [r3, #6]
 800108c:	3b01      	subs	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <Minus+0x1cc>)
 8001092:	719a      	strb	r2, [r3, #6]
 8001094:	e017      	b.n	80010c6 <Minus+0x1b2>
				} else {
					currentTime.minute = 59;
 8001096:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <Minus+0x1cc>)
 8001098:	223b      	movs	r2, #59	@ 0x3b
 800109a:	719a      	strb	r2, [r3, #6]
					if (currentTime.hour > 0) {
 800109c:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <Minus+0x1cc>)
 800109e:	795b      	ldrb	r3, [r3, #5]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d006      	beq.n	80010b2 <Minus+0x19e>
						currentTime.hour--;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	@ (80010e0 <Minus+0x1cc>)
 80010a6:	795b      	ldrb	r3, [r3, #5]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <Minus+0x1cc>)
 80010ae:	715a      	strb	r2, [r3, #5]
 80010b0:	e009      	b.n	80010c6 <Minus+0x1b2>
					} else {
						currentTime.hour = 23;
 80010b2:	4b0b      	ldr	r3, [pc, #44]	@ (80010e0 <Minus+0x1cc>)
 80010b4:	2217      	movs	r2, #23
 80010b6:	715a      	strb	r2, [r3, #5]
 80010b8:	e005      	b.n	80010c6 <Minus+0x1b2>
					}
				}
			}
		}
		else{
			sub_second_counter -= 5;
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <Minus+0x1d0>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	3b05      	subs	r3, #5
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <Minus+0x1d0>)
 80010c4:	701a      	strb	r2, [r3, #0]
		}
		driftTime += 500; //plus 500 millisecond each press which means the clock is faster than current time so add
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <Minus+0x1d8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80010ce:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <Minus+0x1d8>)
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e000      	b.n	80010d6 <Minus+0x1c2>
	}
	else
	{
		return;
 80010d4:	bf00      	nop
	}
}
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200000ae 	.word	0x200000ae
 80010dc:	200000ad 	.word	0x200000ad
 80010e0:	200000a4 	.word	0x200000a4
 80010e4:	200000ac 	.word	0x200000ac
 80010e8:	66666667 	.word	0x66666667
 80010ec:	200000b0 	.word	0x200000b0

080010f0 <PPM_Init>:

void PPM_Init()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
	if(ppm!=0)
 80010f6:	4b18      	ldr	r3, [pc, #96]	@ (8001158 <PPM_Init+0x68>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d020      	beq.n	8001140 <PPM_Init+0x50>
	{
		ppmThreshold = 100000 / labs(ppm/10);
 80010fe:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <PPM_Init+0x68>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a16      	ldr	r2, [pc, #88]	@ (800115c <PPM_Init+0x6c>)
 8001104:	fb82 1203 	smull	r1, r2, r2, r3
 8001108:	1092      	asrs	r2, r2, #2
 800110a:	17db      	asrs	r3, r3, #31
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	bfb8      	it	lt
 8001112:	425b      	neglt	r3, r3
 8001114:	4a12      	ldr	r2, [pc, #72]	@ (8001160 <PPM_Init+0x70>)
 8001116:	fb92 f3f3 	sdiv	r3, r2, r3
 800111a:	461a      	mov	r2, r3
 800111c:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <PPM_Init+0x74>)
 800111e:	601a      	str	r2, [r3, #0]
		char ppmString[15]; // Buffer to hold the PPM string (including sign)
		// Format the signed PPM value with snprintf
		snprintf(ppmString, sizeof(ppmString), "PPM=%+d", (int)ppm); // %+d includes the sign
 8001120:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <PPM_Init+0x68>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4638      	mov	r0, r7
 8001126:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <PPM_Init+0x78>)
 8001128:	210f      	movs	r1, #15
 800112a:	f006 ff5b 	bl	8007fe4 <sniprintf>
		// Send the formatted string to the LCD
		LCD_Set_Cursor(2,0);
 800112e:	2100      	movs	r1, #0
 8001130:	2002      	movs	r0, #2
 8001132:	f000 f8f9 	bl	8001328 <LCD_Set_Cursor>
		LCD_Send_String(ppmString);
 8001136:	463b      	mov	r3, r7
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f989 	bl	8001450 <LCD_Send_String>
	else
	{
		LCD_Set_Cursor(2,0);
		LCD_Send_String("PPM=/");
	}
}
 800113e:	e006      	b.n	800114e <PPM_Init+0x5e>
		LCD_Set_Cursor(2,0);
 8001140:	2100      	movs	r1, #0
 8001142:	2002      	movs	r0, #2
 8001144:	f000 f8f0 	bl	8001328 <LCD_Set_Cursor>
		LCD_Send_String("PPM=/");
 8001148:	4808      	ldr	r0, [pc, #32]	@ (800116c <PPM_Init+0x7c>)
 800114a:	f000 f981 	bl	8001450 <LCD_Send_String>
}
 800114e:	bf00      	nop
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000004 	.word	0x20000004
 800115c:	66666667 	.word	0x66666667
 8001160:	000186a0 	.word	0x000186a0
 8001164:	200000cc 	.word	0x200000cc
 8001168:	080089e8 	.word	0x080089e8
 800116c:	080089f0 	.word	0x080089f0

08001170 <EEPROM_WriteInt32>:

    // Combine the high and low parts into a 64-bit value
    *value = ((uint64_t)high << 32) | low;
}

void EEPROM_WriteInt32(uint16_t virtAddress, int32_t value) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	80fb      	strh	r3, [r7, #6]
	EE_Status status;
	status = EE_WriteVariable32bits(virtAddress, (uint32_t)value);
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fb37 	bl	80027f6 <EE_WriteVariable32bits>
 8001188:	4603      	mov	r3, r0
 800118a:	81fb      	strh	r3, [r7, #14]
	if(status != EE_OK){
 800118c:	89fb      	ldrh	r3, [r7, #14]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d017      	beq.n	80011c2 <EEPROM_WriteInt32+0x52>
		if(status == EE_CLEANUP_REQUIRED){
 8001192:	89fb      	ldrh	r3, [r7, #14]
 8001194:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001198:	d10c      	bne.n	80011b4 <EEPROM_WriteInt32+0x44>
			if(EE_CleanUp() != EE_OK){
 800119a:	f001 fb63 	bl	8002864 <EE_CleanUp>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00e      	beq.n	80011c2 <EEPROM_WriteInt32+0x52>
			    LCD_Set_Cursor(3,0);
 80011a4:	2100      	movs	r1, #0
 80011a6:	2003      	movs	r0, #3
 80011a8:	f000 f8be 	bl	8001328 <LCD_Set_Cursor>
			    LCD_Send_String("EEPROM CLEANUP ERR");
 80011ac:	4807      	ldr	r0, [pc, #28]	@ (80011cc <EEPROM_WriteInt32+0x5c>)
 80011ae:	f000 f94f 	bl	8001450 <LCD_Send_String>
		else{
			LCD_Set_Cursor(3,0);
			LCD_Send_String("EEPROM WRITE ERR");
		}
	}
}
 80011b2:	e006      	b.n	80011c2 <EEPROM_WriteInt32+0x52>
			LCD_Set_Cursor(3,0);
 80011b4:	2100      	movs	r1, #0
 80011b6:	2003      	movs	r0, #3
 80011b8:	f000 f8b6 	bl	8001328 <LCD_Set_Cursor>
			LCD_Send_String("EEPROM WRITE ERR");
 80011bc:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <EEPROM_WriteInt32+0x60>)
 80011be:	f000 f947 	bl	8001450 <LCD_Send_String>
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	080089f8 	.word	0x080089f8
 80011d0:	08008a0c 	.word	0x08008a0c

080011d4 <EEPROM_ReadInt32>:

void EEPROM_ReadInt32(uint16_t virtAddress, int32_t* value) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	80fb      	strh	r3, [r7, #6]
    EE_Status status;
    uint32_t tempValue;
    status = EE_ReadVariable32bits(virtAddress, &tempValue);
 80011e0:	f107 0208 	add.w	r2, r7, #8
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 fab9 	bl	8002760 <EE_ReadVariable32bits>
 80011ee:	4603      	mov	r3, r0
 80011f0:	81fb      	strh	r3, [r7, #14]
    if (status != EE_OK) {
 80011f2:	89fb      	ldrh	r3, [r7, #14]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00a      	beq.n	800120e <EEPROM_ReadInt32+0x3a>
		LCD_Set_Cursor(3,0);
 80011f8:	2100      	movs	r1, #0
 80011fa:	2003      	movs	r0, #3
 80011fc:	f000 f894 	bl	8001328 <LCD_Set_Cursor>
		LCD_Send_String("EEPROM READ ERR");
 8001200:	4806      	ldr	r0, [pc, #24]	@ (800121c <EEPROM_ReadInt32+0x48>)
 8001202:	f000 f925 	bl	8001450 <LCD_Send_String>
    	*value = 0;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e003      	b.n	8001216 <EEPROM_ReadInt32+0x42>
        return;
    }
    *value = (int32_t)tempValue;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	461a      	mov	r2, r3
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	601a      	str	r2, [r3, #0]
}
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	08008a20 	.word	0x08008a20

08001220 <EEPROM_WriteUInt8>:

void EEPROM_WriteUInt8(uint16_t virtAddress, uint8_t value) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	460a      	mov	r2, r1
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	4613      	mov	r3, r2
 800122e:	717b      	strb	r3, [r7, #5]
	EE_Status status;
	status = EE_WriteVariable8bits(virtAddress, value);
 8001230:	797a      	ldrb	r2, [r7, #5]
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	4611      	mov	r1, r2
 8001236:	4618      	mov	r0, r3
 8001238:	f001 faf7 	bl	800282a <EE_WriteVariable8bits>
 800123c:	4603      	mov	r3, r0
 800123e:	81fb      	strh	r3, [r7, #14]
	if(status != EE_OK){
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d017      	beq.n	8001276 <EEPROM_WriteUInt8+0x56>
		if(status == EE_CLEANUP_REQUIRED){
 8001246:	89fb      	ldrh	r3, [r7, #14]
 8001248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800124c:	d10c      	bne.n	8001268 <EEPROM_WriteUInt8+0x48>
			if(EE_CleanUp() != EE_OK){
 800124e:	f001 fb09 	bl	8002864 <EE_CleanUp>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00e      	beq.n	8001276 <EEPROM_WriteUInt8+0x56>
			    LCD_Set_Cursor(3,0);
 8001258:	2100      	movs	r1, #0
 800125a:	2003      	movs	r0, #3
 800125c:	f000 f864 	bl	8001328 <LCD_Set_Cursor>
			    LCD_Send_String("EEPROM CLEANUP ERR");
 8001260:	4807      	ldr	r0, [pc, #28]	@ (8001280 <EEPROM_WriteUInt8+0x60>)
 8001262:	f000 f8f5 	bl	8001450 <LCD_Send_String>
		else{
			LCD_Set_Cursor(3,0);
			LCD_Send_String("EEPROM WRITE ERR");
		}
	}
}
 8001266:	e006      	b.n	8001276 <EEPROM_WriteUInt8+0x56>
			LCD_Set_Cursor(3,0);
 8001268:	2100      	movs	r1, #0
 800126a:	2003      	movs	r0, #3
 800126c:	f000 f85c 	bl	8001328 <LCD_Set_Cursor>
			LCD_Send_String("EEPROM WRITE ERR");
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <EEPROM_WriteUInt8+0x64>)
 8001272:	f000 f8ed 	bl	8001450 <LCD_Send_String>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	080089f8 	.word	0x080089f8
 8001284:	08008a0c 	.word	0x08008a0c

08001288 <EEPROM_Init>:

void EEPROM_Init() {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
    // Unlock the Flash memory to allow write operations
    HAL_FLASH_Unlock();
 800128e:	f003 fbf9 	bl	8004a84 <HAL_FLASH_Unlock>
    uint8_t testval;
//     First, try to read the existing values to see if they match what we expect
    EE_Init(EE_CONDITIONAL_ERASE);
 8001292:	2001      	movs	r0, #1
 8001294:	f000 fa32 	bl	80016fc <EE_Init>
    EE_Status status = EE_ReadVariable8bits(VIRT_ADDRESS_TESTVAL, &testval);
 8001298:	1cfb      	adds	r3, r7, #3
 800129a:	4619      	mov	r1, r3
 800129c:	2001      	movs	r0, #1
 800129e:	f001 fa84 	bl	80027aa <EE_ReadVariable8bits>
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
	if(status != EE_OK){
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00a      	beq.n	80012c2 <EEPROM_Init+0x3a>
		HAL_GPIO_TogglePin(Red_LED_GPIO_Port, Red_LED_Pin); //indicate error in eeprom initialisation
 80012ac:	2102      	movs	r1, #2
 80012ae:	481a      	ldr	r0, [pc, #104]	@ (8001318 <EEPROM_Init+0x90>)
 80012b0:	f003 ff64 	bl	800517c <HAL_GPIO_TogglePin>
	    LCD_Set_Cursor(3,0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2003      	movs	r0, #3
 80012b8:	f000 f836 	bl	8001328 <LCD_Set_Cursor>
	    LCD_Send_String("EEPROM READ ERR");
 80012bc:	4817      	ldr	r0, [pc, #92]	@ (800131c <EEPROM_Init+0x94>)
 80012be:	f000 f8c7 	bl	8001450 <LCD_Send_String>
	}
    if (status == EE_OK && testval == TESTVAL) {
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d108      	bne.n	80012da <EEPROM_Init+0x52>
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	227c      	movs	r2, #124	@ 0x7c
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d104      	bne.n	80012da <EEPROM_Init+0x52>
        // If values are correct, skip the erase
    	EEPROM_ReadInt32(VIRT_ADDRESS_PPM, &ppm);
 80012d0:	4913      	ldr	r1, [pc, #76]	@ (8001320 <EEPROM_Init+0x98>)
 80012d2:	2002      	movs	r0, #2
 80012d4:	f7ff ff7e 	bl	80011d4 <EEPROM_ReadInt32>
        return; // EEPROM is already initialized correctly, no need for re-initialization or erasure
 80012d8:	e01a      	b.n	8001310 <EEPROM_Init+0x88>
    }
    // If values are incorrect, initialize the EEPROM with forced erase
    EE_Status statusInit = EE_Init(EE_FORCED_ERASE);
 80012da:	2000      	movs	r0, #0
 80012dc:	f000 fa0e 	bl	80016fc <EE_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	80bb      	strh	r3, [r7, #4]
    if (statusInit != EE_OK) {
 80012e4:	88bb      	ldrh	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d007      	beq.n	80012fa <EEPROM_Init+0x72>
	  LCD_Set_Cursor(3,0);
 80012ea:	2100      	movs	r1, #0
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 f81b 	bl	8001328 <LCD_Set_Cursor>
	  LCD_Send_String("EEPROM INIT ERROR");
 80012f2:	480c      	ldr	r0, [pc, #48]	@ (8001324 <EEPROM_Init+0x9c>)
 80012f4:	f000 f8ac 	bl	8001450 <LCD_Send_String>
	  return;
 80012f8:	e00a      	b.n	8001310 <EEPROM_Init+0x88>
    }
    EEPROM_WriteInt32(VIRT_ADDRESS_PPM, ppm);
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <EEPROM_Init+0x98>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff ff35 	bl	8001170 <EEPROM_WriteInt32>
    EEPROM_WriteUInt8(VIRT_ADDRESS_TESTVAL, TESTVAL);
 8001306:	237c      	movs	r3, #124	@ 0x7c
 8001308:	4619      	mov	r1, r3
 800130a:	2001      	movs	r0, #1
 800130c:	f7ff ff88 	bl	8001220 <EEPROM_WriteUInt8>
}
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	48000400 	.word	0x48000400
 800131c:	08008a20 	.word	0x08008a20
 8001320:	20000004 	.word	0x20000004
 8001324:	08008a30 	.word	0x08008a30

08001328 <LCD_Set_Cursor>:

#define LCD_I2C_ADDRESS 0x4E  // I2C address for the LCD


// Set cursor to specific row and column
void LCD_Set_Cursor(uint8_t row, uint8_t col) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	4613      	mov	r3, r2
 8001336:	71bb      	strb	r3, [r7, #6]
    switch (row)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	2b03      	cmp	r3, #3
 800133c:	d823      	bhi.n	8001386 <LCD_Set_Cursor+0x5e>
 800133e:	a201      	add	r2, pc, #4	@ (adr r2, 8001344 <LCD_Set_Cursor+0x1c>)
 8001340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001344:	08001355 	.word	0x08001355
 8001348:	0800135f 	.word	0x0800135f
 800134c:	08001369 	.word	0x08001369
 8001350:	08001373 	.word	0x08001373
        {
    	   case 0:
               col |= 0x80;  // First row, starting address 0x80
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800135a:	71bb      	strb	r3, [r7, #6]
               break;
 800135c:	e00e      	b.n	800137c <LCD_Set_Cursor+0x54>
           case 1:
               col |= 0xC0;  // Second row, starting address 0xC0
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001364:	71bb      	strb	r3, [r7, #6]
               break;
 8001366:	e009      	b.n	800137c <LCD_Set_Cursor+0x54>
           case 2:
               col |= 0x94;  // Third row, starting address 0x94
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	f063 036b 	orn	r3, r3, #107	@ 0x6b
 800136e:	71bb      	strb	r3, [r7, #6]
               break;
 8001370:	e004      	b.n	800137c <LCD_Set_Cursor+0x54>
           case 3:
               col |= 0xD4;  // Fourth row, starting address 0xD4
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	f063 032b 	orn	r3, r3, #43	@ 0x2b
 8001378:	71bb      	strb	r3, [r7, #6]
               break;
 800137a:	bf00      	nop
           default:
               return;  // Invalid row, do nothing
        }
    LCD_Send_Command(col);
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 f806 	bl	8001390 <LCD_Send_Command>
 8001384:	e000      	b.n	8001388 <LCD_Set_Cursor+0x60>
               return;  // Invalid row, do nothing
 8001386:	bf00      	nop
}
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop

08001390 <LCD_Send_Command>:

// Send a command to the LCD
void LCD_Send_Command(uint8_t cmd) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af02      	add	r7, sp, #8
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = (cmd & 0xF0);
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f023 030f 	bic.w	r3, r3, #15
 80013a0:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = ((cmd << 4) & 0xF0);
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	73bb      	strb	r3, [r7, #14]

    uint8_t data[4] = {
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	f043 030c 	orr.w	r3, r3, #12
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	723b      	strb	r3, [r7, #8]
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	727b      	strb	r3, [r7, #9]
 80013bc:	7bbb      	ldrb	r3, [r7, #14]
 80013be:	f043 030c 	orr.w	r3, r3, #12
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	72bb      	strb	r3, [r7, #10]
 80013c6:	7bbb      	ldrb	r3, [r7, #14]
 80013c8:	f043 0308 	orr.w	r3, r3, #8
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	72fb      	strb	r3, [r7, #11]
        upper_nibble | 0x0C,   // Enable high
        upper_nibble | 0x08,   // Enable low
        lower_nibble | 0x0C,   // Enable high
        lower_nibble | 0x08    // Enable low
    };
    HAL_I2C_Master_Transmit(&hi2c3, LCD_I2C_ADDRESS, data, sizeof(data), HAL_MAX_DELAY);
 80013d0:	f107 0208 	add.w	r2, r7, #8
 80013d4:	f04f 33ff 	mov.w	r3, #4294967295
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2304      	movs	r3, #4
 80013dc:	214e      	movs	r1, #78	@ 0x4e
 80013de:	4803      	ldr	r0, [pc, #12]	@ (80013ec <LCD_Send_Command+0x5c>)
 80013e0:	f003 ff9a 	bl	8005318 <HAL_I2C_Master_Transmit>
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000110 	.word	0x20000110

080013f0 <LCD_Send_Data>:

// Send data (character) to the LCD
void LCD_Send_Data(uint8_t data) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af02      	add	r7, sp, #8
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = (data & 0xF0);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f023 030f 	bic.w	r3, r3, #15
 8001400:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = ((data << 4) & 0xF0);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	73bb      	strb	r3, [r7, #14]

    uint8_t data_array[4] = {
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	f043 030d 	orr.w	r3, r3, #13
 800140e:	b2db      	uxtb	r3, r3
 8001410:	723b      	strb	r3, [r7, #8]
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	f043 0309 	orr.w	r3, r3, #9
 8001418:	b2db      	uxtb	r3, r3
 800141a:	727b      	strb	r3, [r7, #9]
 800141c:	7bbb      	ldrb	r3, [r7, #14]
 800141e:	f043 030d 	orr.w	r3, r3, #13
 8001422:	b2db      	uxtb	r3, r3
 8001424:	72bb      	strb	r3, [r7, #10]
 8001426:	7bbb      	ldrb	r3, [r7, #14]
 8001428:	f043 0309 	orr.w	r3, r3, #9
 800142c:	b2db      	uxtb	r3, r3
 800142e:	72fb      	strb	r3, [r7, #11]
        upper_nibble | 0x0D,   // Enable high, RS = 1
        upper_nibble | 0x09,   // Enable low, RS = 1
        lower_nibble | 0x0D,   // Enable high, RS = 1
        lower_nibble | 0x09    // Enable low, RS = 1
    };
    HAL_I2C_Master_Transmit(&hi2c3, LCD_I2C_ADDRESS, data_array, sizeof(data_array), HAL_MAX_DELAY);
 8001430:	f107 0208 	add.w	r2, r7, #8
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2304      	movs	r3, #4
 800143c:	214e      	movs	r1, #78	@ 0x4e
 800143e:	4803      	ldr	r0, [pc, #12]	@ (800144c <LCD_Send_Data+0x5c>)
 8001440:	f003 ff6a 	bl	8005318 <HAL_I2C_Master_Transmit>
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000110 	.word	0x20000110

08001450 <LCD_Send_String>:

// Send a string to the LCD
void LCD_Send_String(const char *str) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001458:	e007      	b.n	800146a <LCD_Send_String+0x1a>
        LCD_Send_Data((uint8_t)(*str));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ffc6 	bl	80013f0 <LCD_Send_Data>
        str++;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3301      	adds	r3, #1
 8001468:	607b      	str	r3, [r7, #4]
    while (*str) {
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f3      	bne.n	800145a <LCD_Send_String+0xa>
    }
}
 8001472:	bf00      	nop
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <Update_Time_OnScreen>:

void Update_Time_OnScreen()
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b094      	sub	sp, #80	@ 0x50
 8001480:	af02      	add	r7, sp, #8
	char dateString[20];
	char timeString[30];
	char weekString[10];
	const char *week = weekday_string(currentTime.week);
 8001482:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <Update_Time_OnScreen+0x98>)
 8001484:	791b      	ldrb	r3, [r3, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f8ec 	bl	8000664 <weekday_string>
 800148c:	6478      	str	r0, [r7, #68]	@ 0x44
	LCD_Set_Cursor(0,0);
 800148e:	2100      	movs	r1, #0
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff ff49 	bl	8001328 <LCD_Set_Cursor>
	snprintf(dateString, sizeof(dateString), "   20%02u/%02u/%02u",
			currentTime.year, currentTime.month, currentTime.day);
 8001496:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <Update_Time_OnScreen+0x98>)
 8001498:	881b      	ldrh	r3, [r3, #0]
	snprintf(dateString, sizeof(dateString), "   20%02u/%02u/%02u",
 800149a:	4619      	mov	r1, r3
			currentTime.year, currentTime.month, currentTime.day);
 800149c:	4b1d      	ldr	r3, [pc, #116]	@ (8001514 <Update_Time_OnScreen+0x98>)
 800149e:	789b      	ldrb	r3, [r3, #2]
	snprintf(dateString, sizeof(dateString), "   20%02u/%02u/%02u",
 80014a0:	461a      	mov	r2, r3
			currentTime.year, currentTime.month, currentTime.day);
 80014a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <Update_Time_OnScreen+0x98>)
 80014a4:	78db      	ldrb	r3, [r3, #3]
	snprintf(dateString, sizeof(dateString), "   20%02u/%02u/%02u",
 80014a6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	9200      	str	r2, [sp, #0]
 80014ae:	460b      	mov	r3, r1
 80014b0:	4a19      	ldr	r2, [pc, #100]	@ (8001518 <Update_Time_OnScreen+0x9c>)
 80014b2:	2114      	movs	r1, #20
 80014b4:	f006 fd96 	bl	8007fe4 <sniprintf>
	LCD_Send_String(dateString);
 80014b8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ffc7 	bl	8001450 <LCD_Send_String>
	snprintf(weekString, sizeof(weekString), " %s   ", week);
 80014c2:	1d38      	adds	r0, r7, #4
 80014c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014c6:	4a15      	ldr	r2, [pc, #84]	@ (800151c <Update_Time_OnScreen+0xa0>)
 80014c8:	210a      	movs	r1, #10
 80014ca:	f006 fd8b 	bl	8007fe4 <sniprintf>
	LCD_Send_String(weekString);
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ffbd 	bl	8001450 <LCD_Send_String>
	LCD_Set_Cursor(1,0);
 80014d6:	2100      	movs	r1, #0
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff ff25 	bl	8001328 <LCD_Set_Cursor>
	snprintf(timeString, sizeof(timeString), "      %02u:%02u:%02u      ",
			currentTime.hour, currentTime.minute, currentTime.second);
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <Update_Time_OnScreen+0x98>)
 80014e0:	795b      	ldrb	r3, [r3, #5]
	snprintf(timeString, sizeof(timeString), "      %02u:%02u:%02u      ",
 80014e2:	4619      	mov	r1, r3
			currentTime.hour, currentTime.minute, currentTime.second);
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <Update_Time_OnScreen+0x98>)
 80014e6:	799b      	ldrb	r3, [r3, #6]
	snprintf(timeString, sizeof(timeString), "      %02u:%02u:%02u      ",
 80014e8:	461a      	mov	r2, r3
			currentTime.hour, currentTime.minute, currentTime.second);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <Update_Time_OnScreen+0x98>)
 80014ec:	79db      	ldrb	r3, [r3, #7]
	snprintf(timeString, sizeof(timeString), "      %02u:%02u:%02u      ",
 80014ee:	f107 0010 	add.w	r0, r7, #16
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	9200      	str	r2, [sp, #0]
 80014f6:	460b      	mov	r3, r1
 80014f8:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <Update_Time_OnScreen+0xa4>)
 80014fa:	211e      	movs	r1, #30
 80014fc:	f006 fd72 	bl	8007fe4 <sniprintf>
	LCD_Send_String(timeString);
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ffa3 	bl	8001450 <LCD_Send_String>
}
 800150a:	bf00      	nop
 800150c:	3748      	adds	r7, #72	@ 0x48
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000a4 	.word	0x200000a4
 8001518:	08008a44 	.word	0x08008a44
 800151c:	08008a58 	.word	0x08008a58
 8001520:	08008a60 	.word	0x08008a60

08001524 <LCD_Init>:

void LCD_Init(void) {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
    // Initialization sequence for the LCD
    HAL_Delay(50);                // Wait for LCD to power up
 8001528:	2032      	movs	r0, #50	@ 0x32
 800152a:	f003 f817 	bl	800455c <HAL_Delay>
    LCD_Send_Command(0x30);       // Wake up
 800152e:	2030      	movs	r0, #48	@ 0x30
 8001530:	f7ff ff2e 	bl	8001390 <LCD_Send_Command>
    HAL_Delay(5);
 8001534:	2005      	movs	r0, #5
 8001536:	f003 f811 	bl	800455c <HAL_Delay>
    LCD_Send_Command(0x30);       // Wake up
 800153a:	2030      	movs	r0, #48	@ 0x30
 800153c:	f7ff ff28 	bl	8001390 <LCD_Send_Command>
    HAL_Delay(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f003 f80b 	bl	800455c <HAL_Delay>
    LCD_Send_Command(0x30);       // Wake up
 8001546:	2030      	movs	r0, #48	@ 0x30
 8001548:	f7ff ff22 	bl	8001390 <LCD_Send_Command>
    LCD_Send_Command(0x20);       // 4-bit mode
 800154c:	2020      	movs	r0, #32
 800154e:	f7ff ff1f 	bl	8001390 <LCD_Send_Command>

    // Configure display
    LCD_Send_Command(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001552:	2028      	movs	r0, #40	@ 0x28
 8001554:	f7ff ff1c 	bl	8001390 <LCD_Send_Command>
    HAL_Delay(1);
 8001558:	2001      	movs	r0, #1
 800155a:	f002 ffff 	bl	800455c <HAL_Delay>
    LCD_Send_Command(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800155e:	2008      	movs	r0, #8
 8001560:	f7ff ff16 	bl	8001390 <LCD_Send_Command>
    HAL_Delay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f002 fff9 	bl	800455c <HAL_Delay>
    LCD_Send_Command(0x01);  // clear display
 800156a:	2001      	movs	r0, #1
 800156c:	f7ff ff10 	bl	8001390 <LCD_Send_Command>
    HAL_Delay(2);
 8001570:	2002      	movs	r0, #2
 8001572:	f002 fff3 	bl	800455c <HAL_Delay>
    LCD_Send_Command(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001576:	2006      	movs	r0, #6
 8001578:	f7ff ff0a 	bl	8001390 <LCD_Send_Command>
    HAL_Delay(1);
 800157c:	2001      	movs	r0, #1
 800157e:	f002 ffed 	bl	800455c <HAL_Delay>
    LCD_Send_Command(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001582:	200c      	movs	r0, #12
 8001584:	f7ff ff04 	bl	8001390 <LCD_Send_Command>
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001590:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <MX_CRC_Init+0x3c>)
 8001592:	4a0e      	ldr	r2, [pc, #56]	@ (80015cc <MX_CRC_Init+0x40>)
 8001594:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001596:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_CRC_Init+0x3c>)
 8001598:	2200      	movs	r2, #0
 800159a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800159c:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <MX_CRC_Init+0x3c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_CRC_Init+0x3c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80015a8:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <MX_CRC_Init+0x3c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_CRC_Init+0x3c>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <MX_CRC_Init+0x3c>)
 80015b6:	f003 f907 	bl	80047c8 <HAL_CRC_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80015c0:	f002 fc6c 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200000d0 	.word	0x200000d0
 80015cc:	40023000 	.word	0x40023000

080015d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <HAL_CRC_MspInit+0x38>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d10b      	bne.n	80015fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015e2:	4b0a      	ldr	r3, [pc, #40]	@ (800160c <HAL_CRC_MspInit+0x3c>)
 80015e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015e6:	4a09      	ldr	r2, [pc, #36]	@ (800160c <HAL_CRC_MspInit+0x3c>)
 80015e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80015ee:	4b07      	ldr	r3, [pc, #28]	@ (800160c <HAL_CRC_MspInit+0x3c>)
 80015f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023000 	.word	0x40023000
 800160c:	40021000 	.word	0x40021000

08001610 <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	609a      	str	r2, [r3, #8]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 0218 	bic.w	r2, r3, #24
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	609a      	str	r2, [r3, #8]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	615a      	str	r2, [r3, #20]
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	601a      	str	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	460b      	mov	r3, r1
 8001698:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	887a      	ldrh	r2, [r7, #2]
 80016a2:	801a      	strh	r2, [r3, #0]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(const CRC_TypeDef *CRCx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80016d8:	4907      	ldr	r1, [pc, #28]	@ (80016f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4313      	orrs	r3, r2
 80016de:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016e0:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80016e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4013      	ands	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000

080016fc <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b090      	sub	sp, #64	@ 0x40
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8001706:	2305      	movs	r3, #5
 8001708:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 800170a:	2300      	movs	r3, #0
 800170c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800170e:	2300      	movs	r3, #0
 8001710:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	@ 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8001716:	2300      	movs	r3, #0
 8001718:	633b      	str	r3, [r7, #48]	@ 0x30
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800171e:	2300      	movs	r3, #0
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	76fb      	strb	r3, [r7, #27]

  EE_Status status = EE_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8001742:	f002 f98b 	bl	8003a5c <FI_CheckBankConfig>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 800174c:	230e      	movs	r3, #14
 800174e:	f000 bf23 	b.w	8002598 <EE_Init+0xe9c>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8001752:	f002 f8f9 	bl	8003948 <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8001756:	4ba3      	ldr	r3, [pc, #652]	@ (80019e4 <EE_Init+0x2e8>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800175c:	4ba2      	ldr	r3, [pc, #648]	@ (80019e8 <EE_Init+0x2ec>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	b29b      	uxth	r3, r3
 8001762:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001766:	4293      	cmp	r3, r2
 8001768:	d005      	beq.n	8001776 <EE_Init+0x7a>
 800176a:	4b9f      	ldr	r3, [pc, #636]	@ (80019e8 <EE_Init+0x2ec>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	029a      	lsls	r2, r3, #10
 8001770:	4b9e      	ldr	r3, [pc, #632]	@ (80019ec <EE_Init+0x2f0>)
 8001772:	4013      	ands	r3, r2
 8001774:	e001      	b.n	800177a <EE_Init+0x7e>
 8001776:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800177a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800177e:	fbb2 f1f3 	udiv	r1, r2, r3
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	0adb      	lsrs	r3, r3, #11
 800178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800178c:	e042      	b.n	8001814 <EE_Init+0x118>
  {
    pageaddress = PAGE_ADDRESS(page);
 800178e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001790:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001794:	02da      	lsls	r2, r3, #11
 8001796:	4b94      	ldr	r3, [pc, #592]	@ (80019e8 <EE_Init+0x2ec>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b29b      	uxth	r3, r3
 800179c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80017a0:	428b      	cmp	r3, r1
 80017a2:	d005      	beq.n	80017b0 <EE_Init+0xb4>
 80017a4:	4b90      	ldr	r3, [pc, #576]	@ (80019e8 <EE_Init+0x2ec>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	0299      	lsls	r1, r3, #10
 80017aa:	4b90      	ldr	r3, [pc, #576]	@ (80019ec <EE_Init+0x2f0>)
 80017ac:	400b      	ands	r3, r1
 80017ae:	e001      	b.n	80017b4 <EE_Init+0xb8>
 80017b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80017b4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80017b8:	fbb1 f1f3 	udiv	r1, r1, r3
 80017bc:	4b8a      	ldr	r3, [pc, #552]	@ (80019e8 <EE_Init+0x2ec>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80017c6:	4283      	cmp	r3, r0
 80017c8:	d005      	beq.n	80017d6 <EE_Init+0xda>
 80017ca:	4b87      	ldr	r3, [pc, #540]	@ (80019e8 <EE_Init+0x2ec>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	0298      	lsls	r0, r3, #10
 80017d0:	4b86      	ldr	r3, [pc, #536]	@ (80019ec <EE_Init+0x2f0>)
 80017d2:	4003      	ands	r3, r0
 80017d4:	e001      	b.n	80017da <EE_Init+0xde>
 80017d6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017e6:	e00e      	b.n	8001806 <EE_Init+0x10a>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 80017e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017ec:	4413      	add	r3, r2
 80017ee:	4a80      	ldr	r2, [pc, #512]	@ (80019f0 <EE_Init+0x2f4>)
 80017f0:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 80017f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80017f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017f6:	4413      	add	r3, r2
 80017f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8001800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001802:	3308      	adds	r3, #8
 8001804:	637b      	str	r3, [r7, #52]	@ 0x34
 8001806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800180c:	d3ec      	bcc.n	80017e8 <EE_Init+0xec>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800180e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001810:	3301      	adds	r3, #1
 8001812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001814:	4b74      	ldr	r3, [pc, #464]	@ (80019e8 <EE_Init+0x2ec>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800181e:	4293      	cmp	r3, r2
 8001820:	d005      	beq.n	800182e <EE_Init+0x132>
 8001822:	4b71      	ldr	r3, [pc, #452]	@ (80019e8 <EE_Init+0x2ec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	029a      	lsls	r2, r3, #10
 8001828:	4b70      	ldr	r3, [pc, #448]	@ (80019ec <EE_Init+0x2f0>)
 800182a:	4013      	ands	r3, r2
 800182c:	e001      	b.n	8001832 <EE_Init+0x136>
 800182e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001832:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001836:	fbb2 f1f3 	udiv	r1, r2, r3
 800183a:	fb01 f303 	mul.w	r3, r1, r3
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	0adb      	lsrs	r3, r3, #11
 8001842:	3302      	adds	r3, #2
 8001844:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001846:	429a      	cmp	r2, r3
 8001848:	d3a1      	bcc.n	800178e <EE_Init+0x92>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 800184a:	4b66      	ldr	r3, [pc, #408]	@ (80019e4 <EE_Init+0x2e8>)
 800184c:	2200      	movs	r2, #0
 800184e:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8001850:	4b65      	ldr	r3, [pc, #404]	@ (80019e8 <EE_Init+0x2ec>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800185a:	4293      	cmp	r3, r2
 800185c:	d005      	beq.n	800186a <EE_Init+0x16e>
 800185e:	4b62      	ldr	r3, [pc, #392]	@ (80019e8 <EE_Init+0x2ec>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	029a      	lsls	r2, r3, #10
 8001864:	4b61      	ldr	r3, [pc, #388]	@ (80019ec <EE_Init+0x2f0>)
 8001866:	4013      	ands	r3, r2
 8001868:	e001      	b.n	800186e <EE_Init+0x172>
 800186a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800186e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001872:	fbb2 f1f3 	udiv	r1, r2, r3
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	0adb      	lsrs	r3, r3, #11
 800187e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001880:	e048      	b.n	8001914 <EE_Init+0x218>
  {
    pageaddress = PAGE_ADDRESS(page);
 8001882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001884:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001888:	02da      	lsls	r2, r3, #11
 800188a:	4b57      	ldr	r3, [pc, #348]	@ (80019e8 <EE_Init+0x2ec>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	b29b      	uxth	r3, r3
 8001890:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001894:	428b      	cmp	r3, r1
 8001896:	d005      	beq.n	80018a4 <EE_Init+0x1a8>
 8001898:	4b53      	ldr	r3, [pc, #332]	@ (80019e8 <EE_Init+0x2ec>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0299      	lsls	r1, r3, #10
 800189e:	4b53      	ldr	r3, [pc, #332]	@ (80019ec <EE_Init+0x2f0>)
 80018a0:	400b      	ands	r3, r1
 80018a2:	e001      	b.n	80018a8 <EE_Init+0x1ac>
 80018a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018a8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80018ac:	fbb1 f1f3 	udiv	r1, r1, r3
 80018b0:	4b4d      	ldr	r3, [pc, #308]	@ (80019e8 <EE_Init+0x2ec>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80018ba:	4283      	cmp	r3, r0
 80018bc:	d005      	beq.n	80018ca <EE_Init+0x1ce>
 80018be:	4b4a      	ldr	r3, [pc, #296]	@ (80019e8 <EE_Init+0x2ec>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0298      	lsls	r0, r3, #10
 80018c4:	4b49      	ldr	r3, [pc, #292]	@ (80019ec <EE_Init+0x2f0>)
 80018c6:	4003      	ands	r3, r0
 80018c8:	e001      	b.n	80018ce <EE_Init+0x1d2>
 80018ca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 80018d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80018d8:	f001 ffd4 	bl	8003884 <GetPageState>
 80018dc:	4603      	mov	r3, r0
 80018de:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 80018e0:	7ebb      	ldrb	r3, [r7, #26]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d002      	beq.n	80018ec <EE_Init+0x1f0>
 80018e6:	7ebb      	ldrb	r3, [r7, #26]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d103      	bne.n	80018f4 <EE_Init+0x1f8>
    {
      nbactivereceivepage++;
 80018ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ee:	3301      	adds	r3, #1
 80018f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018f2:	e00c      	b.n	800190e <EE_Init+0x212>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 80018f4:	7ebb      	ldrb	r3, [r7, #26]
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d109      	bne.n	800190e <EE_Init+0x212>
    {
      if (nbvalidpage == 0U)
 80018fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <EE_Init+0x208>
      {
        firstvalidpage = page;
 8001900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001902:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8001904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
      nbvalidpage++;
 8001908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800190a:	3301      	adds	r3, #1
 800190c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800190e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001910:	3301      	adds	r3, #1
 8001912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001914:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <EE_Init+0x2ec>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b29b      	uxth	r3, r3
 800191a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800191e:	4293      	cmp	r3, r2
 8001920:	d005      	beq.n	800192e <EE_Init+0x232>
 8001922:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <EE_Init+0x2ec>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	029a      	lsls	r2, r3, #10
 8001928:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <EE_Init+0x2f0>)
 800192a:	4013      	ands	r3, r2
 800192c:	e001      	b.n	8001932 <EE_Init+0x236>
 800192e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001932:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001936:	fbb2 f1f3 	udiv	r1, r2, r3
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	0adb      	lsrs	r3, r3, #11
 8001942:	3302      	adds	r3, #2
 8001944:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001946:	429a      	cmp	r2, r3
 8001948:	d39b      	bcc.n	8001882 <EE_Init+0x186>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 800194a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194c:	2b00      	cmp	r3, #0
 800194e:	f040 80b3 	bne.w	8001ab8 <EE_Init+0x3bc>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8001952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a9 	beq.w	8001aac <EE_Init+0x3b0>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 800195a:	4b23      	ldr	r3, [pc, #140]	@ (80019e8 <EE_Init+0x2ec>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b29b      	uxth	r3, r3
 8001960:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001964:	4293      	cmp	r3, r2
 8001966:	d005      	beq.n	8001974 <EE_Init+0x278>
 8001968:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <EE_Init+0x2ec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	029a      	lsls	r2, r3, #10
 800196e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <EE_Init+0x2f0>)
 8001970:	4013      	ands	r3, r2
 8001972:	e001      	b.n	8001978 <EE_Init+0x27c>
 8001974:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001978:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800197c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001980:	fb01 f303 	mul.w	r3, r1, r3
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	0adb      	lsrs	r3, r3, #11
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	3301      	adds	r3, #1
 800198e:	f003 0101 	and.w	r1, r3, #1
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <EE_Init+0x2ec>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800199c:	4293      	cmp	r3, r2
 800199e:	d005      	beq.n	80019ac <EE_Init+0x2b0>
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <EE_Init+0x2ec>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	029a      	lsls	r2, r3, #10
 80019a6:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <EE_Init+0x2f0>)
 80019a8:	4013      	ands	r3, r2
 80019aa:	e001      	b.n	80019b0 <EE_Init+0x2b4>
 80019ac:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80019b0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019b4:	fbb2 f0f3 	udiv	r0, r2, r3
 80019b8:	fb00 f303 	mul.w	r3, r0, r3
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	0adb      	lsrs	r3, r3, #11
 80019c0:	440b      	add	r3, r1
 80019c2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80019c6:	02da      	lsls	r2, r3, #11
 80019c8:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <EE_Init+0x2ec>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80019d2:	428b      	cmp	r3, r1
 80019d4:	d00e      	beq.n	80019f4 <EE_Init+0x2f8>
 80019d6:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <EE_Init+0x2ec>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	0299      	lsls	r1, r3, #10
 80019dc:	4b03      	ldr	r3, [pc, #12]	@ (80019ec <EE_Init+0x2f0>)
 80019de:	400b      	ands	r3, r1
 80019e0:	e00a      	b.n	80019f8 <EE_Init+0x2fc>
 80019e2:	bf00      	nop
 80019e4:	200000fc 	.word	0x200000fc
 80019e8:	1fff75e0 	.word	0x1fff75e0
 80019ec:	03fffc00 	.word	0x03fffc00
 80019f0:	200000f8 	.word	0x200000f8
 80019f4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80019f8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80019fc:	fbb1 f1f3 	udiv	r1, r1, r3
 8001a00:	4ba9      	ldr	r3, [pc, #676]	@ (8001ca8 <EE_Init+0x5ac>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	b29b      	uxth	r3, r3
 8001a06:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a0a:	4283      	cmp	r3, r0
 8001a0c:	d005      	beq.n	8001a1a <EE_Init+0x31e>
 8001a0e:	4ba6      	ldr	r3, [pc, #664]	@ (8001ca8 <EE_Init+0x5ac>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0298      	lsls	r0, r3, #10
 8001a14:	4ba5      	ldr	r3, [pc, #660]	@ (8001cac <EE_Init+0x5b0>)
 8001a16:	4003      	ands	r3, r0
 8001a18:	e001      	b.n	8001a1e <EE_Init+0x322>
 8001a1a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f001 ff2d 	bl	8003884 <GetPageState>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b04      	cmp	r3, #4
 8001a2e:	d143      	bne.n	8001ab8 <EE_Init+0x3bc>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8001a30:	4b9d      	ldr	r3, [pc, #628]	@ (8001ca8 <EE_Init+0x5ac>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d005      	beq.n	8001a4a <EE_Init+0x34e>
 8001a3e:	4b9a      	ldr	r3, [pc, #616]	@ (8001ca8 <EE_Init+0x5ac>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	029a      	lsls	r2, r3, #10
 8001a44:	4b99      	ldr	r3, [pc, #612]	@ (8001cac <EE_Init+0x5b0>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	e001      	b.n	8001a4e <EE_Init+0x352>
 8001a4a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a52:	fbb2 f1f3 	udiv	r1, r2, r3
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	0adb      	lsrs	r3, r3, #11
 8001a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	3301      	adds	r3, #1
 8001a64:	f003 0101 	and.w	r1, r3, #1
 8001a68:	4b8f      	ldr	r3, [pc, #572]	@ (8001ca8 <EE_Init+0x5ac>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d005      	beq.n	8001a82 <EE_Init+0x386>
 8001a76:	4b8c      	ldr	r3, [pc, #560]	@ (8001ca8 <EE_Init+0x5ac>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	029a      	lsls	r2, r3, #10
 8001a7c:	4b8b      	ldr	r3, [pc, #556]	@ (8001cac <EE_Init+0x5b0>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	e001      	b.n	8001a86 <EE_Init+0x38a>
 8001a82:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a8a:	fbb2 f0f3 	udiv	r0, r2, r3
 8001a8e:	fb00 f303 	mul.w	r3, r0, r3
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	0adb      	lsrs	r3, r3, #11
 8001a96:	440b      	add	r3, r1
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 fde0 	bl	8003660 <SetPageState>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d008      	beq.n	8001ab8 <EE_Init+0x3bc>
        {
          return EE_WRITE_ERROR;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f000 bd76 	b.w	8002598 <EE_Init+0xe9c>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8001aac:	2000      	movs	r0, #0
 8001aae:	f000 fd7b 	bl	80025a8 <EE_Format>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f000 bd70 	b.w	8002598 <EE_Init+0xe9c>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8001ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8001ca8 <EE_Init+0x5ac>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d005      	beq.n	8001ad2 <EE_Init+0x3d6>
 8001ac6:	4b78      	ldr	r3, [pc, #480]	@ (8001ca8 <EE_Init+0x5ac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	029a      	lsls	r2, r3, #10
 8001acc:	4b77      	ldr	r3, [pc, #476]	@ (8001cac <EE_Init+0x5b0>)
 8001ace:	4013      	ands	r3, r2
 8001ad0:	e001      	b.n	8001ad6 <EE_Init+0x3da>
 8001ad2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ad6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ada:	fbb2 f1f3 	udiv	r1, r2, r3
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	0adb      	lsrs	r3, r3, #11
 8001ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ae8:	e155      	b.n	8001d96 <EE_Init+0x69a>
  {
    pageaddress = PAGE_ADDRESS(page);
 8001aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001aec:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001af0:	02da      	lsls	r2, r3, #11
 8001af2:	4b6d      	ldr	r3, [pc, #436]	@ (8001ca8 <EE_Init+0x5ac>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001afc:	428b      	cmp	r3, r1
 8001afe:	d005      	beq.n	8001b0c <EE_Init+0x410>
 8001b00:	4b69      	ldr	r3, [pc, #420]	@ (8001ca8 <EE_Init+0x5ac>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0299      	lsls	r1, r3, #10
 8001b06:	4b69      	ldr	r3, [pc, #420]	@ (8001cac <EE_Init+0x5b0>)
 8001b08:	400b      	ands	r3, r1
 8001b0a:	e001      	b.n	8001b10 <EE_Init+0x414>
 8001b0c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b10:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001b14:	fbb1 f1f3 	udiv	r1, r1, r3
 8001b18:	4b63      	ldr	r3, [pc, #396]	@ (8001ca8 <EE_Init+0x5ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b22:	4283      	cmp	r3, r0
 8001b24:	d005      	beq.n	8001b32 <EE_Init+0x436>
 8001b26:	4b60      	ldr	r3, [pc, #384]	@ (8001ca8 <EE_Init+0x5ac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	0298      	lsls	r0, r3, #10
 8001b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8001cac <EE_Init+0x5b0>)
 8001b2e:	4003      	ands	r3, r0
 8001b30:	e001      	b.n	8001b36 <EE_Init+0x43a>
 8001b32:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8001b3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001b40:	f001 fea0 	bl	8003884 <GetPageState>
 8001b44:	4603      	mov	r3, r0
 8001b46:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8001b48:	7ebb      	ldrb	r3, [r7, #26]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	f040 8120 	bne.w	8001d90 <EE_Init+0x694>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8001b50:	4b55      	ldr	r3, [pc, #340]	@ (8001ca8 <EE_Init+0x5ac>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d005      	beq.n	8001b6a <EE_Init+0x46e>
 8001b5e:	4b52      	ldr	r3, [pc, #328]	@ (8001ca8 <EE_Init+0x5ac>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	029a      	lsls	r2, r3, #10
 8001b64:	4b51      	ldr	r3, [pc, #324]	@ (8001cac <EE_Init+0x5b0>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	e001      	b.n	8001b6e <EE_Init+0x472>
 8001b6a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b6e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b72:	fbb2 f1f3 	udiv	r1, r2, r3
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	0adb      	lsrs	r3, r3, #11
 8001b7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f000 8083 	beq.w	8001c8c <EE_Init+0x590>
 8001b86:	4b48      	ldr	r3, [pc, #288]	@ (8001ca8 <EE_Init+0x5ac>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d005      	beq.n	8001ba0 <EE_Init+0x4a4>
 8001b94:	4b44      	ldr	r3, [pc, #272]	@ (8001ca8 <EE_Init+0x5ac>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	029a      	lsls	r2, r3, #10
 8001b9a:	4b44      	ldr	r3, [pc, #272]	@ (8001cac <EE_Init+0x5b0>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	e001      	b.n	8001ba4 <EE_Init+0x4a8>
 8001ba0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ba4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ba8:	fbb2 f1f3 	udiv	r1, r2, r3
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	0adb      	lsrs	r3, r3, #11
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d067      	beq.n	8001c8c <EE_Init+0x590>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8001bbc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca8 <EE_Init+0x5ac>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d005      	beq.n	8001bd6 <EE_Init+0x4da>
 8001bca:	4b37      	ldr	r3, [pc, #220]	@ (8001ca8 <EE_Init+0x5ac>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	029a      	lsls	r2, r3, #10
 8001bd0:	4b36      	ldr	r3, [pc, #216]	@ (8001cac <EE_Init+0x5b0>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	e001      	b.n	8001bda <EE_Init+0x4de>
 8001bd6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001bda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bde:	fbb2 f1f3 	udiv	r1, r2, r3
 8001be2:	fb01 f303 	mul.w	r3, r1, r3
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	0adb      	lsrs	r3, r3, #11
 8001bea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f003 0101 	and.w	r1, r3, #1
 8001bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca8 <EE_Init+0x5ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d005      	beq.n	8001c0e <EE_Init+0x512>
 8001c02:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <EE_Init+0x5ac>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	029a      	lsls	r2, r3, #10
 8001c08:	4b28      	ldr	r3, [pc, #160]	@ (8001cac <EE_Init+0x5b0>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	e001      	b.n	8001c12 <EE_Init+0x516>
 8001c0e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c16:	fbb2 f0f3 	udiv	r0, r2, r3
 8001c1a:	fb00 f303 	mul.w	r3, r0, r3
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	0adb      	lsrs	r3, r3, #11
 8001c22:	440b      	add	r3, r1
 8001c24:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001c28:	02da      	lsls	r2, r3, #11
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <EE_Init+0x5ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001c34:	428b      	cmp	r3, r1
 8001c36:	d005      	beq.n	8001c44 <EE_Init+0x548>
 8001c38:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <EE_Init+0x5ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0299      	lsls	r1, r3, #10
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cac <EE_Init+0x5b0>)
 8001c40:	400b      	ands	r3, r1
 8001c42:	e001      	b.n	8001c48 <EE_Init+0x54c>
 8001c44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c48:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001c4c:	fbb1 f1f3 	udiv	r1, r1, r3
 8001c50:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <EE_Init+0x5ac>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001c5a:	4283      	cmp	r3, r0
 8001c5c:	d005      	beq.n	8001c6a <EE_Init+0x56e>
 8001c5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <EE_Init+0x5ac>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	0298      	lsls	r0, r3, #10
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <EE_Init+0x5b0>)
 8001c66:	4003      	ands	r3, r0
 8001c68:	e001      	b.n	8001c6e <EE_Init+0x572>
 8001c6a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f001 fe05 	bl	8003884 <GetPageState>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d102      	bne.n	8001c86 <EE_Init+0x58a>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8001c84:	e06e      	b.n	8001d64 <EE_Init+0x668>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8001c86:	2301      	movs	r3, #1
 8001c88:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8001c8a:	e06b      	b.n	8001d64 <EE_Init+0x668>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8001c8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <EE_Init+0x5ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00a      	beq.n	8001cb0 <EE_Init+0x5b4>
 8001c9a:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <EE_Init+0x5ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	029a      	lsls	r2, r3, #10
 8001ca0:	4b02      	ldr	r3, [pc, #8]	@ (8001cac <EE_Init+0x5b0>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	e006      	b.n	8001cb4 <EE_Init+0x5b8>
 8001ca6:	bf00      	nop
 8001ca8:	1fff75e0 	.word	0x1fff75e0
 8001cac:	03fffc00 	.word	0x03fffc00
 8001cb0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001cb4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8001cbc:	fb01 f303 	mul.w	r3, r1, r3
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	0adb      	lsrs	r3, r3, #11
 8001cc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	f003 0101 	and.w	r1, r3, #1
 8001cce:	4bad      	ldr	r3, [pc, #692]	@ (8001f84 <EE_Init+0x888>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d005      	beq.n	8001ce8 <EE_Init+0x5ec>
 8001cdc:	4ba9      	ldr	r3, [pc, #676]	@ (8001f84 <EE_Init+0x888>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	029a      	lsls	r2, r3, #10
 8001ce2:	4ba9      	ldr	r3, [pc, #676]	@ (8001f88 <EE_Init+0x88c>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	e001      	b.n	8001cec <EE_Init+0x5f0>
 8001ce8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001cec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cf0:	fbb2 f0f3 	udiv	r0, r2, r3
 8001cf4:	fb00 f303 	mul.w	r3, r0, r3
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	0adb      	lsrs	r3, r3, #11
 8001cfc:	440b      	add	r3, r1
 8001cfe:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001d02:	02da      	lsls	r2, r3, #11
 8001d04:	4b9f      	ldr	r3, [pc, #636]	@ (8001f84 <EE_Init+0x888>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d0e:	428b      	cmp	r3, r1
 8001d10:	d005      	beq.n	8001d1e <EE_Init+0x622>
 8001d12:	4b9c      	ldr	r3, [pc, #624]	@ (8001f84 <EE_Init+0x888>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0299      	lsls	r1, r3, #10
 8001d18:	4b9b      	ldr	r3, [pc, #620]	@ (8001f88 <EE_Init+0x88c>)
 8001d1a:	400b      	ands	r3, r1
 8001d1c:	e001      	b.n	8001d22 <EE_Init+0x626>
 8001d1e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d22:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001d26:	fbb1 f1f3 	udiv	r1, r1, r3
 8001d2a:	4b96      	ldr	r3, [pc, #600]	@ (8001f84 <EE_Init+0x888>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001d34:	4283      	cmp	r3, r0
 8001d36:	d005      	beq.n	8001d44 <EE_Init+0x648>
 8001d38:	4b92      	ldr	r3, [pc, #584]	@ (8001f84 <EE_Init+0x888>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0298      	lsls	r0, r3, #10
 8001d3e:	4b92      	ldr	r3, [pc, #584]	@ (8001f88 <EE_Init+0x88c>)
 8001d40:	4003      	ands	r3, r0
 8001d42:	e001      	b.n	8001d48 <EE_Init+0x64c>
 8001d44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001d48:	fb01 f303 	mul.w	r3, r1, r3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 fd98 	bl	8003884 <GetPageState>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <EE_Init+0x664>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	76fb      	strb	r3, [r7, #27]
 8001d5e:	e001      	b.n	8001d64 <EE_Init+0x668>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8001d60:	2301      	movs	r3, #1
 8001d62:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8001d64:	7efb      	ldrb	r3, [r7, #27]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d112      	bne.n	8001d90 <EE_Init+0x694>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 8001d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4b87      	ldr	r3, [pc, #540]	@ (8001f8c <EE_Init+0x890>)
 8001d70:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8001d72:	2201      	movs	r2, #1
 8001d74:	2100      	movs	r1, #0
 8001d76:	2000      	movs	r0, #0
 8001d78:	f001 f8fc 	bl	8002f74 <PagesTransfer>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d82:	d002      	beq.n	8001d8a <EE_Init+0x68e>
        {
          return EE_TRANSFER_ERROR;
 8001d84:	230c      	movs	r3, #12
 8001d86:	f000 bc07 	b.w	8002598 <EE_Init+0xe9c>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8001d8e:	e01e      	b.n	8001dce <EE_Init+0x6d2>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8001d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d92:	3301      	adds	r3, #1
 8001d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d96:	4b7b      	ldr	r3, [pc, #492]	@ (8001f84 <EE_Init+0x888>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d005      	beq.n	8001db0 <EE_Init+0x6b4>
 8001da4:	4b77      	ldr	r3, [pc, #476]	@ (8001f84 <EE_Init+0x888>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	029a      	lsls	r2, r3, #10
 8001daa:	4b77      	ldr	r3, [pc, #476]	@ (8001f88 <EE_Init+0x88c>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	e001      	b.n	8001db4 <EE_Init+0x6b8>
 8001db0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001db4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001db8:	fbb2 f1f3 	udiv	r1, r2, r3
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	0adb      	lsrs	r3, r3, #11
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	f4ff ae8e 	bcc.w	8001aea <EE_Init+0x3ee>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	633b      	str	r3, [r7, #48]	@ 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8001dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8001f84 <EE_Init+0x888>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d005      	beq.n	8001dec <EE_Init+0x6f0>
 8001de0:	4b68      	ldr	r3, [pc, #416]	@ (8001f84 <EE_Init+0x888>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	029a      	lsls	r2, r3, #10
 8001de6:	4b68      	ldr	r3, [pc, #416]	@ (8001f88 <EE_Init+0x88c>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	e001      	b.n	8001df0 <EE_Init+0x6f4>
 8001dec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001df0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001df4:	fbb2 f1f3 	udiv	r1, r2, r3
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	0adb      	lsrs	r3, r3, #11
 8001e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e02:	e155      	b.n	80020b0 <EE_Init+0x9b4>
  {
    pageaddress = PAGE_ADDRESS(page);
 8001e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e06:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001e0a:	02da      	lsls	r2, r3, #11
 8001e0c:	4b5d      	ldr	r3, [pc, #372]	@ (8001f84 <EE_Init+0x888>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e16:	428b      	cmp	r3, r1
 8001e18:	d005      	beq.n	8001e26 <EE_Init+0x72a>
 8001e1a:	4b5a      	ldr	r3, [pc, #360]	@ (8001f84 <EE_Init+0x888>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	0299      	lsls	r1, r3, #10
 8001e20:	4b59      	ldr	r3, [pc, #356]	@ (8001f88 <EE_Init+0x88c>)
 8001e22:	400b      	ands	r3, r1
 8001e24:	e001      	b.n	8001e2a <EE_Init+0x72e>
 8001e26:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001e2a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001e2e:	fbb1 f1f3 	udiv	r1, r1, r3
 8001e32:	4b54      	ldr	r3, [pc, #336]	@ (8001f84 <EE_Init+0x888>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e3c:	4283      	cmp	r3, r0
 8001e3e:	d005      	beq.n	8001e4c <EE_Init+0x750>
 8001e40:	4b50      	ldr	r3, [pc, #320]	@ (8001f84 <EE_Init+0x888>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0298      	lsls	r0, r3, #10
 8001e46:	4b50      	ldr	r3, [pc, #320]	@ (8001f88 <EE_Init+0x88c>)
 8001e48:	4003      	ands	r3, r0
 8001e4a:	e001      	b.n	8001e50 <EE_Init+0x754>
 8001e4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001e50:	fb01 f303 	mul.w	r3, r1, r3
 8001e54:	4413      	add	r3, r2
 8001e56:	63bb      	str	r3, [r7, #56]	@ 0x38
    pagestatus = GetPageState(pageaddress);
 8001e58:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001e5a:	f001 fd13 	bl	8003884 <GetPageState>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8001e62:	7ebb      	ldrb	r3, [r7, #26]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	f040 811b 	bne.w	80020a0 <EE_Init+0x9a4>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8001e6a:	4b46      	ldr	r3, [pc, #280]	@ (8001f84 <EE_Init+0x888>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d005      	beq.n	8001e84 <EE_Init+0x788>
 8001e78:	4b42      	ldr	r3, [pc, #264]	@ (8001f84 <EE_Init+0x888>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	029a      	lsls	r2, r3, #10
 8001e7e:	4b42      	ldr	r3, [pc, #264]	@ (8001f88 <EE_Init+0x88c>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	e001      	b.n	8001e88 <EE_Init+0x78c>
 8001e84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001e88:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	0adb      	lsrs	r3, r3, #11
 8001e98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	f000 8089 	beq.w	8001fb2 <EE_Init+0x8b6>
 8001ea0:	4b38      	ldr	r3, [pc, #224]	@ (8001f84 <EE_Init+0x888>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d005      	beq.n	8001eba <EE_Init+0x7be>
 8001eae:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <EE_Init+0x888>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	029a      	lsls	r2, r3, #10
 8001eb4:	4b34      	ldr	r3, [pc, #208]	@ (8001f88 <EE_Init+0x88c>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	e001      	b.n	8001ebe <EE_Init+0x7c2>
 8001eba:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ebe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ec2:	fbb2 f1f3 	udiv	r1, r2, r3
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	0adb      	lsrs	r3, r3, #11
 8001ece:	3301      	adds	r3, #1
 8001ed0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d06d      	beq.n	8001fb2 <EE_Init+0x8b6>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f84 <EE_Init+0x888>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d005      	beq.n	8001ef0 <EE_Init+0x7f4>
 8001ee4:	4b27      	ldr	r3, [pc, #156]	@ (8001f84 <EE_Init+0x888>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	029a      	lsls	r2, r3, #10
 8001eea:	4b27      	ldr	r3, [pc, #156]	@ (8001f88 <EE_Init+0x88c>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	e001      	b.n	8001ef4 <EE_Init+0x7f8>
 8001ef0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ef4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ef8:	fbb2 f1f3 	udiv	r1, r2, r3
 8001efc:	fb01 f303 	mul.w	r3, r1, r3
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	0adb      	lsrs	r3, r3, #11
 8001f04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f003 0101 	and.w	r1, r3, #1
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f84 <EE_Init+0x888>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d005      	beq.n	8001f28 <EE_Init+0x82c>
 8001f1c:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <EE_Init+0x888>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	029a      	lsls	r2, r3, #10
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <EE_Init+0x88c>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	e001      	b.n	8001f2c <EE_Init+0x830>
 8001f28:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f2c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f30:	fbb2 f0f3 	udiv	r0, r2, r3
 8001f34:	fb00 f303 	mul.w	r3, r0, r3
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	0adb      	lsrs	r3, r3, #11
 8001f3c:	440b      	add	r3, r1
 8001f3e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001f42:	02da      	lsls	r2, r3, #11
 8001f44:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <EE_Init+0x888>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	d005      	beq.n	8001f5e <EE_Init+0x862>
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <EE_Init+0x888>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	0299      	lsls	r1, r3, #10
 8001f58:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <EE_Init+0x88c>)
 8001f5a:	400b      	ands	r3, r1
 8001f5c:	e001      	b.n	8001f62 <EE_Init+0x866>
 8001f5e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f62:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001f66:	fbb1 f1f3 	udiv	r1, r1, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <EE_Init+0x888>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001f74:	4283      	cmp	r3, r0
 8001f76:	d00b      	beq.n	8001f90 <EE_Init+0x894>
 8001f78:	4b02      	ldr	r3, [pc, #8]	@ (8001f84 <EE_Init+0x888>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0298      	lsls	r0, r3, #10
 8001f7e:	4b02      	ldr	r3, [pc, #8]	@ (8001f88 <EE_Init+0x88c>)
 8001f80:	4003      	ands	r3, r0
 8001f82:	e007      	b.n	8001f94 <EE_Init+0x898>
 8001f84:	1fff75e0 	.word	0x1fff75e0
 8001f88:	03fffc00 	.word	0x03fffc00
 8001f8c:	200000f6 	.word	0x200000f6
 8001f90:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f001 fc72 	bl	8003884 <GetPageState>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d102      	bne.n	8001fac <EE_Init+0x8b0>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8001faa:	e069      	b.n	8002080 <EE_Init+0x984>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8001fac:	2301      	movs	r3, #1
 8001fae:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8001fb0:	e066      	b.n	8002080 <EE_Init+0x984>
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8001fb2:	4ba7      	ldr	r3, [pc, #668]	@ (8002250 <EE_Init+0xb54>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d005      	beq.n	8001fcc <EE_Init+0x8d0>
 8001fc0:	4ba3      	ldr	r3, [pc, #652]	@ (8002250 <EE_Init+0xb54>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	029a      	lsls	r2, r3, #10
 8001fc6:	4ba3      	ldr	r3, [pc, #652]	@ (8002254 <EE_Init+0xb58>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	e001      	b.n	8001fd0 <EE_Init+0x8d4>
 8001fcc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001fd0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fd4:	fbb2 f1f3 	udiv	r1, r2, r3
 8001fd8:	fb01 f303 	mul.w	r3, r1, r3
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	0adb      	lsrs	r3, r3, #11
 8001fe0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	f003 0101 	and.w	r1, r3, #1
 8001fea:	4b99      	ldr	r3, [pc, #612]	@ (8002250 <EE_Init+0xb54>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d005      	beq.n	8002004 <EE_Init+0x908>
 8001ff8:	4b95      	ldr	r3, [pc, #596]	@ (8002250 <EE_Init+0xb54>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	029a      	lsls	r2, r3, #10
 8001ffe:	4b95      	ldr	r3, [pc, #596]	@ (8002254 <EE_Init+0xb58>)
 8002000:	4013      	ands	r3, r2
 8002002:	e001      	b.n	8002008 <EE_Init+0x90c>
 8002004:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002008:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800200c:	fbb2 f0f3 	udiv	r0, r2, r3
 8002010:	fb00 f303 	mul.w	r3, r0, r3
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	0adb      	lsrs	r3, r3, #11
 8002018:	440b      	add	r3, r1
 800201a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800201e:	02da      	lsls	r2, r3, #11
 8002020:	4b8b      	ldr	r3, [pc, #556]	@ (8002250 <EE_Init+0xb54>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b29b      	uxth	r3, r3
 8002026:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800202a:	428b      	cmp	r3, r1
 800202c:	d005      	beq.n	800203a <EE_Init+0x93e>
 800202e:	4b88      	ldr	r3, [pc, #544]	@ (8002250 <EE_Init+0xb54>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0299      	lsls	r1, r3, #10
 8002034:	4b87      	ldr	r3, [pc, #540]	@ (8002254 <EE_Init+0xb58>)
 8002036:	400b      	ands	r3, r1
 8002038:	e001      	b.n	800203e <EE_Init+0x942>
 800203a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800203e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002042:	fbb1 f1f3 	udiv	r1, r1, r3
 8002046:	4b82      	ldr	r3, [pc, #520]	@ (8002250 <EE_Init+0xb54>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002050:	4283      	cmp	r3, r0
 8002052:	d005      	beq.n	8002060 <EE_Init+0x964>
 8002054:	4b7e      	ldr	r3, [pc, #504]	@ (8002250 <EE_Init+0xb54>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	0298      	lsls	r0, r3, #10
 800205a:	4b7e      	ldr	r3, [pc, #504]	@ (8002254 <EE_Init+0xb58>)
 800205c:	4003      	ands	r3, r0
 800205e:	e001      	b.n	8002064 <EE_Init+0x968>
 8002060:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f001 fc0a 	bl	8003884 <GetPageState>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <EE_Init+0x980>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	76fb      	strb	r3, [r7, #27]
 800207a:	e001      	b.n	8002080 <EE_Init+0x984>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 800207c:	2301      	movs	r3, #1
 800207e:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 8002080:	7efb      	ldrb	r3, [r7, #27]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d111      	bne.n	80020aa <EE_Init+0x9ae>
      {
        if (nbactivepage == 0U)
 8002086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <EE_Init+0x9a0>
        {
          ubCurrentActivePage = page;
 800208c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800208e:	b2da      	uxtb	r2, r3
 8002090:	4b71      	ldr	r3, [pc, #452]	@ (8002258 <EE_Init+0xb5c>)
 8002092:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 8002094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002096:	3301      	adds	r3, #1
 8002098:	633b      	str	r3, [r7, #48]	@ 0x30
 800209a:	e006      	b.n	80020aa <EE_Init+0x9ae>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 800209c:	230a      	movs	r3, #10
 800209e:	e27b      	b.n	8002598 <EE_Init+0xe9c>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 80020a0:	7ebb      	ldrb	r3, [r7, #26]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d101      	bne.n	80020aa <EE_Init+0x9ae>
    {
      lastvalidpage = page;
 80020a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020a8:	627b      	str	r3, [r7, #36]	@ 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80020aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ac:	3301      	adds	r3, #1
 80020ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020b0:	4b67      	ldr	r3, [pc, #412]	@ (8002250 <EE_Init+0xb54>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d005      	beq.n	80020ca <EE_Init+0x9ce>
 80020be:	4b64      	ldr	r3, [pc, #400]	@ (8002250 <EE_Init+0xb54>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	029a      	lsls	r2, r3, #10
 80020c4:	4b63      	ldr	r3, [pc, #396]	@ (8002254 <EE_Init+0xb58>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	e001      	b.n	80020ce <EE_Init+0x9d2>
 80020ca:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80020ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020d2:	fbb2 f1f3 	udiv	r1, r2, r3
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	0adb      	lsrs	r3, r3, #11
 80020de:	3302      	adds	r3, #2
 80020e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020e2:	429a      	cmp	r2, r3
 80020e4:	f4ff ae8e 	bcc.w	8001e04 <EE_Init+0x708>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 80020e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d147      	bne.n	800217e <EE_Init+0xa82>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	b2d9      	uxtb	r1, r3
 80020f2:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <EE_Init+0xb54>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d005      	beq.n	800210c <EE_Init+0xa10>
 8002100:	4b53      	ldr	r3, [pc, #332]	@ (8002250 <EE_Init+0xb54>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	029a      	lsls	r2, r3, #10
 8002106:	4b53      	ldr	r3, [pc, #332]	@ (8002254 <EE_Init+0xb58>)
 8002108:	4013      	ands	r3, r2
 800210a:	e001      	b.n	8002110 <EE_Init+0xa14>
 800210c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002110:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002114:	fbb2 f0f3 	udiv	r0, r2, r3
 8002118:	fb00 f303 	mul.w	r3, r0, r3
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	0adb      	lsrs	r3, r3, #11
 8002120:	b2db      	uxtb	r3, r3
 8002122:	1acb      	subs	r3, r1, r3
 8002124:	b2db      	uxtb	r3, r3
 8002126:	3301      	adds	r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	b2d9      	uxtb	r1, r3
 8002130:	4b47      	ldr	r3, [pc, #284]	@ (8002250 <EE_Init+0xb54>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800213a:	4293      	cmp	r3, r2
 800213c:	d005      	beq.n	800214a <EE_Init+0xa4e>
 800213e:	4b44      	ldr	r3, [pc, #272]	@ (8002250 <EE_Init+0xb54>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	029a      	lsls	r2, r3, #10
 8002144:	4b43      	ldr	r3, [pc, #268]	@ (8002254 <EE_Init+0xb58>)
 8002146:	4013      	ands	r3, r2
 8002148:	e001      	b.n	800214e <EE_Init+0xa52>
 800214a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800214e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002152:	fbb2 f0f3 	udiv	r0, r2, r3
 8002156:	fb00 f303 	mul.w	r3, r0, r3
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	0adb      	lsrs	r3, r3, #11
 800215e:	b2db      	uxtb	r3, r3
 8002160:	440b      	add	r3, r1
 8002162:	b2da      	uxtb	r2, r3
 8002164:	4b3c      	ldr	r3, [pc, #240]	@ (8002258 <EE_Init+0xb5c>)
 8002166:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8002168:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <EE_Init+0xb5c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2102      	movs	r1, #2
 800216e:	4618      	mov	r0, r3
 8002170:	f001 fa76 	bl	8003660 <SetPageState>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <EE_Init+0xa82>
    {
      return EE_WRITE_ERROR;
 800217a:	2302      	movs	r3, #2
 800217c:	e20c      	b.n	8002598 <EE_Init+0xe9c>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 800217e:	4b37      	ldr	r3, [pc, #220]	@ (800225c <EE_Init+0xb60>)
 8002180:	2200      	movs	r2, #0
 8002182:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8002184:	4b36      	ldr	r3, [pc, #216]	@ (8002260 <EE_Init+0xb64>)
 8002186:	2220      	movs	r2, #32
 8002188:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800218a:	2320      	movs	r3, #32
 800218c:	637b      	str	r3, [r7, #52]	@ 0x34
 800218e:	e045      	b.n	800221c <EE_Init+0xb20>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8002190:	4b31      	ldr	r3, [pc, #196]	@ (8002258 <EE_Init+0xb5c>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002198:	02da      	lsls	r2, r3, #11
 800219a:	4b2d      	ldr	r3, [pc, #180]	@ (8002250 <EE_Init+0xb54>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80021a4:	428b      	cmp	r3, r1
 80021a6:	d005      	beq.n	80021b4 <EE_Init+0xab8>
 80021a8:	4b29      	ldr	r3, [pc, #164]	@ (8002250 <EE_Init+0xb54>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0299      	lsls	r1, r3, #10
 80021ae:	4b29      	ldr	r3, [pc, #164]	@ (8002254 <EE_Init+0xb58>)
 80021b0:	400b      	ands	r3, r1
 80021b2:	e001      	b.n	80021b8 <EE_Init+0xabc>
 80021b4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80021b8:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80021bc:	fbb1 f1f3 	udiv	r1, r1, r3
 80021c0:	4b23      	ldr	r3, [pc, #140]	@ (8002250 <EE_Init+0xb54>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80021ca:	4283      	cmp	r3, r0
 80021cc:	d005      	beq.n	80021da <EE_Init+0xade>
 80021ce:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <EE_Init+0xb54>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	0298      	lsls	r0, r3, #10
 80021d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <EE_Init+0xb58>)
 80021d6:	4003      	ands	r3, r0
 80021d8:	e001      	b.n	80021de <EE_Init+0xae2>
 80021da:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	441a      	add	r2, r3
 80021e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021e6:	4413      	add	r3, r2
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) || (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 80021f0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	bf08      	it	eq
 80021fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80021fe:	d012      	beq.n	8002226 <EE_Init+0xb2a>
#endif
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 8002200:	4b16      	ldr	r3, [pc, #88]	@ (800225c <EE_Init+0xb60>)
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	3301      	adds	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	4b14      	ldr	r3, [pc, #80]	@ (800225c <EE_Init+0xb60>)
 800220a:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 800220c:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <EE_Init+0xb64>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3308      	adds	r3, #8
 8002212:	4a13      	ldr	r2, [pc, #76]	@ (8002260 <EE_Init+0xb64>)
 8002214:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8002216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002218:	3308      	adds	r3, #8
 800221a:	637b      	str	r3, [r7, #52]	@ 0x34
 800221c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800221e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002222:	d3b5      	bcc.n	8002190 <EE_Init+0xa94>
 8002224:	e000      	b.n	8002228 <EE_Init+0xb2c>
    }
    else /* no more element in the page */
    {
      break;
 8002226:	bf00      	nop
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <EE_Init+0xb5c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  firstvalidpage = ubCurrentActivePage;
 800222e:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <EE_Init+0xb5c>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8002234:	e07a      	b.n	800232c <EE_Init+0xc30>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <EE_Init+0xb54>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002240:	4293      	cmp	r3, r2
 8002242:	d00f      	beq.n	8002264 <EE_Init+0xb68>
 8002244:	4b02      	ldr	r3, [pc, #8]	@ (8002250 <EE_Init+0xb54>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	029a      	lsls	r2, r3, #10
 800224a:	4b02      	ldr	r3, [pc, #8]	@ (8002254 <EE_Init+0xb58>)
 800224c:	4013      	ands	r3, r2
 800224e:	e00b      	b.n	8002268 <EE_Init+0xb6c>
 8002250:	1fff75e0 	.word	0x1fff75e0
 8002254:	03fffc00 	.word	0x03fffc00
 8002258:	200000f6 	.word	0x200000f6
 800225c:	200000f4 	.word	0x200000f4
 8002260:	20000008 	.word	0x20000008
 8002264:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002268:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800226c:	fbb2 f1f3 	udiv	r1, r2, r3
 8002270:	fb01 f303 	mul.w	r3, r1, r3
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	0adb      	lsrs	r3, r3, #11
 8002278:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f003 0101 	and.w	r1, r3, #1
 8002282:	4ba8      	ldr	r3, [pc, #672]	@ (8002524 <EE_Init+0xe28>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	b29b      	uxth	r3, r3
 8002288:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800228c:	4293      	cmp	r3, r2
 800228e:	d005      	beq.n	800229c <EE_Init+0xba0>
 8002290:	4ba4      	ldr	r3, [pc, #656]	@ (8002524 <EE_Init+0xe28>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	029a      	lsls	r2, r3, #10
 8002296:	4ba4      	ldr	r3, [pc, #656]	@ (8002528 <EE_Init+0xe2c>)
 8002298:	4013      	ands	r3, r2
 800229a:	e001      	b.n	80022a0 <EE_Init+0xba4>
 800229c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80022a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80022a4:	fbb2 f0f3 	udiv	r0, r2, r3
 80022a8:	fb00 f303 	mul.w	r3, r0, r3
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	0adb      	lsrs	r3, r3, #11
 80022b0:	440b      	add	r3, r1
 80022b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 80022b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80022ba:	02da      	lsls	r2, r3, #11
 80022bc:	4b99      	ldr	r3, [pc, #612]	@ (8002524 <EE_Init+0xe28>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80022c6:	428b      	cmp	r3, r1
 80022c8:	d005      	beq.n	80022d6 <EE_Init+0xbda>
 80022ca:	4b96      	ldr	r3, [pc, #600]	@ (8002524 <EE_Init+0xe28>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	0299      	lsls	r1, r3, #10
 80022d0:	4b95      	ldr	r3, [pc, #596]	@ (8002528 <EE_Init+0xe2c>)
 80022d2:	400b      	ands	r3, r1
 80022d4:	e001      	b.n	80022da <EE_Init+0xbde>
 80022d6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80022da:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80022de:	fbb1 f1f3 	udiv	r1, r1, r3
 80022e2:	4b90      	ldr	r3, [pc, #576]	@ (8002524 <EE_Init+0xe28>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80022ec:	4283      	cmp	r3, r0
 80022ee:	d005      	beq.n	80022fc <EE_Init+0xc00>
 80022f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002524 <EE_Init+0xe28>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0298      	lsls	r0, r3, #10
 80022f6:	4b8c      	ldr	r3, [pc, #560]	@ (8002528 <EE_Init+0xe2c>)
 80022f8:	4003      	ands	r3, r0
 80022fa:	e001      	b.n	8002300 <EE_Init+0xc04>
 80022fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f001 fabc 	bl	8003884 <GetPageState>
 800230c:	4603      	mov	r3, r0
 800230e:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 8002310:	7ebb      	ldrb	r3, [r7, #26]
 8002312:	2b03      	cmp	r3, #3
 8002314:	d108      	bne.n	8002328 <EE_Init+0xc2c>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8002316:	4b85      	ldr	r3, [pc, #532]	@ (800252c <EE_Init+0xe30>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	33fc      	adds	r3, #252	@ 0xfc
 800231c:	b29a      	uxth	r2, r3
 800231e:	4b83      	ldr	r3, [pc, #524]	@ (800252c <EE_Init+0xe30>)
 8002320:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 8002322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002324:	623b      	str	r3, [r7, #32]
 8002326:	e001      	b.n	800232c <EE_Init+0xc30>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 8002328:	230a      	movs	r3, #10
 800232a:	e135      	b.n	8002598 <EE_Init+0xe9c>
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 800232c:	4b7d      	ldr	r3, [pc, #500]	@ (8002524 <EE_Init+0xe28>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002336:	4293      	cmp	r3, r2
 8002338:	d005      	beq.n	8002346 <EE_Init+0xc4a>
 800233a:	4b7a      	ldr	r3, [pc, #488]	@ (8002524 <EE_Init+0xe28>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	029a      	lsls	r2, r3, #10
 8002340:	4b79      	ldr	r3, [pc, #484]	@ (8002528 <EE_Init+0xe2c>)
 8002342:	4013      	ands	r3, r2
 8002344:	e001      	b.n	800234a <EE_Init+0xc4e>
 8002346:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800234a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800234e:	fbb2 f1f3 	udiv	r1, r2, r3
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	0adb      	lsrs	r3, r3, #11
 800235a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800235c:	429a      	cmp	r2, r3
 800235e:	d01b      	beq.n	8002398 <EE_Init+0xc9c>
 8002360:	4b70      	ldr	r3, [pc, #448]	@ (8002524 <EE_Init+0xe28>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	b29b      	uxth	r3, r3
 8002366:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800236a:	4293      	cmp	r3, r2
 800236c:	d005      	beq.n	800237a <EE_Init+0xc7e>
 800236e:	4b6d      	ldr	r3, [pc, #436]	@ (8002524 <EE_Init+0xe28>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	029a      	lsls	r2, r3, #10
 8002374:	4b6c      	ldr	r3, [pc, #432]	@ (8002528 <EE_Init+0xe2c>)
 8002376:	4013      	ands	r3, r2
 8002378:	e001      	b.n	800237e <EE_Init+0xc82>
 800237a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800237e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002382:	fbb2 f1f3 	udiv	r1, r2, r3
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	0adb      	lsrs	r3, r3, #11
 800238e:	3301      	adds	r3, #1
 8002390:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002392:	429a      	cmp	r2, r3
 8002394:	f47f af4f 	bne.w	8002236 <EE_Init+0xb3a>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 8002398:	4b65      	ldr	r3, [pc, #404]	@ (8002530 <EE_Init+0xe34>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	4b61      	ldr	r3, [pc, #388]	@ (8002524 <EE_Init+0xe28>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d005      	beq.n	80023b8 <EE_Init+0xcbc>
 80023ac:	4b5d      	ldr	r3, [pc, #372]	@ (8002524 <EE_Init+0xe28>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	029a      	lsls	r2, r3, #10
 80023b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002528 <EE_Init+0xe2c>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	e001      	b.n	80023bc <EE_Init+0xcc0>
 80023b8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80023bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	0adb      	lsrs	r3, r3, #11
 80023cc:	1ac3      	subs	r3, r0, r3
 80023ce:	3301      	adds	r3, #1
 80023d0:	f003 0101 	and.w	r1, r3, #1
 80023d4:	4b53      	ldr	r3, [pc, #332]	@ (8002524 <EE_Init+0xe28>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023de:	4293      	cmp	r3, r2
 80023e0:	d005      	beq.n	80023ee <EE_Init+0xcf2>
 80023e2:	4b50      	ldr	r3, [pc, #320]	@ (8002524 <EE_Init+0xe28>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	029a      	lsls	r2, r3, #10
 80023e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002528 <EE_Init+0xe2c>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	e001      	b.n	80023f2 <EE_Init+0xcf6>
 80023ee:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80023f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023f6:	fbb2 f0f3 	udiv	r0, r2, r3
 80023fa:	fb00 f303 	mul.w	r3, r0, r3
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	0adb      	lsrs	r3, r3, #11
 8002402:	440b      	add	r3, r1
 8002404:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pageaddress = PAGE_ADDRESS(page);
 8002406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002408:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800240c:	02da      	lsls	r2, r3, #11
 800240e:	4b45      	ldr	r3, [pc, #276]	@ (8002524 <EE_Init+0xe28>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002418:	428b      	cmp	r3, r1
 800241a:	d005      	beq.n	8002428 <EE_Init+0xd2c>
 800241c:	4b41      	ldr	r3, [pc, #260]	@ (8002524 <EE_Init+0xe28>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0299      	lsls	r1, r3, #10
 8002422:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <EE_Init+0xe2c>)
 8002424:	400b      	ands	r3, r1
 8002426:	e001      	b.n	800242c <EE_Init+0xd30>
 8002428:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800242c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002430:	fbb1 f1f3 	udiv	r1, r1, r3
 8002434:	4b3b      	ldr	r3, [pc, #236]	@ (8002524 <EE_Init+0xe28>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800243e:	4283      	cmp	r3, r0
 8002440:	d005      	beq.n	800244e <EE_Init+0xd52>
 8002442:	4b38      	ldr	r3, [pc, #224]	@ (8002524 <EE_Init+0xe28>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0298      	lsls	r0, r3, #10
 8002448:	4b37      	ldr	r3, [pc, #220]	@ (8002528 <EE_Init+0xe2c>)
 800244a:	4003      	ands	r3, r0
 800244c:	e001      	b.n	8002452 <EE_Init+0xd56>
 800244e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	4413      	add	r3, r2
 8002458:	63bb      	str	r3, [r7, #56]	@ 0x38

  while (page != firstvalidpage)
 800245a:	e084      	b.n	8002566 <EE_Init+0xe6a>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d108      	bne.n	8002474 <EE_Init+0xd78>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 8002462:	2101      	movs	r1, #1
 8002464:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002466:	f001 fab0 	bl	80039ca <FI_PageErase>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <EE_Init+0xd9a>
      {
        return EE_ERASE_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e091      	b.n	8002598 <EE_Init+0xe9c>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 8002474:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002478:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800247a:	f000 fbf2 	bl	8002c62 <VerifyPageFullyErased>
 800247e:	4603      	mov	r3, r0
 8002480:	2b10      	cmp	r3, #16
 8002482:	d108      	bne.n	8002496 <EE_Init+0xd9a>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 8002484:	2101      	movs	r1, #1
 8002486:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002488:	f001 fa9f 	bl	80039ca <FI_PageErase>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <EE_Init+0xd9a>
        {
          return EE_ERASE_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e080      	b.n	8002598 <EE_Init+0xe9c>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 8002496:	4b23      	ldr	r3, [pc, #140]	@ (8002524 <EE_Init+0xe28>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d005      	beq.n	80024b0 <EE_Init+0xdb4>
 80024a4:	4b1f      	ldr	r3, [pc, #124]	@ (8002524 <EE_Init+0xe28>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	029a      	lsls	r2, r3, #10
 80024aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <EE_Init+0xe2c>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	e001      	b.n	80024b4 <EE_Init+0xdb8>
 80024b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80024b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	0adb      	lsrs	r3, r3, #11
 80024c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	3301      	adds	r3, #1
 80024ca:	f003 0101 	and.w	r1, r3, #1
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <EE_Init+0xe28>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024d8:	4293      	cmp	r3, r2
 80024da:	d005      	beq.n	80024e8 <EE_Init+0xdec>
 80024dc:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <EE_Init+0xe28>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	029a      	lsls	r2, r3, #10
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <EE_Init+0xe2c>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	e001      	b.n	80024ec <EE_Init+0xdf0>
 80024e8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80024ec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024f0:	fbb2 f0f3 	udiv	r0, r2, r3
 80024f4:	fb00 f303 	mul.w	r3, r0, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	0adb      	lsrs	r3, r3, #11
 80024fc:	440b      	add	r3, r1
 80024fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    pageaddress = PAGE_ADDRESS(page);
 8002500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002502:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002506:	02da      	lsls	r2, r3, #11
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <EE_Init+0xe28>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002512:	428b      	cmp	r3, r1
 8002514:	d00e      	beq.n	8002534 <EE_Init+0xe38>
 8002516:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <EE_Init+0xe28>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0299      	lsls	r1, r3, #10
 800251c:	4b02      	ldr	r3, [pc, #8]	@ (8002528 <EE_Init+0xe2c>)
 800251e:	400b      	ands	r3, r1
 8002520:	e00a      	b.n	8002538 <EE_Init+0xe3c>
 8002522:	bf00      	nop
 8002524:	1fff75e0 	.word	0x1fff75e0
 8002528:	03fffc00 	.word	0x03fffc00
 800252c:	200000f4 	.word	0x200000f4
 8002530:	200000f6 	.word	0x200000f6
 8002534:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002538:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800253c:	fbb1 f1f3 	udiv	r1, r1, r3
 8002540:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <EE_Init+0xea4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800254a:	4283      	cmp	r3, r0
 800254c:	d005      	beq.n	800255a <EE_Init+0xe5e>
 800254e:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <EE_Init+0xea4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0298      	lsls	r0, r3, #10
 8002554:	4b13      	ldr	r3, [pc, #76]	@ (80025a4 <EE_Init+0xea8>)
 8002556:	4003      	ands	r3, r0
 8002558:	e001      	b.n	800255e <EE_Init+0xe62>
 800255a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800255e:	fb01 f303 	mul.w	r3, r1, r3
 8002562:	4413      	add	r3, r2
 8002564:	63bb      	str	r3, [r7, #56]	@ 0x38
  while (page != firstvalidpage)
 8002566:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	429a      	cmp	r2, r3
 800256c:	f47f af76 	bne.w	800245c <EE_Init+0xd60>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 8002570:	f001 fa52 	bl	8003a18 <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <EE_Init+0xe9a>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 800257a:	2100      	movs	r1, #0
 800257c:	2000      	movs	r0, #0
 800257e:	f000 ffd5 	bl	800352c <VerifyPagesFullWriteVariable>
 8002582:	4603      	mov	r3, r0
 8002584:	81fb      	strh	r3, [r7, #14]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 8002586:	89fb      	ldrh	r3, [r7, #14]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <EE_Init+0xe9a>
 800258c:	89fb      	ldrh	r3, [r7, #14]
 800258e:	2b12      	cmp	r3, #18
 8002590:	d001      	beq.n	8002596 <EE_Init+0xe9a>
    {
      return EE_WRITE_ERROR;
 8002592:	2302      	movs	r3, #2
 8002594:	e000      	b.n	8002598 <EE_Init+0xe9c>
    }
#endif
  }

  return EE_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3740      	adds	r7, #64	@ 0x40
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	1fff75e0 	.word	0x1fff75e0
 80025a4:	03fffc00 	.word	0x03fffc00

080025a8 <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 80025b6:	f001 fa51 	bl	8003a5c <FI_CheckBankConfig>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 80025c0:	230e      	movs	r3, #14
 80025c2:	e0bf      	b.n	8002744 <EE_Format+0x19c>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80025c4:	4b61      	ldr	r3, [pc, #388]	@ (800274c <EE_Format+0x1a4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d005      	beq.n	80025de <EE_Format+0x36>
 80025d2:	4b5e      	ldr	r3, [pc, #376]	@ (800274c <EE_Format+0x1a4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	029a      	lsls	r2, r3, #10
 80025d8:	4b5d      	ldr	r3, [pc, #372]	@ (8002750 <EE_Format+0x1a8>)
 80025da:	4013      	ands	r3, r2
 80025dc:	e001      	b.n	80025e2 <EE_Format+0x3a>
 80025de:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80025e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025e6:	fbb2 f1f3 	udiv	r1, r2, r3
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	0adb      	lsrs	r3, r3, #11
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	e048      	b.n	8002688 <EE_Format+0xe0>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d108      	bne.n	800260e <EE_Format+0x66>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80025fc:	2101      	movs	r1, #1
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f001 f9e3 	bl	80039ca <FI_PageErase>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d03b      	beq.n	8002682 <EE_Format+0xda>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e09a      	b.n	8002744 <EE_Format+0x19c>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002614:	02da      	lsls	r2, r3, #11
 8002616:	4b4d      	ldr	r3, [pc, #308]	@ (800274c <EE_Format+0x1a4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	b29b      	uxth	r3, r3
 800261c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002620:	428b      	cmp	r3, r1
 8002622:	d005      	beq.n	8002630 <EE_Format+0x88>
 8002624:	4b49      	ldr	r3, [pc, #292]	@ (800274c <EE_Format+0x1a4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	0299      	lsls	r1, r3, #10
 800262a:	4b49      	ldr	r3, [pc, #292]	@ (8002750 <EE_Format+0x1a8>)
 800262c:	400b      	ands	r3, r1
 800262e:	e001      	b.n	8002634 <EE_Format+0x8c>
 8002630:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002634:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002638:	fbb1 f1f3 	udiv	r1, r1, r3
 800263c:	4b43      	ldr	r3, [pc, #268]	@ (800274c <EE_Format+0x1a4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b29b      	uxth	r3, r3
 8002642:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002646:	4283      	cmp	r3, r0
 8002648:	d005      	beq.n	8002656 <EE_Format+0xae>
 800264a:	4b40      	ldr	r3, [pc, #256]	@ (800274c <EE_Format+0x1a4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	0298      	lsls	r0, r3, #10
 8002650:	4b3f      	ldr	r3, [pc, #252]	@ (8002750 <EE_Format+0x1a8>)
 8002652:	4003      	ands	r3, r0
 8002654:	e001      	b.n	800265a <EE_Format+0xb2>
 8002656:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	4413      	add	r3, r2
 8002660:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002664:	4618      	mov	r0, r3
 8002666:	f000 fafc 	bl	8002c62 <VerifyPageFullyErased>
 800266a:	4603      	mov	r3, r0
 800266c:	2b10      	cmp	r3, #16
 800266e:	d108      	bne.n	8002682 <EE_Format+0xda>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 8002670:	2101      	movs	r1, #1
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f001 f9a9 	bl	80039ca <FI_PageErase>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <EE_Format+0xda>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e060      	b.n	8002744 <EE_Format+0x19c>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	3301      	adds	r3, #1
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	4b30      	ldr	r3, [pc, #192]	@ (800274c <EE_Format+0x1a4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	b29b      	uxth	r3, r3
 800268e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002692:	4293      	cmp	r3, r2
 8002694:	d005      	beq.n	80026a2 <EE_Format+0xfa>
 8002696:	4b2d      	ldr	r3, [pc, #180]	@ (800274c <EE_Format+0x1a4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	029a      	lsls	r2, r3, #10
 800269c:	4b2c      	ldr	r3, [pc, #176]	@ (8002750 <EE_Format+0x1a8>)
 800269e:	4013      	ands	r3, r2
 80026a0:	e001      	b.n	80026a6 <EE_Format+0xfe>
 80026a2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80026a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026aa:	fbb2 f1f3 	udiv	r1, r2, r3
 80026ae:	fb01 f303 	mul.w	r3, r1, r3
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	0adb      	lsrs	r3, r3, #11
 80026b6:	3302      	adds	r3, #2
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d39b      	bcc.n	80025f6 <EE_Format+0x4e>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 80026be:	f001 f9ab 	bl	8003a18 <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 80026c2:	4b22      	ldr	r3, [pc, #136]	@ (800274c <EE_Format+0x1a4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d005      	beq.n	80026dc <EE_Format+0x134>
 80026d0:	4b1e      	ldr	r3, [pc, #120]	@ (800274c <EE_Format+0x1a4>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	029a      	lsls	r2, r3, #10
 80026d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002750 <EE_Format+0x1a8>)
 80026d8:	4013      	ands	r3, r2
 80026da:	e001      	b.n	80026e0 <EE_Format+0x138>
 80026dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80026e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	0adb      	lsrs	r3, r3, #11
 80026f0:	2102      	movs	r1, #2
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 ffb4 	bl	8003660 <SetPageState>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <EE_Format+0x15a>
  {
    return EE_WRITE_ERROR;
 80026fe:	2302      	movs	r3, #2
 8002700:	e020      	b.n	8002744 <EE_Format+0x19c>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 8002702:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <EE_Format+0x1ac>)
 8002704:	2200      	movs	r2, #0
 8002706:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 8002708:	4b10      	ldr	r3, [pc, #64]	@ (800274c <EE_Format+0x1a4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	b29b      	uxth	r3, r3
 800270e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002712:	4293      	cmp	r3, r2
 8002714:	d005      	beq.n	8002722 <EE_Format+0x17a>
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <EE_Format+0x1a4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	029a      	lsls	r2, r3, #10
 800271c:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <EE_Format+0x1a8>)
 800271e:	4013      	ands	r3, r2
 8002720:	e001      	b.n	8002726 <EE_Format+0x17e>
 8002722:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002726:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800272a:	fbb2 f1f3 	udiv	r1, r2, r3
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	0adb      	lsrs	r3, r3, #11
 8002736:	b2da      	uxtb	r2, r3
 8002738:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <EE_Format+0x1b0>)
 800273a:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 800273c:	4b07      	ldr	r3, [pc, #28]	@ (800275c <EE_Format+0x1b4>)
 800273e:	2220      	movs	r2, #32
 8002740:	601a      	str	r2, [r3, #0]

  return EE_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	1fff75e0 	.word	0x1fff75e0
 8002750:	03fffc00 	.word	0x03fffc00
 8002754:	200000f4 	.word	0x200000f4
 8002758:	200000f6 	.word	0x200000f6
 800275c:	20000008 	.word	0x20000008

08002760 <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d016      	beq.n	80027a0 <EE_ReadVariable32bits+0x40>
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002778:	4293      	cmp	r3, r2
 800277a:	d011      	beq.n	80027a0 <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 8002780:	2300      	movs	r3, #0
 8002782:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 8002784:	f107 0208 	add.w	r2, r7, #8
 8002788:	88fb      	ldrh	r3, [r7, #6]
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f939 	bl	8002a04 <ReadVariable>
 8002792:	4603      	mov	r3, r0
 8002794:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	601a      	str	r2, [r3, #0]

    return status;
 800279c:	89fb      	ldrh	r3, [r7, #14]
 800279e:	e000      	b.n	80027a2 <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 80027a0:	2308      	movs	r3, #8
  } 
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <EE_ReadVariable8bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable8bits(uint16_t VirtAddress, uint8_t* pData)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b084      	sub	sp, #16
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	6039      	str	r1, [r7, #0]
 80027b4:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d017      	beq.n	80027ec <EE_ReadVariable8bits+0x42>
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d012      	beq.n	80027ec <EE_ReadVariable8bits+0x42>
  {
    EE_DATA_TYPE datatmp = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 8bits */
    status = ReadVariable(VirtAddress, &datatmp);
 80027ce:	f107 0208 	add.w	r2, r7, #8
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 f914 	bl	8002a04 <ReadVariable>
 80027dc:	4603      	mov	r3, r0
 80027de:	81fb      	strh	r3, [r7, #14]
    *pData = (uint8_t) datatmp;
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	701a      	strb	r2, [r3, #0]

    return status;
 80027e8:	89fb      	ldrh	r3, [r7, #14]
 80027ea:	e000      	b.n	80027ee <EE_ReadVariable8bits+0x44>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 80027ec:	2308      	movs	r3, #8
  } 
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	6039      	str	r1, [r7, #0]
 8002800:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00b      	beq.n	8002820 <EE_WriteVariable32bits+0x2a>
 8002808:	88fb      	ldrh	r3, [r7, #6]
 800280a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800280e:	4293      	cmp	r3, r2
 8002810:	d006      	beq.n	8002820 <EE_WriteVariable32bits+0x2a>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	6839      	ldr	r1, [r7, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fa04 	bl	8002c24 <WriteVariable>
 800281c:	4603      	mov	r3, r0
 800281e:	e000      	b.n	8002822 <EE_WriteVariable32bits+0x2c>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8002820:	2308      	movs	r3, #8
  } 
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <EE_WriteVariable8bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable8bits(uint16_t VirtAddress, uint8_t Data)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	460a      	mov	r2, r1
 8002834:	80fb      	strh	r3, [r7, #6]
 8002836:	4613      	mov	r3, r2
 8002838:	717b      	strb	r3, [r7, #5]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <EE_WriteVariable8bits+0x30>
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002846:	4293      	cmp	r3, r2
 8002848:	d007      	beq.n	800285a <EE_WriteVariable8bits+0x30>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 800284a:	797a      	ldrb	r2, [r7, #5]
 800284c:	88fb      	ldrh	r3, [r7, #6]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f000 f9e7 	bl	8002c24 <WriteVariable>
 8002856:	4603      	mov	r3, r0
 8002858:	e000      	b.n	800285c <EE_WriteVariable8bits+0x32>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800285a:	2308      	movs	r3, #8
  } 
}
 800285c:	4618      	mov	r0, r3
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800287a:	2305      	movs	r3, #5
 800287c:	71fb      	strb	r3, [r7, #7]
 800287e:	2305      	movs	r3, #5
 8002880:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8002882:	4b5e      	ldr	r3, [pc, #376]	@ (80029fc <EE_CleanUp+0x198>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800288c:	4293      	cmp	r3, r2
 800288e:	d005      	beq.n	800289c <EE_CleanUp+0x38>
 8002890:	4b5a      	ldr	r3, [pc, #360]	@ (80029fc <EE_CleanUp+0x198>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	029a      	lsls	r2, r3, #10
 8002896:	4b5a      	ldr	r3, [pc, #360]	@ (8002a00 <EE_CleanUp+0x19c>)
 8002898:	4013      	ands	r3, r2
 800289a:	e001      	b.n	80028a0 <EE_CleanUp+0x3c>
 800289c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80028a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80028a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	0adb      	lsrs	r3, r3, #11
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	e081      	b.n	80029b8 <EE_CleanUp+0x154>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80028ba:	02da      	lsls	r2, r3, #11
 80028bc:	4b4f      	ldr	r3, [pc, #316]	@ (80029fc <EE_CleanUp+0x198>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80028c6:	428b      	cmp	r3, r1
 80028c8:	d005      	beq.n	80028d6 <EE_CleanUp+0x72>
 80028ca:	4b4c      	ldr	r3, [pc, #304]	@ (80029fc <EE_CleanUp+0x198>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0299      	lsls	r1, r3, #10
 80028d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002a00 <EE_CleanUp+0x19c>)
 80028d2:	400b      	ands	r3, r1
 80028d4:	e001      	b.n	80028da <EE_CleanUp+0x76>
 80028d6:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80028da:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80028de:	fbb1 f1f3 	udiv	r1, r1, r3
 80028e2:	4b46      	ldr	r3, [pc, #280]	@ (80029fc <EE_CleanUp+0x198>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80028ec:	4283      	cmp	r3, r0
 80028ee:	d005      	beq.n	80028fc <EE_CleanUp+0x98>
 80028f0:	4b42      	ldr	r3, [pc, #264]	@ (80029fc <EE_CleanUp+0x198>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	0298      	lsls	r0, r3, #10
 80028f6:	4b42      	ldr	r3, [pc, #264]	@ (8002a00 <EE_CleanUp+0x19c>)
 80028f8:	4003      	ands	r3, r0
 80028fa:	e001      	b.n	8002900 <EE_CleanUp+0x9c>
 80028fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f000 ffbb 	bl	8003884 <GetPageState>
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	2b04      	cmp	r3, #4
 8002916:	d14c      	bne.n	80029b2 <EE_CleanUp+0x14e>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3301      	adds	r3, #1
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	e036      	b.n	800298e <EE_CleanUp+0x12a>
      {
        pageaddress = PAGE_ADDRESS(page);
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002926:	02da      	lsls	r2, r3, #11
 8002928:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <EE_CleanUp+0x198>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	b29b      	uxth	r3, r3
 800292e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002932:	428b      	cmp	r3, r1
 8002934:	d005      	beq.n	8002942 <EE_CleanUp+0xde>
 8002936:	4b31      	ldr	r3, [pc, #196]	@ (80029fc <EE_CleanUp+0x198>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0299      	lsls	r1, r3, #10
 800293c:	4b30      	ldr	r3, [pc, #192]	@ (8002a00 <EE_CleanUp+0x19c>)
 800293e:	400b      	ands	r3, r1
 8002940:	e001      	b.n	8002946 <EE_CleanUp+0xe2>
 8002942:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002946:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800294a:	fbb1 f1f3 	udiv	r1, r1, r3
 800294e:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <EE_CleanUp+0x198>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002958:	4283      	cmp	r3, r0
 800295a:	d005      	beq.n	8002968 <EE_CleanUp+0x104>
 800295c:	4b27      	ldr	r3, [pc, #156]	@ (80029fc <EE_CleanUp+0x198>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	0298      	lsls	r0, r3, #10
 8002962:	4b27      	ldr	r3, [pc, #156]	@ (8002a00 <EE_CleanUp+0x19c>)
 8002964:	4003      	ands	r3, r0
 8002966:	e001      	b.n	800296c <EE_CleanUp+0x108>
 8002968:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 8002974:	68b8      	ldr	r0, [r7, #8]
 8002976:	f000 ff85 	bl	8003884 <GetPageState>
 800297a:	4603      	mov	r3, r0
 800297c:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 800297e:	79bb      	ldrb	r3, [r7, #6]
 8002980:	2b04      	cmp	r3, #4
 8002982:	d001      	beq.n	8002988 <EE_CleanUp+0x124>
        {
          return EE_ERROR_NOERASING_PAGE;
 8002984:	2305      	movs	r3, #5
 8002986:	e034      	b.n	80029f2 <EE_CleanUp+0x18e>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	3301      	adds	r3, #1
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3301      	adds	r3, #1
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	429a      	cmp	r2, r3
 8002996:	d3c3      	bcc.n	8002920 <EE_CleanUp+0xbc>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8002998:	2101      	movs	r1, #1
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f001 f815 	bl	80039ca <FI_PageErase>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <EE_CleanUp+0x146>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e023      	b.n	80029f2 <EE_CleanUp+0x18e>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 80029aa:	f001 f835 	bl	8003a18 <FI_CacheFlush>
        
        return EE_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e01f      	b.n	80029f2 <EE_CleanUp+0x18e>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3301      	adds	r3, #1
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <EE_CleanUp+0x198>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d005      	beq.n	80029d2 <EE_CleanUp+0x16e>
 80029c6:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <EE_CleanUp+0x198>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	029a      	lsls	r2, r3, #10
 80029cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <EE_CleanUp+0x19c>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	e001      	b.n	80029d6 <EE_CleanUp+0x172>
 80029d2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80029d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80029da:	fbb2 f1f3 	udiv	r1, r2, r3
 80029de:	fb01 f303 	mul.w	r3, r1, r3
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	0adb      	lsrs	r3, r3, #11
 80029e6:	3302      	adds	r3, #2
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	f4ff af62 	bcc.w	80028b4 <EE_CleanUp+0x50>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 80029f0:	2305      	movs	r3, #5
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	1fff75e0 	.word	0x1fff75e0
 8002a00:	03fffc00 	.word	0x03fffc00

08002a04 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	@ 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a20:	2300      	movs	r3, #0
 8002a22:	623b      	str	r3, [r7, #32]
 8002a24:	2300      	movs	r3, #0
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 8002a2c:	2305      	movs	r3, #5
 8002a2e:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f000 f93b 	bl	8002cac <FindPage>
 8002a36:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3e:	d101      	bne.n	8002a44 <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e0e7      	b.n	8002c14 <ReadVariable+0x210>
  }
  pageaddress = PAGE_ADDRESS(page);
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002a4a:	02da      	lsls	r2, r3, #11
 8002a4c:	4b73      	ldr	r3, [pc, #460]	@ (8002c1c <ReadVariable+0x218>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002a56:	428b      	cmp	r3, r1
 8002a58:	d005      	beq.n	8002a66 <ReadVariable+0x62>
 8002a5a:	4b70      	ldr	r3, [pc, #448]	@ (8002c1c <ReadVariable+0x218>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	0299      	lsls	r1, r3, #10
 8002a60:	4b6f      	ldr	r3, [pc, #444]	@ (8002c20 <ReadVariable+0x21c>)
 8002a62:	400b      	ands	r3, r1
 8002a64:	e001      	b.n	8002a6a <ReadVariable+0x66>
 8002a66:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002a6a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002a6e:	fbb1 f1f3 	udiv	r1, r1, r3
 8002a72:	4b6a      	ldr	r3, [pc, #424]	@ (8002c1c <ReadVariable+0x218>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002a7c:	4283      	cmp	r3, r0
 8002a7e:	d005      	beq.n	8002a8c <ReadVariable+0x88>
 8002a80:	4b66      	ldr	r3, [pc, #408]	@ (8002c1c <ReadVariable+0x218>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0298      	lsls	r0, r3, #10
 8002a86:	4b66      	ldr	r3, [pc, #408]	@ (8002c20 <ReadVariable+0x21c>)
 8002a88:	4003      	ands	r3, r0
 8002a8a:	e001      	b.n	8002a90 <ReadVariable+0x8c>
 8002a8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 8002a98:	6a38      	ldr	r0, [r7, #32]
 8002a9a:	f000 fef3 	bl	8003884 <GetPageState>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8002aa2:	e0aa      	b.n	8002bfa <ReadVariable+0x1f6>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 8002aa4:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8002aa8:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 8002aaa:	e03f      	b.n	8002b2c <ReadVariable+0x128>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 8002aac:	6a3a      	ldr	r2, [r7, #32]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 8002aba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	bf08      	it	eq
 8002ac4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8002ac8:	d02d      	beq.n	8002b26 <ReadVariable+0x122>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 8002aca:	8a3b      	ldrh	r3, [r7, #16]
 8002acc:	88fa      	ldrh	r2, [r7, #6]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d129      	bne.n	8002b26 <ReadVariable+0x122>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 8002ad2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	000a      	movs	r2, r1
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	8a3b      	ldrh	r3, [r7, #16]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	f000 ff42 	bl	8003970 <CalculateCrc>
 8002aec:	4603      	mov	r3, r0
 8002aee:	60fb      	str	r3, [r7, #12]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 8002af0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	0c02      	lsrs	r2, r0, #16
 8002afe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002b02:	0c0b      	lsrs	r3, r1, #16
 8002b04:	b293      	uxth	r3, r2
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d10b      	bne.n	8002b26 <ReadVariable+0x122>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 8002b0e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	f04f 0300 	mov.w	r3, #0
 8002b1a:	000a      	movs	r2, r1
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	601a      	str	r2, [r3, #0]

            return EE_OK;
 8002b22:	2300      	movs	r3, #0
 8002b24:	e076      	b.n	8002c14 <ReadVariable+0x210>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	3b08      	subs	r3, #8
 8002b2a:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	2b1f      	cmp	r3, #31
 8002b30:	d8bc      	bhi.n	8002aac <ReadVariable+0xa8>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 8002b32:	4b3a      	ldr	r3, [pc, #232]	@ (8002c1c <ReadVariable+0x218>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d005      	beq.n	8002b4c <ReadVariable+0x148>
 8002b40:	4b36      	ldr	r3, [pc, #216]	@ (8002c1c <ReadVariable+0x218>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	029a      	lsls	r2, r3, #10
 8002b46:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <ReadVariable+0x21c>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	e001      	b.n	8002b50 <ReadVariable+0x14c>
 8002b4c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b50:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b54:	fbb2 f1f3 	udiv	r1, r2, r3
 8002b58:	fb01 f303 	mul.w	r3, r1, r3
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	0adb      	lsrs	r3, r3, #11
 8002b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	f003 0101 	and.w	r1, r3, #1
 8002b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8002c1c <ReadVariable+0x218>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d005      	beq.n	8002b84 <ReadVariable+0x180>
 8002b78:	4b28      	ldr	r3, [pc, #160]	@ (8002c1c <ReadVariable+0x218>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	029a      	lsls	r2, r3, #10
 8002b7e:	4b28      	ldr	r3, [pc, #160]	@ (8002c20 <ReadVariable+0x21c>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	e001      	b.n	8002b88 <ReadVariable+0x184>
 8002b84:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002b88:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002b8c:	fbb2 f0f3 	udiv	r0, r2, r3
 8002b90:	fb00 f303 	mul.w	r3, r0, r3
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	0adb      	lsrs	r3, r3, #11
 8002b98:	440b      	add	r3, r1
 8002b9a:	627b      	str	r3, [r7, #36]	@ 0x24
    pageaddress = PAGE_ADDRESS(page);
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002ba2:	02da      	lsls	r2, r3, #11
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c1c <ReadVariable+0x218>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002bae:	428b      	cmp	r3, r1
 8002bb0:	d005      	beq.n	8002bbe <ReadVariable+0x1ba>
 8002bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <ReadVariable+0x218>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	0299      	lsls	r1, r3, #10
 8002bb8:	4b19      	ldr	r3, [pc, #100]	@ (8002c20 <ReadVariable+0x21c>)
 8002bba:	400b      	ands	r3, r1
 8002bbc:	e001      	b.n	8002bc2 <ReadVariable+0x1be>
 8002bbe:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002bc2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002bc6:	fbb1 f1f3 	udiv	r1, r1, r3
 8002bca:	4b14      	ldr	r3, [pc, #80]	@ (8002c1c <ReadVariable+0x218>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002bd4:	4283      	cmp	r3, r0
 8002bd6:	d005      	beq.n	8002be4 <ReadVariable+0x1e0>
 8002bd8:	4b10      	ldr	r3, [pc, #64]	@ (8002c1c <ReadVariable+0x218>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0298      	lsls	r0, r3, #10
 8002bde:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <ReadVariable+0x21c>)
 8002be0:	4003      	ands	r3, r0
 8002be2:	e001      	b.n	8002be8 <ReadVariable+0x1e4>
 8002be4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 8002bf0:	6a38      	ldr	r0, [r7, #32]
 8002bf2:	f000 fe47 	bl	8003884 <GetPageState>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8002bfa:	7efb      	ldrb	r3, [r7, #27]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	f43f af51 	beq.w	8002aa4 <ReadVariable+0xa0>
 8002c02:	7efb      	ldrb	r3, [r7, #27]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	f43f af4d 	beq.w	8002aa4 <ReadVariable+0xa0>
 8002c0a:	7efb      	ldrb	r3, [r7, #27]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	f43f af49 	beq.w	8002aa4 <ReadVariable+0xa0>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 8002c12:	2307      	movs	r3, #7
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3728      	adds	r7, #40	@ 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	1fff75e0 	.word	0x1fff75e0
 8002c20:	03fffc00 	.word	0x03fffc00

08002c24 <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	6839      	ldr	r1, [r7, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fc77 	bl	800352c <VerifyPagesFullWriteVariable>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	81fb      	strh	r3, [r7, #14]
#endif
  if (status == EE_PAGE_FULL)
 8002c42:	89fb      	ldrh	r3, [r7, #14]
 8002c44:	2b12      	cmp	r3, #18
 8002c46:	d107      	bne.n	8002c58 <WriteVariable+0x34>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f990 	bl	8002f74 <PagesTransfer>
 8002c54:	4603      	mov	r3, r0
 8002c56:	e000      	b.n	8002c5a <WriteVariable+0x36>
  }

  /* Return last operation status */
  return status;
 8002c58:	89fb      	ldrh	r3, [r7, #14]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 8002c6c:	2311      	movs	r3, #17
 8002c6e:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 8002c74:	e00f      	b.n	8002c96 <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	bf08      	it	eq
 8002c86:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8002c8a:	d001      	beq.n	8002c90 <VerifyPageFullyErased+0x2e>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 8002c8c:	2310      	movs	r3, #16
 8002c8e:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	3308      	adds	r3, #8
 8002c94:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d3eb      	bcc.n	8002c76 <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 8002c9e:	89fb      	ldrh	r3, [r7, #14]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 8002cb6:	2305      	movs	r3, #5
 8002cb8:	75fb      	strb	r3, [r7, #23]
 8002cba:	2305      	movs	r3, #5
 8002cbc:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 8002cca:	4ba6      	ldr	r3, [pc, #664]	@ (8002f64 <FindPage+0x2b8>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002cd6:	02da      	lsls	r2, r3, #11
 8002cd8:	4ba3      	ldr	r3, [pc, #652]	@ (8002f68 <FindPage+0x2bc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002ce2:	428b      	cmp	r3, r1
 8002ce4:	d005      	beq.n	8002cf2 <FindPage+0x46>
 8002ce6:	4ba0      	ldr	r3, [pc, #640]	@ (8002f68 <FindPage+0x2bc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0299      	lsls	r1, r3, #10
 8002cec:	4b9f      	ldr	r3, [pc, #636]	@ (8002f6c <FindPage+0x2c0>)
 8002cee:	400b      	ands	r3, r1
 8002cf0:	e001      	b.n	8002cf6 <FindPage+0x4a>
 8002cf2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002cf6:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002cfa:	fbb1 f1f3 	udiv	r1, r1, r3
 8002cfe:	4b9a      	ldr	r3, [pc, #616]	@ (8002f68 <FindPage+0x2bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002d08:	4283      	cmp	r3, r0
 8002d0a:	d005      	beq.n	8002d18 <FindPage+0x6c>
 8002d0c:	4b96      	ldr	r3, [pc, #600]	@ (8002f68 <FindPage+0x2bc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0298      	lsls	r0, r3, #10
 8002d12:	4b96      	ldr	r3, [pc, #600]	@ (8002f6c <FindPage+0x2c0>)
 8002d14:	4003      	ands	r3, r0
 8002d16:	e001      	b.n	8002d1c <FindPage+0x70>
 8002d18:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fdae 	bl	8003884 <GetPageState>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 8002d2c:	4b8e      	ldr	r3, [pc, #568]	@ (8002f68 <FindPage+0x2bc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d005      	beq.n	8002d46 <FindPage+0x9a>
 8002d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f68 <FindPage+0x2bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	029a      	lsls	r2, r3, #10
 8002d40:	4b8a      	ldr	r3, [pc, #552]	@ (8002f6c <FindPage+0x2c0>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	e001      	b.n	8002d4a <FindPage+0x9e>
 8002d46:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d4e:	fbb2 f1f3 	udiv	r1, r2, r3
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	0adb      	lsrs	r3, r3, #11
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f003 0101 	and.w	r1, r3, #1
 8002d64:	4b80      	ldr	r3, [pc, #512]	@ (8002f68 <FindPage+0x2bc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d005      	beq.n	8002d7e <FindPage+0xd2>
 8002d72:	4b7d      	ldr	r3, [pc, #500]	@ (8002f68 <FindPage+0x2bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	029a      	lsls	r2, r3, #10
 8002d78:	4b7c      	ldr	r3, [pc, #496]	@ (8002f6c <FindPage+0x2c0>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	e001      	b.n	8002d82 <FindPage+0xd6>
 8002d7e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002d82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d86:	fbb2 f0f3 	udiv	r0, r2, r3
 8002d8a:	fb00 f303 	mul.w	r3, r0, r3
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	0adb      	lsrs	r3, r3, #11
 8002d92:	440b      	add	r3, r1
 8002d94:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002d9c:	02da      	lsls	r2, r3, #11
 8002d9e:	4b72      	ldr	r3, [pc, #456]	@ (8002f68 <FindPage+0x2bc>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002da8:	428b      	cmp	r3, r1
 8002daa:	d005      	beq.n	8002db8 <FindPage+0x10c>
 8002dac:	4b6e      	ldr	r3, [pc, #440]	@ (8002f68 <FindPage+0x2bc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0299      	lsls	r1, r3, #10
 8002db2:	4b6e      	ldr	r3, [pc, #440]	@ (8002f6c <FindPage+0x2c0>)
 8002db4:	400b      	ands	r3, r1
 8002db6:	e001      	b.n	8002dbc <FindPage+0x110>
 8002db8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002dbc:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002dc0:	fbb1 f1f3 	udiv	r1, r1, r3
 8002dc4:	4b68      	ldr	r3, [pc, #416]	@ (8002f68 <FindPage+0x2bc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002dce:	4283      	cmp	r3, r0
 8002dd0:	d005      	beq.n	8002dde <FindPage+0x132>
 8002dd2:	4b65      	ldr	r3, [pc, #404]	@ (8002f68 <FindPage+0x2bc>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	0298      	lsls	r0, r3, #10
 8002dd8:	4b64      	ldr	r3, [pc, #400]	@ (8002f6c <FindPage+0x2c0>)
 8002dda:	4003      	ands	r3, r0
 8002ddc:	e001      	b.n	8002de2 <FindPage+0x136>
 8002dde:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f000 fd4b 	bl	8003884 <GetPageState>
 8002dee:	4603      	mov	r3, r0
 8002df0:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 8002df2:	4b5d      	ldr	r3, [pc, #372]	@ (8002f68 <FindPage+0x2bc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d005      	beq.n	8002e0c <FindPage+0x160>
 8002e00:	4b59      	ldr	r3, [pc, #356]	@ (8002f68 <FindPage+0x2bc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	029a      	lsls	r2, r3, #10
 8002e06:	4b59      	ldr	r3, [pc, #356]	@ (8002f6c <FindPage+0x2c0>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	e001      	b.n	8002e10 <FindPage+0x164>
 8002e0c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e10:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e14:	fbb2 f1f3 	udiv	r1, r2, r3
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	0adb      	lsrs	r3, r3, #11
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	f003 0101 	and.w	r1, r3, #1
 8002e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8002f68 <FindPage+0x2bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d005      	beq.n	8002e44 <FindPage+0x198>
 8002e38:	4b4b      	ldr	r3, [pc, #300]	@ (8002f68 <FindPage+0x2bc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	029a      	lsls	r2, r3, #10
 8002e3e:	4b4b      	ldr	r3, [pc, #300]	@ (8002f6c <FindPage+0x2c0>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	e001      	b.n	8002e48 <FindPage+0x19c>
 8002e44:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e48:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e4c:	fbb2 f0f3 	udiv	r0, r2, r3
 8002e50:	fb00 f303 	mul.w	r3, r0, r3
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	0adb      	lsrs	r3, r3, #11
 8002e58:	440b      	add	r3, r1
 8002e5a:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d071      	beq.n	8002f46 <FindPage+0x29a>
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	dc77      	bgt.n	8002f56 <FindPage+0x2aa>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d060      	beq.n	8002f2c <FindPage+0x280>
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d173      	bne.n	8002f56 <FindPage+0x2aa>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d12a      	bne.n	8002eca <FindPage+0x21e>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 8002e74:	4b3e      	ldr	r3, [pc, #248]	@ (8002f70 <FindPage+0x2c4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e7c:	d201      	bcs.n	8002e82 <FindPage+0x1d6>
        {
          /* Return current Active page */
          return currentpage;
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	e06b      	b.n	8002f5a <FindPage+0x2ae>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 8002e82:	7dbb      	ldrb	r3, [r7, #22]
 8002e84:	2b04      	cmp	r3, #4
 8002e86:	d107      	bne.n	8002e98 <FindPage+0x1ec>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8002e88:	f7ff fcec 	bl	8002864 <EE_CleanUp>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <FindPage+0x1ec>
            {
              return EE_NO_PAGE_FOUND;
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
 8002e96:	e060      	b.n	8002f5a <FindPage+0x2ae>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8002e98:	2103      	movs	r1, #3
 8002e9a:	6938      	ldr	r0, [r7, #16]
 8002e9c:	f000 fbe0 	bl	8003660 <SetPageState>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <FindPage+0x200>
          {
            return EE_NO_PAGE_FOUND;
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eaa:	e056      	b.n	8002f5a <FindPage+0x2ae>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8002eac:	2102      	movs	r1, #2
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fbd6 	bl	8003660 <SetPageState>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <FindPage+0x214>
          {
            return EE_NO_PAGE_FOUND;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	e04c      	b.n	8002f5a <FindPage+0x2ae>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8002ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8002f70 <FindPage+0x2c4>)
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	e047      	b.n	8002f5a <FindPage+0x2ae>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8002eca:	7dfb      	ldrb	r3, [r7, #23]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d12a      	bne.n	8002f26 <FindPage+0x27a>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8002ed0:	4b27      	ldr	r3, [pc, #156]	@ (8002f70 <FindPage+0x2c4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ed8:	d201      	bcs.n	8002ede <FindPage+0x232>
          {
            /* Return current receive page */
            return currentpage;
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	e03d      	b.n	8002f5a <FindPage+0x2ae>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8002ede:	7dbb      	ldrb	r3, [r7, #22]
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d107      	bne.n	8002ef4 <FindPage+0x248>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 8002ee4:	f7ff fcbe 	bl	8002864 <EE_CleanUp>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <FindPage+0x248>
              {
                return EE_NO_PAGE_FOUND;
 8002eee:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef2:	e032      	b.n	8002f5a <FindPage+0x2ae>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8002ef4:	2103      	movs	r1, #3
 8002ef6:	6938      	ldr	r0, [r7, #16]
 8002ef8:	f000 fbb2 	bl	8003660 <SetPageState>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <FindPage+0x25c>
            {
              return EE_NO_PAGE_FOUND;
 8002f02:	f04f 33ff 	mov.w	r3, #4294967295
 8002f06:	e028      	b.n	8002f5a <FindPage+0x2ae>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 8002f08:	2101      	movs	r1, #1
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 fba8 	bl	8003660 <SetPageState>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <FindPage+0x270>
            {
              return EE_NO_PAGE_FOUND;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1a:	e01e      	b.n	8002f5a <FindPage+0x2ae>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8002f1c:	4b14      	ldr	r3, [pc, #80]	@ (8002f70 <FindPage+0x2c4>)
 8002f1e:	2220      	movs	r2, #32
 8002f20:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	e019      	b.n	8002f5a <FindPage+0x2ae>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8002f26:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2a:	e016      	b.n	8002f5a <FindPage+0x2ae>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8002f2c:	7dfb      	ldrb	r3, [r7, #23]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d101      	bne.n	8002f36 <FindPage+0x28a>
      {
        return currentpage;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	e011      	b.n	8002f5a <FindPage+0x2ae>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8002f36:	7dfb      	ldrb	r3, [r7, #23]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <FindPage+0x294>
        {
          return previouspage;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	e00c      	b.n	8002f5a <FindPage+0x2ae>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8002f40:	f04f 33ff 	mov.w	r3, #4294967295
 8002f44:	e009      	b.n	8002f5a <FindPage+0x2ae>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 8002f46:	7dbb      	ldrb	r3, [r7, #22]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <FindPage+0x2a4>
      {
        return followingpage;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	e004      	b.n	8002f5a <FindPage+0x2ae>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
 8002f54:	e001      	b.n	8002f5a <FindPage+0x2ae>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	200000f6 	.word	0x200000f6
 8002f68:	1fff75e0 	.word	0x1fff75e0
 8002f6c:	03fffc00 	.word	0x03fffc00
 8002f70:	20000008 	.word	0x20000008

08002f74 <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	@ 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	6039      	str	r1, [r7, #0]
 8002f7e:	80fb      	strh	r3, [r7, #6]
 8002f80:	4613      	mov	r3, r2
 8002f82:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8002f84:	2305      	movs	r3, #5
 8002f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t pageaddress = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8002faa:	797b      	ldrb	r3, [r7, #5]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <PagesTransfer+0x40>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e000      	b.n	8002fb6 <PagesTransfer+0x42>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fe78 	bl	8002cac <FindPage>
 8002fbc:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d101      	bne.n	8002fca <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	e2a1      	b.n	800350e <PagesTransfer+0x59a>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8002fca:	4bae      	ldr	r3, [pc, #696]	@ (8003284 <PagesTransfer+0x310>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	b2da      	uxtb	r2, r3
 8002fd4:	4bac      	ldr	r3, [pc, #688]	@ (8003288 <PagesTransfer+0x314>)
 8002fd6:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8002fd8:	4bac      	ldr	r3, [pc, #688]	@ (800328c <PagesTransfer+0x318>)
 8002fda:	2220      	movs	r2, #32
 8002fdc:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8002fde:	797b      	ldrb	r3, [r7, #5]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d108      	bne.n	8002ff6 <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	6a38      	ldr	r0, [r7, #32]
 8002fe8:	f000 fb3a 	bl	8003660 <SetPageState>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	e28b      	b.n	800350e <PagesTransfer+0x59a>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8002ff6:	4ba6      	ldr	r3, [pc, #664]	@ (8003290 <PagesTransfer+0x31c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003000:	4293      	cmp	r3, r2
 8003002:	d005      	beq.n	8003010 <PagesTransfer+0x9c>
 8003004:	4ba2      	ldr	r3, [pc, #648]	@ (8003290 <PagesTransfer+0x31c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	029a      	lsls	r2, r3, #10
 800300a:	4ba2      	ldr	r3, [pc, #648]	@ (8003294 <PagesTransfer+0x320>)
 800300c:	4013      	ands	r3, r2
 800300e:	e001      	b.n	8003014 <PagesTransfer+0xa0>
 8003010:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003014:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003018:	fbb2 f1f3 	udiv	r1, r2, r3
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	0adb      	lsrs	r3, r3, #11
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f003 0101 	and.w	r1, r3, #1
 800302e:	4b98      	ldr	r3, [pc, #608]	@ (8003290 <PagesTransfer+0x31c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	b29b      	uxth	r3, r3
 8003034:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003038:	4293      	cmp	r3, r2
 800303a:	d005      	beq.n	8003048 <PagesTransfer+0xd4>
 800303c:	4b94      	ldr	r3, [pc, #592]	@ (8003290 <PagesTransfer+0x31c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	029a      	lsls	r2, r3, #10
 8003042:	4b94      	ldr	r3, [pc, #592]	@ (8003294 <PagesTransfer+0x320>)
 8003044:	4013      	ands	r3, r2
 8003046:	e001      	b.n	800304c <PagesTransfer+0xd8>
 8003048:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800304c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003050:	fbb2 f0f3 	udiv	r0, r2, r3
 8003054:	fb00 f303 	mul.w	r3, r0, r3
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	0adb      	lsrs	r3, r3, #11
 800305c:	440b      	add	r3, r1
 800305e:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003066:	02da      	lsls	r2, r3, #11
 8003068:	4b89      	ldr	r3, [pc, #548]	@ (8003290 <PagesTransfer+0x31c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003072:	428b      	cmp	r3, r1
 8003074:	d005      	beq.n	8003082 <PagesTransfer+0x10e>
 8003076:	4b86      	ldr	r3, [pc, #536]	@ (8003290 <PagesTransfer+0x31c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0299      	lsls	r1, r3, #10
 800307c:	4b85      	ldr	r3, [pc, #532]	@ (8003294 <PagesTransfer+0x320>)
 800307e:	400b      	ands	r3, r1
 8003080:	e001      	b.n	8003086 <PagesTransfer+0x112>
 8003082:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003086:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800308a:	fbb1 f1f3 	udiv	r1, r1, r3
 800308e:	4b80      	ldr	r3, [pc, #512]	@ (8003290 <PagesTransfer+0x31c>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003098:	4283      	cmp	r3, r0
 800309a:	d005      	beq.n	80030a8 <PagesTransfer+0x134>
 800309c:	4b7c      	ldr	r3, [pc, #496]	@ (8003290 <PagesTransfer+0x31c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	0298      	lsls	r0, r3, #10
 80030a2:	4b7c      	ldr	r3, [pc, #496]	@ (8003294 <PagesTransfer+0x320>)
 80030a4:	4003      	ands	r3, r0
 80030a6:	e001      	b.n	80030ac <PagesTransfer+0x138>
 80030a8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80030ac:	fb01 f303 	mul.w	r3, r1, r3
 80030b0:	4413      	add	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 80030b4:	69b8      	ldr	r0, [r7, #24]
 80030b6:	f000 fbe5 	bl	8003884 <GetPageState>
 80030ba:	4603      	mov	r3, r0
 80030bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 80030c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d004      	beq.n	80030d2 <PagesTransfer+0x15e>
 80030c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	f040 80fa 	bne.w	80032c6 <PagesTransfer+0x352>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 80030d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d108      	bne.n	80030ec <PagesTransfer+0x178>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 80030da:	2104      	movs	r1, #4
 80030dc:	6a38      	ldr	r0, [r7, #32]
 80030de:	f000 fabf 	bl	8003660 <SetPageState>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <PagesTransfer+0x178>
      {
        return EE_WRITE_ERROR;
 80030e8:	2302      	movs	r3, #2
 80030ea:	e210      	b.n	800350e <PagesTransfer+0x59a>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 80030ec:	4b68      	ldr	r3, [pc, #416]	@ (8003290 <PagesTransfer+0x31c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d005      	beq.n	8003106 <PagesTransfer+0x192>
 80030fa:	4b65      	ldr	r3, [pc, #404]	@ (8003290 <PagesTransfer+0x31c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	029a      	lsls	r2, r3, #10
 8003100:	4b64      	ldr	r3, [pc, #400]	@ (8003294 <PagesTransfer+0x320>)
 8003102:	4013      	ands	r3, r2
 8003104:	e001      	b.n	800310a <PagesTransfer+0x196>
 8003106:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800310a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800310e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	0adb      	lsrs	r3, r3, #11
 800311a:	6a3a      	ldr	r2, [r7, #32]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	3301      	adds	r3, #1
 8003120:	f003 0101 	and.w	r1, r3, #1
 8003124:	4b5a      	ldr	r3, [pc, #360]	@ (8003290 <PagesTransfer+0x31c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800312e:	4293      	cmp	r3, r2
 8003130:	d005      	beq.n	800313e <PagesTransfer+0x1ca>
 8003132:	4b57      	ldr	r3, [pc, #348]	@ (8003290 <PagesTransfer+0x31c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	029a      	lsls	r2, r3, #10
 8003138:	4b56      	ldr	r3, [pc, #344]	@ (8003294 <PagesTransfer+0x320>)
 800313a:	4013      	ands	r3, r2
 800313c:	e001      	b.n	8003142 <PagesTransfer+0x1ce>
 800313e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003142:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003146:	fbb2 f0f3 	udiv	r0, r2, r3
 800314a:	fb00 f303 	mul.w	r3, r0, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	0adb      	lsrs	r3, r3, #11
 8003152:	440b      	add	r3, r1
 8003154:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800315c:	02da      	lsls	r2, r3, #11
 800315e:	4b4c      	ldr	r3, [pc, #304]	@ (8003290 <PagesTransfer+0x31c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003168:	428b      	cmp	r3, r1
 800316a:	d005      	beq.n	8003178 <PagesTransfer+0x204>
 800316c:	4b48      	ldr	r3, [pc, #288]	@ (8003290 <PagesTransfer+0x31c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	0299      	lsls	r1, r3, #10
 8003172:	4b48      	ldr	r3, [pc, #288]	@ (8003294 <PagesTransfer+0x320>)
 8003174:	400b      	ands	r3, r1
 8003176:	e001      	b.n	800317c <PagesTransfer+0x208>
 8003178:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800317c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8003180:	fbb1 f1f3 	udiv	r1, r1, r3
 8003184:	4b42      	ldr	r3, [pc, #264]	@ (8003290 <PagesTransfer+0x31c>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800318e:	4283      	cmp	r3, r0
 8003190:	d005      	beq.n	800319e <PagesTransfer+0x22a>
 8003192:	4b3f      	ldr	r3, [pc, #252]	@ (8003290 <PagesTransfer+0x31c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	0298      	lsls	r0, r3, #10
 8003198:	4b3e      	ldr	r3, [pc, #248]	@ (8003294 <PagesTransfer+0x320>)
 800319a:	4003      	ands	r3, r0
 800319c:	e001      	b.n	80031a2 <PagesTransfer+0x22e>
 800319e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031a2:	fb01 f303 	mul.w	r3, r1, r3
 80031a6:	4413      	add	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 80031aa:	69b8      	ldr	r0, [r7, #24]
 80031ac:	f000 fb6a 	bl	8003884 <GetPageState>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 80031b6:	e07b      	b.n	80032b0 <PagesTransfer+0x33c>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 80031b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031bc:	2b03      	cmp	r3, #3
 80031be:	d108      	bne.n	80031d2 <PagesTransfer+0x25e>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 80031c0:	2104      	movs	r1, #4
 80031c2:	6a38      	ldr	r0, [r7, #32]
 80031c4:	f000 fa4c 	bl	8003660 <SetPageState>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <PagesTransfer+0x25e>
        {
          return EE_WRITE_ERROR;
 80031ce:	2302      	movs	r3, #2
 80031d0:	e19d      	b.n	800350e <PagesTransfer+0x59a>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 80031d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003290 <PagesTransfer+0x31c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031dc:	4293      	cmp	r3, r2
 80031de:	d005      	beq.n	80031ec <PagesTransfer+0x278>
 80031e0:	4b2b      	ldr	r3, [pc, #172]	@ (8003290 <PagesTransfer+0x31c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	029a      	lsls	r2, r3, #10
 80031e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003294 <PagesTransfer+0x320>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	e001      	b.n	80031f0 <PagesTransfer+0x27c>
 80031ec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	0adb      	lsrs	r3, r3, #11
 8003200:	6a3a      	ldr	r2, [r7, #32]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f003 0101 	and.w	r1, r3, #1
 800320a:	4b21      	ldr	r3, [pc, #132]	@ (8003290 <PagesTransfer+0x31c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003214:	4293      	cmp	r3, r2
 8003216:	d005      	beq.n	8003224 <PagesTransfer+0x2b0>
 8003218:	4b1d      	ldr	r3, [pc, #116]	@ (8003290 <PagesTransfer+0x31c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	029a      	lsls	r2, r3, #10
 800321e:	4b1d      	ldr	r3, [pc, #116]	@ (8003294 <PagesTransfer+0x320>)
 8003220:	4013      	ands	r3, r2
 8003222:	e001      	b.n	8003228 <PagesTransfer+0x2b4>
 8003224:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003228:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800322c:	fbb2 f0f3 	udiv	r0, r2, r3
 8003230:	fb00 f303 	mul.w	r3, r0, r3
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	0adb      	lsrs	r3, r3, #11
 8003238:	440b      	add	r3, r1
 800323a:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003242:	02da      	lsls	r2, r3, #11
 8003244:	4b12      	ldr	r3, [pc, #72]	@ (8003290 <PagesTransfer+0x31c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	b29b      	uxth	r3, r3
 800324a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800324e:	428b      	cmp	r3, r1
 8003250:	d005      	beq.n	800325e <PagesTransfer+0x2ea>
 8003252:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <PagesTransfer+0x31c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	0299      	lsls	r1, r3, #10
 8003258:	4b0e      	ldr	r3, [pc, #56]	@ (8003294 <PagesTransfer+0x320>)
 800325a:	400b      	ands	r3, r1
 800325c:	e001      	b.n	8003262 <PagesTransfer+0x2ee>
 800325e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003262:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8003266:	fbb1 f1f3 	udiv	r1, r1, r3
 800326a:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <PagesTransfer+0x31c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003274:	4283      	cmp	r3, r0
 8003276:	d00f      	beq.n	8003298 <PagesTransfer+0x324>
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <PagesTransfer+0x31c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0298      	lsls	r0, r3, #10
 800327e:	4b05      	ldr	r3, [pc, #20]	@ (8003294 <PagesTransfer+0x320>)
 8003280:	4003      	ands	r3, r0
 8003282:	e00b      	b.n	800329c <PagesTransfer+0x328>
 8003284:	200000f4 	.word	0x200000f4
 8003288:	200000f6 	.word	0x200000f6
 800328c:	20000008 	.word	0x20000008
 8003290:	1fff75e0 	.word	0x1fff75e0
 8003294:	03fffc00 	.word	0x03fffc00
 8003298:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 80032a4:	69b8      	ldr	r0, [r7, #24]
 80032a6:	f000 faed 	bl	8003884 <GetPageState>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 80032b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	f43f af7f 	beq.w	80031b8 <PagesTransfer+0x244>
 80032ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032be:	2b04      	cmp	r3, #4
 80032c0:	f43f af7a 	beq.w	80031b8 <PagesTransfer+0x244>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 80032c4:	e008      	b.n	80032d8 <PagesTransfer+0x364>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 80032c6:	797b      	ldrb	r3, [r7, #5]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d103      	bne.n	80032d4 <PagesTransfer+0x360>
 80032cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032d0:	2b03      	cmp	r3, #3
 80032d2:	d001      	beq.n	80032d8 <PagesTransfer+0x364>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 80032d4:	230a      	movs	r3, #10
 80032d6:	e11a      	b.n	800350e <PagesTransfer+0x59a>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 80032d8:	797b      	ldrb	r3, [r7, #5]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	f040 80cb 	bne.w	8003476 <PagesTransfer+0x502>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80032e0:	2320      	movs	r3, #32
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	e045      	b.n	8003372 <PagesTransfer+0x3fe>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 80032e6:	4b8c      	ldr	r3, [pc, #560]	@ (8003518 <PagesTransfer+0x5a4>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80032ee:	02da      	lsls	r2, r3, #11
 80032f0:	4b8a      	ldr	r3, [pc, #552]	@ (800351c <PagesTransfer+0x5a8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80032fa:	428b      	cmp	r3, r1
 80032fc:	d005      	beq.n	800330a <PagesTransfer+0x396>
 80032fe:	4b87      	ldr	r3, [pc, #540]	@ (800351c <PagesTransfer+0x5a8>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	0299      	lsls	r1, r3, #10
 8003304:	4b86      	ldr	r3, [pc, #536]	@ (8003520 <PagesTransfer+0x5ac>)
 8003306:	400b      	ands	r3, r1
 8003308:	e001      	b.n	800330e <PagesTransfer+0x39a>
 800330a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800330e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8003312:	fbb1 f1f3 	udiv	r1, r1, r3
 8003316:	4b81      	ldr	r3, [pc, #516]	@ (800351c <PagesTransfer+0x5a8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	b29b      	uxth	r3, r3
 800331c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003320:	4283      	cmp	r3, r0
 8003322:	d005      	beq.n	8003330 <PagesTransfer+0x3bc>
 8003324:	4b7d      	ldr	r3, [pc, #500]	@ (800351c <PagesTransfer+0x5a8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	0298      	lsls	r0, r3, #10
 800332a:	4b7d      	ldr	r3, [pc, #500]	@ (8003520 <PagesTransfer+0x5ac>)
 800332c:	4003      	ands	r3, r0
 800332e:	e001      	b.n	8003334 <PagesTransfer+0x3c0>
 8003330:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	441a      	add	r2, r3
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003342:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) || (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)|| (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 8003346:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	bf08      	it	eq
 8003350:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8003354:	d012      	beq.n	800337c <PagesTransfer+0x408>
#endif
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 8003356:	4b73      	ldr	r3, [pc, #460]	@ (8003524 <PagesTransfer+0x5b0>)
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	3301      	adds	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	4b71      	ldr	r3, [pc, #452]	@ (8003524 <PagesTransfer+0x5b0>)
 8003360:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8003362:	4b71      	ldr	r3, [pc, #452]	@ (8003528 <PagesTransfer+0x5b4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3308      	adds	r3, #8
 8003368:	4a6f      	ldr	r2, [pc, #444]	@ (8003528 <PagesTransfer+0x5b4>)
 800336a:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	3308      	adds	r3, #8
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003378:	d3b5      	bcc.n	80032e6 <PagesTransfer+0x372>
 800337a:	e000      	b.n	800337e <PagesTransfer+0x40a>
      }
      else
      {
        break;
 800337c:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 800337e:	4b66      	ldr	r3, [pc, #408]	@ (8003518 <PagesTransfer+0x5a4>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	e070      	b.n	800346c <PagesTransfer+0x4f8>
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 800338a:	4b64      	ldr	r3, [pc, #400]	@ (800351c <PagesTransfer+0x5a8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	b29b      	uxth	r3, r3
 8003390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003394:	4293      	cmp	r3, r2
 8003396:	d005      	beq.n	80033a4 <PagesTransfer+0x430>
 8003398:	4b60      	ldr	r3, [pc, #384]	@ (800351c <PagesTransfer+0x5a8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	029a      	lsls	r2, r3, #10
 800339e:	4b60      	ldr	r3, [pc, #384]	@ (8003520 <PagesTransfer+0x5ac>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	e001      	b.n	80033a8 <PagesTransfer+0x434>
 80033a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033ac:	fbb2 f1f3 	udiv	r1, r2, r3
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	0adb      	lsrs	r3, r3, #11
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f003 0101 	and.w	r1, r3, #1
 80033c2:	4b56      	ldr	r3, [pc, #344]	@ (800351c <PagesTransfer+0x5a8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d005      	beq.n	80033dc <PagesTransfer+0x468>
 80033d0:	4b52      	ldr	r3, [pc, #328]	@ (800351c <PagesTransfer+0x5a8>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	029a      	lsls	r2, r3, #10
 80033d6:	4b52      	ldr	r3, [pc, #328]	@ (8003520 <PagesTransfer+0x5ac>)
 80033d8:	4013      	ands	r3, r2
 80033da:	e001      	b.n	80033e0 <PagesTransfer+0x46c>
 80033dc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80033e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80033e4:	fbb2 f0f3 	udiv	r0, r2, r3
 80033e8:	fb00 f303 	mul.w	r3, r0, r3
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	0adb      	lsrs	r3, r3, #11
 80033f0:	440b      	add	r3, r1
 80033f2:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80033fa:	02da      	lsls	r2, r3, #11
 80033fc:	4b47      	ldr	r3, [pc, #284]	@ (800351c <PagesTransfer+0x5a8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003406:	428b      	cmp	r3, r1
 8003408:	d005      	beq.n	8003416 <PagesTransfer+0x4a2>
 800340a:	4b44      	ldr	r3, [pc, #272]	@ (800351c <PagesTransfer+0x5a8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0299      	lsls	r1, r3, #10
 8003410:	4b43      	ldr	r3, [pc, #268]	@ (8003520 <PagesTransfer+0x5ac>)
 8003412:	400b      	ands	r3, r1
 8003414:	e001      	b.n	800341a <PagesTransfer+0x4a6>
 8003416:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800341a:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 800341e:	fbb1 f1f3 	udiv	r1, r1, r3
 8003422:	4b3e      	ldr	r3, [pc, #248]	@ (800351c <PagesTransfer+0x5a8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800342c:	4283      	cmp	r3, r0
 800342e:	d005      	beq.n	800343c <PagesTransfer+0x4c8>
 8003430:	4b3a      	ldr	r3, [pc, #232]	@ (800351c <PagesTransfer+0x5a8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0298      	lsls	r0, r3, #10
 8003436:	4b3a      	ldr	r3, [pc, #232]	@ (8003520 <PagesTransfer+0x5ac>)
 8003438:	4003      	ands	r3, r0
 800343a:	e001      	b.n	8003440 <PagesTransfer+0x4cc>
 800343c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fa1c 	bl	8003884 <GetPageState>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 8003452:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003456:	2b03      	cmp	r3, #3
 8003458:	d10c      	bne.n	8003474 <PagesTransfer+0x500>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 800345a:	4b32      	ldr	r3, [pc, #200]	@ (8003524 <PagesTransfer+0x5b0>)
 800345c:	881b      	ldrh	r3, [r3, #0]
 800345e:	33fc      	adds	r3, #252	@ 0xfc
 8003460:	b29a      	uxth	r2, r3
 8003462:	4b30      	ldr	r3, [pc, #192]	@ (8003524 <PagesTransfer+0x5b0>)
 8003464:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3301      	adds	r3, #1
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d98b      	bls.n	800338a <PagesTransfer+0x416>
 8003472:	e000      	b.n	8003476 <PagesTransfer+0x502>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 8003474:	bf00      	nop
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 8003476:	88fb      	ldrh	r3, [r7, #6]
 8003478:	6839      	ldr	r1, [r7, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f856 	bl	800352c <VerifyPagesFullWriteVariable>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <PagesTransfer+0x516>
  {
    return EE_WRITE_ERROR;
 8003486:	2302      	movs	r3, #2
 8003488:	e041      	b.n	800350e <PagesTransfer+0x59a>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 800348a:	4b26      	ldr	r3, [pc, #152]	@ (8003524 <PagesTransfer+0x5b0>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d903      	bls.n	800349a <PagesTransfer+0x526>
 8003492:	4b24      	ldr	r3, [pc, #144]	@ (8003524 <PagesTransfer+0x5b0>)
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	3b02      	subs	r3, #2
 8003498:	e000      	b.n	800349c <PagesTransfer+0x528>
 800349a:	2301      	movs	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	e026      	b.n	80034ee <PagesTransfer+0x57a>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d01f      	beq.n	80034e8 <PagesTransfer+0x574>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f107 0208 	add.w	r2, r7, #8
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff faa6 	bl	8002a04 <ReadVariable>
 80034b8:	4603      	mov	r3, r0
 80034ba:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 80034bc:	89fb      	ldrh	r3, [r7, #14]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10d      	bne.n	80034de <PagesTransfer+0x56a>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 f82e 	bl	800352c <VerifyPagesFullWriteVariable>
 80034d0:	4603      	mov	r3, r0
 80034d2:	81fb      	strh	r3, [r7, #14]
    #endif
        if (status != EE_OK)
 80034d4:	89fb      	ldrh	r3, [r7, #14]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <PagesTransfer+0x574>
        {
          return status;
 80034da:	89fb      	ldrh	r3, [r7, #14]
 80034dc:	e017      	b.n	800350e <PagesTransfer+0x59a>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 80034de:	89fb      	ldrh	r3, [r7, #14]
 80034e0:	2b07      	cmp	r3, #7
 80034e2:	d001      	beq.n	80034e8 <PagesTransfer+0x574>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 80034e4:	89fb      	ldrh	r3, [r7, #14]
 80034e6:	e012      	b.n	800350e <PagesTransfer+0x59a>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	3301      	adds	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d9d5      	bls.n	80034a0 <PagesTransfer+0x52c>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 80034f4:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <PagesTransfer+0x5a4>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 f8b0 	bl	8003660 <SetPageState>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <PagesTransfer+0x596>
  {
    return EE_WRITE_ERROR;
 8003506:	2302      	movs	r3, #2
 8003508:	e001      	b.n	800350e <PagesTransfer+0x59a>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 800350a:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 800350e:	4618      	mov	r0, r3
 8003510:	3728      	adds	r7, #40	@ 0x28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200000f6 	.word	0x200000f6
 800351c:	1fff75e0 	.word	0x1fff75e0
 8003520:	03fffc00 	.word	0x03fffc00
 8003524:	200000f4 	.word	0x200000f4
 8003528:	20000008 	.word	0x20000008

0800352c <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 800352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003530:	b08b      	sub	sp, #44	@ 0x2c
 8003532:	af00      	add	r7, sp, #0
 8003534:	4603      	mov	r3, r0
 8003536:	6139      	str	r1, [r7, #16]
 8003538:	82fb      	strh	r3, [r7, #22]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 800353e:	4b44      	ldr	r3, [pc, #272]	@ (8003650 <VerifyPagesFullWriteVariable+0x124>)
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	2bfb      	cmp	r3, #251	@ 0xfb
 8003544:	d901      	bls.n	800354a <VerifyPagesFullWriteVariable+0x1e>
  {
    return EE_PAGE_FULL;
 8003546:	2312      	movs	r3, #18
 8003548:	e07c      	b.n	8003644 <VerifyPagesFullWriteVariable+0x118>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 800354a:	2001      	movs	r0, #1
 800354c:	f7ff fbae 	bl	8002cac <FindPage>
 8003550:	6238      	str	r0, [r7, #32]
  uint32_t activepageaddress = 0U;
 8003552:	2300      	movs	r3, #0
 8003554:	61fb      	str	r3, [r7, #28]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d101      	bne.n	8003562 <VerifyPagesFullWriteVariable+0x36>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 800355e:	2303      	movs	r3, #3
 8003560:	e070      	b.n	8003644 <VerifyPagesFullWriteVariable+0x118>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003568:	02d9      	lsls	r1, r3, #11
 800356a:	4b3a      	ldr	r3, [pc, #232]	@ (8003654 <VerifyPagesFullWriteVariable+0x128>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003574:	4293      	cmp	r3, r2
 8003576:	d005      	beq.n	8003584 <VerifyPagesFullWriteVariable+0x58>
 8003578:	4b36      	ldr	r3, [pc, #216]	@ (8003654 <VerifyPagesFullWriteVariable+0x128>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	029a      	lsls	r2, r3, #10
 800357e:	4b36      	ldr	r3, [pc, #216]	@ (8003658 <VerifyPagesFullWriteVariable+0x12c>)
 8003580:	4013      	ands	r3, r2
 8003582:	e001      	b.n	8003588 <VerifyPagesFullWriteVariable+0x5c>
 8003584:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003588:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800358c:	fbb2 f0f3 	udiv	r0, r2, r3
 8003590:	4b30      	ldr	r3, [pc, #192]	@ (8003654 <VerifyPagesFullWriteVariable+0x128>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800359a:	4293      	cmp	r3, r2
 800359c:	d005      	beq.n	80035aa <VerifyPagesFullWriteVariable+0x7e>
 800359e:	4b2d      	ldr	r3, [pc, #180]	@ (8003654 <VerifyPagesFullWriteVariable+0x128>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	029a      	lsls	r2, r3, #10
 80035a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003658 <VerifyPagesFullWriteVariable+0x12c>)
 80035a6:	4013      	ands	r3, r2
 80035a8:	e001      	b.n	80035ae <VerifyPagesFullWriteVariable+0x82>
 80035aa:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80035ae:	fb00 f303 	mul.w	r3, r0, r3
 80035b2:	440b      	add	r3, r1
 80035b4:	61fb      	str	r3, [r7, #28]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <VerifyPagesFullWriteVariable+0x9c>
 80035bc:	8afb      	ldrh	r3, [r7, #22]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <VerifyPagesFullWriteVariable+0x9c>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c6:	e006      	b.n	80035d6 <VerifyPagesFullWriteVariable+0xaa>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 80035c8:	8afb      	ldrh	r3, [r7, #22]
 80035ca:	4619      	mov	r1, r3
 80035cc:	6938      	ldr	r0, [r7, #16]
 80035ce:	f000 f9cf 	bl	8003970 <CalculateCrc>
 80035d2:	4603      	mov	r3, r0
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
    return EE_WRITE_ERROR;
  }
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 80035d6:	4b21      	ldr	r3, [pc, #132]	@ (800365c <VerifyPagesFullWriteVariable+0x130>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	18d0      	adds	r0, r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	2200      	movs	r2, #0
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	60fa      	str	r2, [r7, #12]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	000b      	movs	r3, r1
 80035f2:	2200      	movs	r2, #0
 80035f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035f6:	0409      	lsls	r1, r1, #16
 80035f8:	2600      	movs	r6, #0
 80035fa:	468a      	mov	sl, r1
 80035fc:	46b3      	mov	fp, r6
 80035fe:	ea42 040a 	orr.w	r4, r2, sl
 8003602:	ea43 050b 	orr.w	r5, r3, fp
 8003606:	8afb      	ldrh	r3, [r7, #22]
 8003608:	2200      	movs	r2, #0
 800360a:	4698      	mov	r8, r3
 800360c:	4691      	mov	r9, r2
 800360e:	ea44 0308 	orr.w	r3, r4, r8
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	ea45 0309 	orr.w	r3, r5, r9
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800361e:	f000 f9c3 	bl	80039a8 <FI_WriteDoubleWord>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <VerifyPagesFullWriteVariable+0x100>
  {
    return EE_WRITE_ERROR;
 8003628:	2302      	movs	r3, #2
 800362a:	e00b      	b.n	8003644 <VerifyPagesFullWriteVariable+0x118>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 800362c:	4b0b      	ldr	r3, [pc, #44]	@ (800365c <VerifyPagesFullWriteVariable+0x130>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3308      	adds	r3, #8
 8003632:	4a0a      	ldr	r2, [pc, #40]	@ (800365c <VerifyPagesFullWriteVariable+0x130>)
 8003634:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <VerifyPagesFullWriteVariable+0x124>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	3301      	adds	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <VerifyPagesFullWriteVariable+0x124>)
 8003640:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	372c      	adds	r7, #44	@ 0x2c
 8003648:	46bd      	mov	sp, r7
 800364a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800364e:	bf00      	nop
 8003650:	200000f4 	.word	0x200000f4
 8003654:	1fff75e0 	.word	0x1fff75e0
 8003658:	03fffc00 	.word	0x03fffc00
 800365c:	20000008 	.word	0x20000008

08003660 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	2300      	movs	r3, #0
 8003672:	613b      	str	r3, [r7, #16]
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	2300      	movs	r3, #0
 800367a:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003682:	02da      	lsls	r2, r3, #11
 8003684:	4b7c      	ldr	r3, [pc, #496]	@ (8003878 <SetPageState+0x218>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800368e:	428b      	cmp	r3, r1
 8003690:	d005      	beq.n	800369e <SetPageState+0x3e>
 8003692:	4b79      	ldr	r3, [pc, #484]	@ (8003878 <SetPageState+0x218>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	0299      	lsls	r1, r3, #10
 8003698:	4b78      	ldr	r3, [pc, #480]	@ (800387c <SetPageState+0x21c>)
 800369a:	400b      	ands	r3, r1
 800369c:	e001      	b.n	80036a2 <SetPageState+0x42>
 800369e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80036a2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80036a6:	fbb1 f1f3 	udiv	r1, r1, r3
 80036aa:	4b73      	ldr	r3, [pc, #460]	@ (8003878 <SetPageState+0x218>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80036b4:	4283      	cmp	r3, r0
 80036b6:	d005      	beq.n	80036c4 <SetPageState+0x64>
 80036b8:	4b6f      	ldr	r3, [pc, #444]	@ (8003878 <SetPageState+0x218>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	0298      	lsls	r0, r3, #10
 80036be:	4b6f      	ldr	r3, [pc, #444]	@ (800387c <SetPageState+0x21c>)
 80036c0:	4003      	ands	r3, r0
 80036c2:	e001      	b.n	80036c8 <SetPageState+0x68>
 80036c4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80036d6:	02da      	lsls	r2, r3, #11
 80036d8:	4b67      	ldr	r3, [pc, #412]	@ (8003878 <SetPageState+0x218>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80036e2:	428b      	cmp	r3, r1
 80036e4:	d005      	beq.n	80036f2 <SetPageState+0x92>
 80036e6:	4b64      	ldr	r3, [pc, #400]	@ (8003878 <SetPageState+0x218>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	0299      	lsls	r1, r3, #10
 80036ec:	4b63      	ldr	r3, [pc, #396]	@ (800387c <SetPageState+0x21c>)
 80036ee:	400b      	ands	r3, r1
 80036f0:	e001      	b.n	80036f6 <SetPageState+0x96>
 80036f2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80036f6:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80036fa:	fbb1 f1f3 	udiv	r1, r1, r3
 80036fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003878 <SetPageState+0x218>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	b29b      	uxth	r3, r3
 8003704:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003708:	4283      	cmp	r3, r0
 800370a:	d005      	beq.n	8003718 <SetPageState+0xb8>
 800370c:	4b5a      	ldr	r3, [pc, #360]	@ (8003878 <SetPageState+0x218>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0298      	lsls	r0, r3, #10
 8003712:	4b5a      	ldr	r3, [pc, #360]	@ (800387c <SetPageState+0x21c>)
 8003714:	4003      	ands	r3, r0
 8003716:	e001      	b.n	800371c <SetPageState+0xbc>
 8003718:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	3308      	adds	r3, #8
 8003724:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800372c:	02da      	lsls	r2, r3, #11
 800372e:	4b52      	ldr	r3, [pc, #328]	@ (8003878 <SetPageState+0x218>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003738:	428b      	cmp	r3, r1
 800373a:	d005      	beq.n	8003748 <SetPageState+0xe8>
 800373c:	4b4e      	ldr	r3, [pc, #312]	@ (8003878 <SetPageState+0x218>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	0299      	lsls	r1, r3, #10
 8003742:	4b4e      	ldr	r3, [pc, #312]	@ (800387c <SetPageState+0x21c>)
 8003744:	400b      	ands	r3, r1
 8003746:	e001      	b.n	800374c <SetPageState+0xec>
 8003748:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800374c:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8003750:	fbb1 f1f3 	udiv	r1, r1, r3
 8003754:	4b48      	ldr	r3, [pc, #288]	@ (8003878 <SetPageState+0x218>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	b29b      	uxth	r3, r3
 800375a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800375e:	4283      	cmp	r3, r0
 8003760:	d005      	beq.n	800376e <SetPageState+0x10e>
 8003762:	4b45      	ldr	r3, [pc, #276]	@ (8003878 <SetPageState+0x218>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	0298      	lsls	r0, r3, #10
 8003768:	4b44      	ldr	r3, [pc, #272]	@ (800387c <SetPageState+0x21c>)
 800376a:	4003      	ands	r3, r0
 800376c:	e001      	b.n	8003772 <SetPageState+0x112>
 800376e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	4413      	add	r3, r2
 8003778:	3310      	adds	r3, #16
 800377a:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003782:	02da      	lsls	r2, r3, #11
 8003784:	4b3c      	ldr	r3, [pc, #240]	@ (8003878 <SetPageState+0x218>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	b29b      	uxth	r3, r3
 800378a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800378e:	428b      	cmp	r3, r1
 8003790:	d005      	beq.n	800379e <SetPageState+0x13e>
 8003792:	4b39      	ldr	r3, [pc, #228]	@ (8003878 <SetPageState+0x218>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	0299      	lsls	r1, r3, #10
 8003798:	4b38      	ldr	r3, [pc, #224]	@ (800387c <SetPageState+0x21c>)
 800379a:	400b      	ands	r3, r1
 800379c:	e001      	b.n	80037a2 <SetPageState+0x142>
 800379e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80037a2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80037a6:	fbb1 f1f3 	udiv	r1, r1, r3
 80037aa:	4b33      	ldr	r3, [pc, #204]	@ (8003878 <SetPageState+0x218>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80037b4:	4283      	cmp	r3, r0
 80037b6:	d005      	beq.n	80037c4 <SetPageState+0x164>
 80037b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003878 <SetPageState+0x218>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0298      	lsls	r0, r3, #10
 80037be:	4b2f      	ldr	r3, [pc, #188]	@ (800387c <SetPageState+0x21c>)
 80037c0:	4003      	ands	r3, r0
 80037c2:	e001      	b.n	80037c8 <SetPageState+0x168>
 80037c4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	4413      	add	r3, r2
 80037ce:	3318      	adds	r3, #24
 80037d0:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d844      	bhi.n	8003864 <SetPageState+0x204>
 80037da:	a201      	add	r2, pc, #4	@ (adr r2, 80037e0 <SetPageState+0x180>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	080037f1 	.word	0x080037f1
 80037e4:	08003813 	.word	0x08003813
 80037e8:	08003835 	.word	0x08003835
 80037ec:	0800384d 	.word	0x0800384d
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 80037f0:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 80037f4:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 80037f8:	6978      	ldr	r0, [r7, #20]
 80037fa:	f000 f8d5 	bl	80039a8 <FI_WriteDoubleWord>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <SetPageState+0x1a8>
      {
        return EE_WRITE_ERROR;
 8003804:	2302      	movs	r3, #2
 8003806:	e033      	b.n	8003870 <SetPageState+0x210>
      }
      ubCurrentActivePage = Page;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	b2da      	uxtb	r2, r3
 800380c:	4b1c      	ldr	r3, [pc, #112]	@ (8003880 <SetPageState+0x220>)
 800380e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8003810:	e02d      	b.n	800386e <SetPageState+0x20e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 8003812:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8003816:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 800381a:	6938      	ldr	r0, [r7, #16]
 800381c:	f000 f8c4 	bl	80039a8 <FI_WriteDoubleWord>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <SetPageState+0x1ca>
      {
        return EE_WRITE_ERROR;
 8003826:	2302      	movs	r3, #2
 8003828:	e022      	b.n	8003870 <SetPageState+0x210>
      }
      ubCurrentActivePage = Page;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	b2da      	uxtb	r2, r3
 800382e:	4b14      	ldr	r3, [pc, #80]	@ (8003880 <SetPageState+0x220>)
 8003830:	701a      	strb	r2, [r3, #0]
    }
    break;
 8003832:	e01c      	b.n	800386e <SetPageState+0x20e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 8003834:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8003838:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f8b3 	bl	80039a8 <FI_WriteDoubleWord>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00f      	beq.n	8003868 <SetPageState+0x208>
      {
        return EE_WRITE_ERROR;
 8003848:	2302      	movs	r3, #2
 800384a:	e011      	b.n	8003870 <SetPageState+0x210>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 800384c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8003850:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8003854:	68b8      	ldr	r0, [r7, #8]
 8003856:	f000 f8a7 	bl	80039a8 <FI_WriteDoubleWord>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <SetPageState+0x20c>
      {
        return EE_WRITE_ERROR;
 8003860:	2302      	movs	r3, #2
 8003862:	e005      	b.n	8003870 <SetPageState+0x210>
      }
    }
    break;
  default:
    break;
 8003864:	bf00      	nop
 8003866:	e002      	b.n	800386e <SetPageState+0x20e>
    break;
 8003868:	bf00      	nop
 800386a:	e000      	b.n	800386e <SetPageState+0x20e>
    break;
 800386c:	bf00      	nop
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	1fff75e0 	.word	0x1fff75e0
 800387c:	03fffc00 	.word	0x03fffc00
 8003880:	200000f6 	.word	0x200000f6

08003884 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 8003884:	b480      	push	{r7}
 8003886:	b08b      	sub	sp, #44	@ 0x2c
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	3308      	adds	r3, #8
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3310      	adds	r3, #16
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3318      	adds	r3, #24
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 80038ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f2:	bf08      	it	eq
 80038f4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80038f8:	d001      	beq.n	80038fe <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 80038fa:	2304      	movs	r3, #4
 80038fc:	e01e      	b.n	800393c <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 80038fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003906:	bf08      	it	eq
 8003908:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800390c:	d001      	beq.n	8003912 <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 800390e:	2303      	movs	r3, #3
 8003910:	e014      	b.n	800393c <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 8003912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	bf08      	it	eq
 800391c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8003920:	d001      	beq.n	8003926 <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 8003922:	2302      	movs	r3, #2
 8003924:	e00a      	b.n	800393c <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 8003926:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	bf08      	it	eq
 8003930:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8003934:	d001      	beq.n	800393a <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	372c      	adds	r7, #44	@ 0x2c
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800394c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003950:	f7fd febc 	bl	80016cc <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 8003954:	f248 0105 	movw	r1, #32773	@ 0x8005
 8003958:	4804      	ldr	r0, [pc, #16]	@ (800396c <ConfigureCrc+0x24>)
 800395a:	f7fd fe7c 	bl	8001656 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 800395e:	2108      	movs	r1, #8
 8003960:	4802      	ldr	r0, [pc, #8]	@ (800396c <ConfigureCrc+0x24>)
 8003962:	f7fd fe65 	bl	8001630 <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40023000 	.word	0x40023000

08003970 <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 800397c:	4809      	ldr	r0, [pc, #36]	@ (80039a4 <CalculateCrc+0x34>)
 800397e:	f7fd fe47 	bl	8001610 <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4807      	ldr	r0, [pc, #28]	@ (80039a4 <CalculateCrc+0x34>)
 8003986:	f7fd fe74 	bl	8001672 <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 800398a:	887b      	ldrh	r3, [r7, #2]
 800398c:	4619      	mov	r1, r3
 800398e:	4805      	ldr	r0, [pc, #20]	@ (80039a4 <CalculateCrc+0x34>)
 8003990:	f7fd fe7d 	bl	800168e <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 8003994:	4803      	ldr	r0, [pc, #12]	@ (80039a4 <CalculateCrc+0x34>)
 8003996:	f7fd fe8b 	bl	80016b0 <LL_CRC_ReadData16>
 800399a:	4603      	mov	r3, r0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40023000 	.word	0x40023000

080039a8 <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 80039b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039b8:	68f9      	ldr	r1, [r7, #12]
 80039ba:	2000      	movs	r0, #0
 80039bc:	f000 fff6 	bl	80049ac <HAL_FLASH_Program>
 80039c0:	4603      	mov	r3, r0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b08a      	sub	sp, #40	@ 0x28
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t bank = FLASH_BANK_1, page_error = 0U;
 80039da:	2301      	movs	r3, #1
 80039dc:	623b      	str	r3, [r7, #32]
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]

#if defined(FLASH_BANK_2)
  bank = GetBankNumber(PAGE_ADDRESS(Page));
#endif

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = NbPages;
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	61fb      	str	r3, [r7, #28]
  s_eraseinit.Page        = Page;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	61bb      	str	r3, [r7, #24]
  s_eraseinit.Banks       = bank;
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	617b      	str	r3, [r7, #20]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 80039f2:	f107 020c 	add.w	r2, r7, #12
 80039f6:	f107 0310 	add.w	r3, r7, #16
 80039fa:	4611      	mov	r1, r2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 f915 	bl	8004c2c <HAL_FLASHEx_Erase>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <FI_PageErase+0x42>
  {
    status = EE_ERASE_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }
  return status;
 8003a0c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3728      	adds	r7, #40	@ 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a58 <FI_CacheFlush+0x40>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a0d      	ldr	r2, [pc, #52]	@ (8003a58 <FI_CacheFlush+0x40>)
 8003a22:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a26:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <FI_CacheFlush+0x40>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a58 <FI_CacheFlush+0x40>)
 8003a2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	4b08      	ldr	r3, [pc, #32]	@ (8003a58 <FI_CacheFlush+0x40>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a07      	ldr	r2, [pc, #28]	@ (8003a58 <FI_CacheFlush+0x40>)
 8003a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a3e:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a40:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <FI_CacheFlush+0x40>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a04      	ldr	r2, [pc, #16]	@ (8003a58 <FI_CacheFlush+0x40>)
 8003a46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a4a:	6013      	str	r3, [r2, #0]
}
 8003a4c:	bf00      	nop
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40022000 	.word	0x40022000

08003a5c <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 8003a60:	2300      	movs	r3, #0
#endif
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a72:	f107 030c 	add.w	r3, r7, #12
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	609a      	str	r2, [r3, #8]
 8003a7e:	60da      	str	r2, [r3, #12]
 8003a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a82:	4b35      	ldr	r3, [pc, #212]	@ (8003b58 <MX_GPIO_Init+0xec>)
 8003a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a86:	4a34      	ldr	r2, [pc, #208]	@ (8003b58 <MX_GPIO_Init+0xec>)
 8003a88:	f043 0304 	orr.w	r3, r3, #4
 8003a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a8e:	4b32      	ldr	r3, [pc, #200]	@ (8003b58 <MX_GPIO_Init+0xec>)
 8003a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a92:	f003 0304 	and.w	r3, r3, #4
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b58 <MX_GPIO_Init+0xec>)
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8003b58 <MX_GPIO_Init+0xec>)
 8003aa0:	f043 0301 	orr.w	r3, r3, #1
 8003aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8003b58 <MX_GPIO_Init+0xec>)
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab2:	4b29      	ldr	r3, [pc, #164]	@ (8003b58 <MX_GPIO_Init+0xec>)
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab6:	4a28      	ldr	r2, [pc, #160]	@ (8003b58 <MX_GPIO_Init+0xec>)
 8003ab8:	f043 0302 	orr.w	r3, r3, #2
 8003abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003abe:	4b26      	ldr	r3, [pc, #152]	@ (8003b58 <MX_GPIO_Init+0xec>)
 8003ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2102      	movs	r1, #2
 8003ace:	4823      	ldr	r0, [pc, #140]	@ (8003b5c <MX_GPIO_Init+0xf0>)
 8003ad0:	f001 fb3c 	bl	800514c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Red_Adjustment_Pin|Blue_Calibration_Pin|Yellow_Minus_Pin|Green_Plus_Pin;
 8003ad4:	f640 130a 	movw	r3, #2314	@ 0x90a
 8003ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ada:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae4:	f107 030c 	add.w	r3, r7, #12
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aee:	f001 f9c3 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Red_LED_Pin;
 8003af2:	2302      	movs	r3, #2
 8003af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af6:	2301      	movs	r3, #1
 8003af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Red_LED_GPIO_Port, &GPIO_InitStruct);
 8003b02:	f107 030c 	add.w	r3, r7, #12
 8003b06:	4619      	mov	r1, r3
 8003b08:	4814      	ldr	r0, [pc, #80]	@ (8003b5c <MX_GPIO_Init+0xf0>)
 8003b0a:	f001 f9b5 	bl	8004e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003b0e:	2200      	movs	r2, #0
 8003b10:	2100      	movs	r1, #0
 8003b12:	2007      	movs	r0, #7
 8003b14:	f000 fe21 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003b18:	2007      	movs	r0, #7
 8003b1a:	f000 fe3a 	bl	8004792 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2100      	movs	r1, #0
 8003b22:	2009      	movs	r0, #9
 8003b24:	f000 fe19 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003b28:	2009      	movs	r0, #9
 8003b2a:	f000 fe32 	bl	8004792 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003b2e:	2200      	movs	r2, #0
 8003b30:	2100      	movs	r1, #0
 8003b32:	2017      	movs	r0, #23
 8003b34:	f000 fe11 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b38:	2017      	movs	r0, #23
 8003b3a:	f000 fe2a 	bl	8004792 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2100      	movs	r1, #0
 8003b42:	2028      	movs	r0, #40	@ 0x28
 8003b44:	f000 fe09 	bl	800475a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b48:	2028      	movs	r0, #40	@ 0x28
 8003b4a:	f000 fe22 	bl	8004792 <HAL_NVIC_EnableIRQ>

}
 8003b4e:	bf00      	nop
 8003b50:	3720      	adds	r7, #32
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	48000400 	.word	0x48000400

08003b60 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
// debounce and button callback
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	80fb      	strh	r3, [r7, #6]
	uint32_t current = HAL_GetTick();
 8003b6a:	f000 fceb 	bl	8004544 <HAL_GetTick>
 8003b6e:	60f8      	str	r0, [r7, #12]
	if(GPIO_Pin == Red_Adjustment_Pin)
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d10a      	bne.n	8003b8c <HAL_GPIO_EXTI_Callback+0x2c>
	{
		if (current - last_debounce_Red > debounce_delay)
 8003b76:	4b1d      	ldr	r3, [pc, #116]	@ (8003bec <HAL_GPIO_EXTI_Callback+0x8c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2bc8      	cmp	r3, #200	@ 0xc8
 8003b80:	d904      	bls.n	8003b8c <HAL_GPIO_EXTI_Callback+0x2c>
		{
			last_debounce_Red = current;
 8003b82:	4a1a      	ldr	r2, [pc, #104]	@ (8003bec <HAL_GPIO_EXTI_Callback+0x8c>)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6013      	str	r3, [r2, #0]
			Adjustment();
 8003b88:	f7fc ff96 	bl	8000ab8 <Adjustment>
		}
	}
	if(GPIO_Pin == Blue_Calibration_Pin)
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d10a      	bne.n	8003ba8 <HAL_GPIO_EXTI_Callback+0x48>
	{
		if (current - last_debounce_Blue > debounce_delay)
 8003b92:	4b17      	ldr	r3, [pc, #92]	@ (8003bf0 <HAL_GPIO_EXTI_Callback+0x90>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2bc8      	cmp	r3, #200	@ 0xc8
 8003b9c:	d904      	bls.n	8003ba8 <HAL_GPIO_EXTI_Callback+0x48>
		{
			last_debounce_Blue = current;
 8003b9e:	4a14      	ldr	r2, [pc, #80]	@ (8003bf0 <HAL_GPIO_EXTI_Callback+0x90>)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6013      	str	r3, [r2, #0]
			Calibration();
 8003ba4:	f7fc fff8 	bl	8000b98 <Calibration>
		}
	}
	if(GPIO_Pin == Green_Plus_Pin)
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bae:	d10a      	bne.n	8003bc6 <HAL_GPIO_EXTI_Callback+0x66>
	{
		if (current - last_debounce_Green > debounce_delay)
 8003bb0:	4b10      	ldr	r3, [pc, #64]	@ (8003bf4 <HAL_GPIO_EXTI_Callback+0x94>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2bc8      	cmp	r3, #200	@ 0xc8
 8003bba:	d904      	bls.n	8003bc6 <HAL_GPIO_EXTI_Callback+0x66>
		{
			last_debounce_Green = current;
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf4 <HAL_GPIO_EXTI_Callback+0x94>)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6013      	str	r3, [r2, #0]
			Plus();
 8003bc2:	f7fd f8b9 	bl	8000d38 <Plus>
		}
	}
	if(GPIO_Pin == Yellow_Minus_Pin)
 8003bc6:	88fb      	ldrh	r3, [r7, #6]
 8003bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bcc:	d10a      	bne.n	8003be4 <HAL_GPIO_EXTI_Callback+0x84>
	{
		if (current - last_debounce_Yellow > debounce_delay)
 8003bce:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf8 <HAL_GPIO_EXTI_Callback+0x98>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2bc8      	cmp	r3, #200	@ 0xc8
 8003bd8:	d904      	bls.n	8003be4 <HAL_GPIO_EXTI_Callback+0x84>
		{
			last_debounce_Yellow = current;
 8003bda:	4a07      	ldr	r2, [pc, #28]	@ (8003bf8 <HAL_GPIO_EXTI_Callback+0x98>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6013      	str	r3, [r2, #0]
			Minus();
 8003be0:	f7fd f998 	bl	8000f14 <Minus>
		}
	}
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000100 	.word	0x20000100
 8003bf0:	20000104 	.word	0x20000104
 8003bf4:	20000108 	.word	0x20000108
 8003bf8:	2000010c 	.word	0x2000010c

08003bfc <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003c00:	4b1b      	ldr	r3, [pc, #108]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c02:	4a1c      	ldr	r2, [pc, #112]	@ (8003c74 <MX_I2C3_Init+0x78>)
 8003c04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B07CB4;
 8003c06:	4b1a      	ldr	r3, [pc, #104]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c08:	4a1b      	ldr	r2, [pc, #108]	@ (8003c78 <MX_I2C3_Init+0x7c>)
 8003c0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003c0c:	4b18      	ldr	r3, [pc, #96]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c12:	4b17      	ldr	r3, [pc, #92]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c14:	2201      	movs	r2, #1
 8003c16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c18:	4b15      	ldr	r3, [pc, #84]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003c1e:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003c24:	4b12      	ldr	r3, [pc, #72]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c2a:	4b11      	ldr	r3, [pc, #68]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c30:	4b0f      	ldr	r3, [pc, #60]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003c36:	480e      	ldr	r0, [pc, #56]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c38:	f001 fad2 	bl	80051e0 <HAL_I2C_Init>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003c42:	f000 f92b 	bl	8003e9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c46:	2100      	movs	r1, #0
 8003c48:	4809      	ldr	r0, [pc, #36]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c4a:	f001 fe97 	bl	800597c <HAL_I2CEx_ConfigAnalogFilter>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003c54:	f000 f922 	bl	8003e9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003c58:	2100      	movs	r1, #0
 8003c5a:	4805      	ldr	r0, [pc, #20]	@ (8003c70 <MX_I2C3_Init+0x74>)
 8003c5c:	f001 fed9 	bl	8005a12 <HAL_I2CEx_ConfigDigitalFilter>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003c66:	f000 f919 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003c6a:	bf00      	nop
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000110 	.word	0x20000110
 8003c74:	40005c00 	.word	0x40005c00
 8003c78:	00b07cb4 	.word	0x00b07cb4

08003c7c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b0a0      	sub	sp, #128	@ 0x80
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c94:	f107 0318 	add.w	r3, r7, #24
 8003c98:	2254      	movs	r2, #84	@ 0x54
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f004 f9d5 	bl	800804c <memset>
  if(i2cHandle->Instance==I2C3)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2d      	ldr	r2, [pc, #180]	@ (8003d5c <HAL_I2C_MspInit+0xe0>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d153      	bne.n	8003d54 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003cac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003cb0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cb6:	f107 0318 	add.w	r3, r7, #24
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f002 fda2 	bl	8006804 <HAL_RCCEx_PeriphCLKConfig>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003cc6:	f000 f8e9 	bl	8003e9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cca:	4b25      	ldr	r3, [pc, #148]	@ (8003d60 <HAL_I2C_MspInit+0xe4>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cce:	4a24      	ldr	r2, [pc, #144]	@ (8003d60 <HAL_I2C_MspInit+0xe4>)
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cd6:	4b22      	ldr	r3, [pc, #136]	@ (8003d60 <HAL_I2C_MspInit+0xe4>)
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8003d60 <HAL_I2C_MspInit+0xe4>)
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d60 <HAL_I2C_MspInit+0xe4>)
 8003ce8:	f043 0302 	orr.w	r3, r3, #2
 8003cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cee:	4b1c      	ldr	r3, [pc, #112]	@ (8003d60 <HAL_I2C_MspInit+0xe4>)
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003cfa:	2380      	movs	r3, #128	@ 0x80
 8003cfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cfe:	2312      	movs	r3, #18
 8003d00:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d06:	2303      	movs	r3, #3
 8003d08:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003d12:	4619      	mov	r1, r3
 8003d14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d18:	f001 f8ae 	bl	8004e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d20:	2312      	movs	r3, #18
 8003d22:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d30:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003d34:	4619      	mov	r1, r3
 8003d36:	480b      	ldr	r0, [pc, #44]	@ (8003d64 <HAL_I2C_MspInit+0xe8>)
 8003d38:	f001 f89e 	bl	8004e78 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003d3c:	4b08      	ldr	r3, [pc, #32]	@ (8003d60 <HAL_I2C_MspInit+0xe4>)
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	4a07      	ldr	r2, [pc, #28]	@ (8003d60 <HAL_I2C_MspInit+0xe4>)
 8003d42:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d46:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d48:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <HAL_I2C_MspInit+0xe4>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003d54:	bf00      	nop
 8003d56:	3780      	adds	r7, #128	@ 0x80
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40005c00 	.word	0x40005c00
 8003d60:	40021000 	.word	0x40021000
 8003d64:	48000400 	.word	0x48000400

08003d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d6e:	f000 fb80 	bl	8004472 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d72:	f000 f831 	bl	8003dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d76:	f7ff fe79 	bl	8003a6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003d7a:	f000 fab7 	bl	80042ec <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8003d7e:	f7ff ff3d 	bl	8003bfc <MX_I2C3_Init>
  MX_TIM1_Init();
 8003d82:	f000 f963 	bl	800404c <MX_TIM1_Init>
  MX_TIM2_Init();
 8003d86:	f000 f9b5 	bl	80040f4 <MX_TIM2_Init>
  MX_TIM15_Init();
 8003d8a:	f000 fa01 	bl	8004190 <MX_TIM15_Init>
  MX_CRC_Init();
 8003d8e:	f7fd fbfd 	bl	800158c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  set_time(24, 12, 5, 4, 19, 25, 0, 1); // Example: 17th November 2024, 10:00:00 AM
 8003d92:	2301      	movs	r3, #1
 8003d94:	9303      	str	r3, [sp, #12]
 8003d96:	2300      	movs	r3, #0
 8003d98:	9302      	str	r3, [sp, #8]
 8003d9a:	2319      	movs	r3, #25
 8003d9c:	9301      	str	r3, [sp, #4]
 8003d9e:	2313      	movs	r3, #19
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2304      	movs	r3, #4
 8003da4:	2205      	movs	r2, #5
 8003da6:	210c      	movs	r1, #12
 8003da8:	2018      	movs	r0, #24
 8003daa:	f7fc fc29 	bl	8000600 <set_time>
  LCD_Init();              // Initialize the LCD
 8003dae:	f7fd fbb9 	bl	8001524 <LCD_Init>
  HAL_Delay(100);          // Wait for LCD to be ready
 8003db2:	2064      	movs	r0, #100	@ 0x64
 8003db4:	f000 fbd2 	bl	800455c <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003db8:	b672      	cpsid	i
}
 8003dba:	bf00      	nop
  __disable_irq();  // Disable all interrupts
  EEPROM_Init();
 8003dbc:	f7fd fa64 	bl	8001288 <EEPROM_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8003dc0:	b662      	cpsie	i
}
 8003dc2:	bf00      	nop
  __enable_irq();   // Re-enable all interrupts
  PPM_Init();
 8003dc4:	f7fd f994 	bl	80010f0 <PPM_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8003dc8:	4802      	ldr	r0, [pc, #8]	@ (8003dd4 <main+0x6c>)
 8003dca:	f003 f86b 	bl	8006ea4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003dce:	bf00      	nop
 8003dd0:	e7fd      	b.n	8003dce <main+0x66>
 8003dd2:	bf00      	nop
 8003dd4:	200001b4 	.word	0x200001b4

08003dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b096      	sub	sp, #88	@ 0x58
 8003ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003dde:	f107 0314 	add.w	r3, r7, #20
 8003de2:	2244      	movs	r2, #68	@ 0x44
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f004 f930 	bl	800804c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003dec:	463b      	mov	r3, r7
 8003dee:	2200      	movs	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	60da      	str	r2, [r3, #12]
 8003df8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003dfa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003dfe:	f001 fe73 	bl	8005ae8 <HAL_PWREx_ControlVoltageScaling>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003e08:	f000 f848 	bl	8003e9c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003e0c:	f001 fe4e 	bl	8005aac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003e10:	4b21      	ldr	r3, [pc, #132]	@ (8003e98 <SystemClock_Config+0xc0>)
 8003e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e16:	4a20      	ldr	r2, [pc, #128]	@ (8003e98 <SystemClock_Config+0xc0>)
 8003e18:	f023 0318 	bic.w	r3, r3, #24
 8003e1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8003e20:	2314      	movs	r3, #20
 8003e22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003e24:	2301      	movs	r3, #1
 8003e26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003e30:	2360      	movs	r3, #96	@ 0x60
 8003e32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e34:	2302      	movs	r3, #2
 8003e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8003e40:	2310      	movs	r3, #16
 8003e42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003e44:	2307      	movs	r3, #7
 8003e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003e48:	2302      	movs	r3, #2
 8003e4a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e50:	f107 0314 	add.w	r3, r7, #20
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 fe9d 	bl	8005b94 <HAL_RCC_OscConfig>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003e60:	f000 f81c 	bl	8003e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e64:	230f      	movs	r3, #15
 8003e66:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e74:	2300      	movs	r3, #0
 8003e76:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003e78:	463b      	mov	r3, r7
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f002 fa9d 	bl	80063bc <HAL_RCC_ClockConfig>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003e88:	f000 f808 	bl	8003e9c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003e8c:	f002 feb0 	bl	8006bf0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003e90:	bf00      	nop
 8003e92:	3758      	adds	r7, #88	@ 0x58
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000

08003e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ea0:	b672      	cpsid	i
}
 8003ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <Error_Handler+0x8>

08003ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eae:	4b0f      	ldr	r3, [pc, #60]	@ (8003eec <HAL_MspInit+0x44>)
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8003eec <HAL_MspInit+0x44>)
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003eba:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <HAL_MspInit+0x44>)
 8003ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <HAL_MspInit+0x44>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eca:	4a08      	ldr	r2, [pc, #32]	@ (8003eec <HAL_MspInit+0x44>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ed2:	4b06      	ldr	r3, [pc, #24]	@ (8003eec <HAL_MspInit+0x44>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000

08003ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ef4:	bf00      	nop
 8003ef6:	e7fd      	b.n	8003ef4 <NMI_Handler+0x4>

08003ef8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003efc:	bf00      	nop
 8003efe:	e7fd      	b.n	8003efc <HardFault_Handler+0x4>

08003f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f04:	bf00      	nop
 8003f06:	e7fd      	b.n	8003f04 <MemManage_Handler+0x4>

08003f08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f0c:	bf00      	nop
 8003f0e:	e7fd      	b.n	8003f0c <BusFault_Handler+0x4>

08003f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f14:	bf00      	nop
 8003f16:	e7fd      	b.n	8003f14 <UsageFault_Handler+0x4>

08003f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f2a:	bf00      	nop
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f46:	f000 fae9 	bl	800451c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Red_Adjustment_Pin);
 8003f52:	2002      	movs	r0, #2
 8003f54:	f001 f92c 	bl	80051b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blue_Calibration_Pin);
 8003f60:	2008      	movs	r0, #8
 8003f62:	f001 f925 	bl	80051b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Yellow_Minus_Pin);
 8003f6e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003f72:	f001 f91d 	bl	80051b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f80:	4803      	ldr	r0, [pc, #12]	@ (8003f90 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8003f82:	f003 f812 	bl	8006faa <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8003f86:	4803      	ldr	r0, [pc, #12]	@ (8003f94 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8003f88:	f003 f80f 	bl	8006faa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003f8c:	bf00      	nop
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	20000168 	.word	0x20000168
 8003f94:	20000200 	.word	0x20000200

08003f98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f9c:	4802      	ldr	r0, [pc, #8]	@ (8003fa8 <TIM2_IRQHandler+0x10>)
 8003f9e:	f003 f804 	bl	8006faa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200001b4 	.word	0x200001b4

08003fac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Green_Plus_Pin);
 8003fb0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003fb4:	f001 f8fc 	bl	80051b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fc4:	4a14      	ldr	r2, [pc, #80]	@ (8004018 <_sbrk+0x5c>)
 8003fc6:	4b15      	ldr	r3, [pc, #84]	@ (800401c <_sbrk+0x60>)
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fd0:	4b13      	ldr	r3, [pc, #76]	@ (8004020 <_sbrk+0x64>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fd8:	4b11      	ldr	r3, [pc, #68]	@ (8004020 <_sbrk+0x64>)
 8003fda:	4a12      	ldr	r2, [pc, #72]	@ (8004024 <_sbrk+0x68>)
 8003fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fde:	4b10      	ldr	r3, [pc, #64]	@ (8004020 <_sbrk+0x64>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d207      	bcs.n	8003ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fec:	f004 f836 	bl	800805c <__errno>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	220c      	movs	r2, #12
 8003ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffa:	e009      	b.n	8004010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ffc:	4b08      	ldr	r3, [pc, #32]	@ (8004020 <_sbrk+0x64>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004002:	4b07      	ldr	r3, [pc, #28]	@ (8004020 <_sbrk+0x64>)
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	4a05      	ldr	r2, [pc, #20]	@ (8004020 <_sbrk+0x64>)
 800400c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800400e:	68fb      	ldr	r3, [r7, #12]
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20010000 	.word	0x20010000
 800401c:	00000400 	.word	0x00000400
 8004020:	20000164 	.word	0x20000164
 8004024:	20000420 	.word	0x20000420

08004028 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004028:	b480      	push	{r7}
 800402a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800402c:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <SystemInit+0x20>)
 800402e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004032:	4a05      	ldr	r2, [pc, #20]	@ (8004048 <SystemInit+0x20>)
 8004034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004052:	f107 0310 	add.w	r3, r7, #16
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	609a      	str	r2, [r3, #8]
 800405e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004060:	1d3b      	adds	r3, r7, #4
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	605a      	str	r2, [r3, #4]
 8004068:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800406a:	4b20      	ldr	r3, [pc, #128]	@ (80040ec <MX_TIM1_Init+0xa0>)
 800406c:	4a20      	ldr	r2, [pc, #128]	@ (80040f0 <MX_TIM1_Init+0xa4>)
 800406e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 640-1;
 8004070:	4b1e      	ldr	r3, [pc, #120]	@ (80040ec <MX_TIM1_Init+0xa0>)
 8004072:	f240 227f 	movw	r2, #639	@ 0x27f
 8004076:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004078:	4b1c      	ldr	r3, [pc, #112]	@ (80040ec <MX_TIM1_Init+0xa0>)
 800407a:	2200      	movs	r2, #0
 800407c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800407e:	4b1b      	ldr	r3, [pc, #108]	@ (80040ec <MX_TIM1_Init+0xa0>)
 8004080:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004084:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004086:	4b19      	ldr	r3, [pc, #100]	@ (80040ec <MX_TIM1_Init+0xa0>)
 8004088:	2200      	movs	r2, #0
 800408a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800408c:	4b17      	ldr	r3, [pc, #92]	@ (80040ec <MX_TIM1_Init+0xa0>)
 800408e:	2200      	movs	r2, #0
 8004090:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004092:	4b16      	ldr	r3, [pc, #88]	@ (80040ec <MX_TIM1_Init+0xa0>)
 8004094:	2200      	movs	r2, #0
 8004096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004098:	4814      	ldr	r0, [pc, #80]	@ (80040ec <MX_TIM1_Init+0xa0>)
 800409a:	f002 feab 	bl	8006df4 <HAL_TIM_Base_Init>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80040a4:	f7ff fefa 	bl	8003e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80040ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80040ae:	f107 0310 	add.w	r3, r7, #16
 80040b2:	4619      	mov	r1, r3
 80040b4:	480d      	ldr	r0, [pc, #52]	@ (80040ec <MX_TIM1_Init+0xa0>)
 80040b6:	f003 f87f 	bl	80071b8 <HAL_TIM_ConfigClockSource>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80040c0:	f7ff feec 	bl	8003e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040c4:	2300      	movs	r3, #0
 80040c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040d0:	1d3b      	adds	r3, r7, #4
 80040d2:	4619      	mov	r1, r3
 80040d4:	4805      	ldr	r0, [pc, #20]	@ (80040ec <MX_TIM1_Init+0xa0>)
 80040d6:	f003 fa6b 	bl	80075b0 <HAL_TIMEx_MasterConfigSynchronization>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80040e0:	f7ff fedc 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80040e4:	bf00      	nop
 80040e6:	3720      	adds	r7, #32
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000168 	.word	0x20000168
 80040f0:	40012c00 	.word	0x40012c00

080040f4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040fa:	f107 0310 	add.w	r3, r7, #16
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	609a      	str	r2, [r3, #8]
 8004106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004108:	1d3b      	adds	r3, r7, #4
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	605a      	str	r2, [r3, #4]
 8004110:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004112:	4b1e      	ldr	r3, [pc, #120]	@ (800418c <MX_TIM2_Init+0x98>)
 8004114:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004118:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3200-1;
 800411a:	4b1c      	ldr	r3, [pc, #112]	@ (800418c <MX_TIM2_Init+0x98>)
 800411c:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8004120:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004122:	4b1a      	ldr	r3, [pc, #104]	@ (800418c <MX_TIM2_Init+0x98>)
 8004124:	2200      	movs	r2, #0
 8004126:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8004128:	4b18      	ldr	r3, [pc, #96]	@ (800418c <MX_TIM2_Init+0x98>)
 800412a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800412e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004130:	4b16      	ldr	r3, [pc, #88]	@ (800418c <MX_TIM2_Init+0x98>)
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004136:	4b15      	ldr	r3, [pc, #84]	@ (800418c <MX_TIM2_Init+0x98>)
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800413c:	4813      	ldr	r0, [pc, #76]	@ (800418c <MX_TIM2_Init+0x98>)
 800413e:	f002 fe59 	bl	8006df4 <HAL_TIM_Base_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004148:	f7ff fea8 	bl	8003e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800414c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004150:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004152:	f107 0310 	add.w	r3, r7, #16
 8004156:	4619      	mov	r1, r3
 8004158:	480c      	ldr	r0, [pc, #48]	@ (800418c <MX_TIM2_Init+0x98>)
 800415a:	f003 f82d 	bl	80071b8 <HAL_TIM_ConfigClockSource>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8004164:	f7ff fe9a 	bl	8003e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004168:	2300      	movs	r3, #0
 800416a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	4619      	mov	r1, r3
 8004174:	4805      	ldr	r0, [pc, #20]	@ (800418c <MX_TIM2_Init+0x98>)
 8004176:	f003 fa1b 	bl	80075b0 <HAL_TIMEx_MasterConfigSynchronization>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8004180:	f7ff fe8c 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004184:	bf00      	nop
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	200001b4 	.word	0x200001b4

08004190 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004196:	f107 0310 	add.w	r3, r7, #16
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	609a      	str	r2, [r3, #8]
 80041a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041a4:	1d3b      	adds	r3, r7, #4
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	605a      	str	r2, [r3, #4]
 80041ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80041ae:	4b1f      	ldr	r3, [pc, #124]	@ (800422c <MX_TIM15_Init+0x9c>)
 80041b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004230 <MX_TIM15_Init+0xa0>)
 80041b2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 3200-1;
 80041b4:	4b1d      	ldr	r3, [pc, #116]	@ (800422c <MX_TIM15_Init+0x9c>)
 80041b6:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80041ba:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041bc:	4b1b      	ldr	r3, [pc, #108]	@ (800422c <MX_TIM15_Init+0x9c>)
 80041be:	2200      	movs	r2, #0
 80041c0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 80041c2:	4b1a      	ldr	r3, [pc, #104]	@ (800422c <MX_TIM15_Init+0x9c>)
 80041c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041c8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041ca:	4b18      	ldr	r3, [pc, #96]	@ (800422c <MX_TIM15_Init+0x9c>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80041d0:	4b16      	ldr	r3, [pc, #88]	@ (800422c <MX_TIM15_Init+0x9c>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041d6:	4b15      	ldr	r3, [pc, #84]	@ (800422c <MX_TIM15_Init+0x9c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80041dc:	4813      	ldr	r0, [pc, #76]	@ (800422c <MX_TIM15_Init+0x9c>)
 80041de:	f002 fe09 	bl	8006df4 <HAL_TIM_Base_Init>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80041e8:	f7ff fe58 	bl	8003e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80041f2:	f107 0310 	add.w	r3, r7, #16
 80041f6:	4619      	mov	r1, r3
 80041f8:	480c      	ldr	r0, [pc, #48]	@ (800422c <MX_TIM15_Init+0x9c>)
 80041fa:	f002 ffdd 	bl	80071b8 <HAL_TIM_ConfigClockSource>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8004204:	f7ff fe4a 	bl	8003e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004208:	2300      	movs	r3, #0
 800420a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800420c:	2300      	movs	r3, #0
 800420e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	4619      	mov	r1, r3
 8004214:	4805      	ldr	r0, [pc, #20]	@ (800422c <MX_TIM15_Init+0x9c>)
 8004216:	f003 f9cb 	bl	80075b0 <HAL_TIMEx_MasterConfigSynchronization>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8004220:	f7ff fe3c 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8004224:	bf00      	nop
 8004226:	3720      	adds	r7, #32
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	20000200 	.word	0x20000200
 8004230:	40014000 	.word	0x40014000

08004234 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a27      	ldr	r2, [pc, #156]	@ (80042e0 <HAL_TIM_Base_MspInit+0xac>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d114      	bne.n	8004270 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004246:	4b27      	ldr	r3, [pc, #156]	@ (80042e4 <HAL_TIM_Base_MspInit+0xb0>)
 8004248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800424a:	4a26      	ldr	r2, [pc, #152]	@ (80042e4 <HAL_TIM_Base_MspInit+0xb0>)
 800424c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004250:	6613      	str	r3, [r2, #96]	@ 0x60
 8004252:	4b24      	ldr	r3, [pc, #144]	@ (80042e4 <HAL_TIM_Base_MspInit+0xb0>)
 8004254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004256:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800425e:	2200      	movs	r2, #0
 8004260:	2100      	movs	r1, #0
 8004262:	2018      	movs	r0, #24
 8004264:	f000 fa79 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004268:	2018      	movs	r0, #24
 800426a:	f000 fa92 	bl	8004792 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800426e:	e032      	b.n	80042d6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004278:	d114      	bne.n	80042a4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800427a:	4b1a      	ldr	r3, [pc, #104]	@ (80042e4 <HAL_TIM_Base_MspInit+0xb0>)
 800427c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427e:	4a19      	ldr	r2, [pc, #100]	@ (80042e4 <HAL_TIM_Base_MspInit+0xb0>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	6593      	str	r3, [r2, #88]	@ 0x58
 8004286:	4b17      	ldr	r3, [pc, #92]	@ (80042e4 <HAL_TIM_Base_MspInit+0xb0>)
 8004288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004292:	2200      	movs	r2, #0
 8004294:	2101      	movs	r1, #1
 8004296:	201c      	movs	r0, #28
 8004298:	f000 fa5f 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800429c:	201c      	movs	r0, #28
 800429e:	f000 fa78 	bl	8004792 <HAL_NVIC_EnableIRQ>
}
 80042a2:	e018      	b.n	80042d6 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM15)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0f      	ldr	r2, [pc, #60]	@ (80042e8 <HAL_TIM_Base_MspInit+0xb4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d113      	bne.n	80042d6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80042ae:	4b0d      	ldr	r3, [pc, #52]	@ (80042e4 <HAL_TIM_Base_MspInit+0xb0>)
 80042b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b2:	4a0c      	ldr	r2, [pc, #48]	@ (80042e4 <HAL_TIM_Base_MspInit+0xb0>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80042ba:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <HAL_TIM_Base_MspInit+0xb0>)
 80042bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2100      	movs	r1, #0
 80042ca:	2018      	movs	r0, #24
 80042cc:	f000 fa45 	bl	800475a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80042d0:	2018      	movs	r0, #24
 80042d2:	f000 fa5e 	bl	8004792 <HAL_NVIC_EnableIRQ>
}
 80042d6:	bf00      	nop
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40014000 	.word	0x40014000

080042ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042f0:	4b14      	ldr	r3, [pc, #80]	@ (8004344 <MX_USART2_UART_Init+0x58>)
 80042f2:	4a15      	ldr	r2, [pc, #84]	@ (8004348 <MX_USART2_UART_Init+0x5c>)
 80042f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80042f6:	4b13      	ldr	r3, [pc, #76]	@ (8004344 <MX_USART2_UART_Init+0x58>)
 80042f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042fe:	4b11      	ldr	r3, [pc, #68]	@ (8004344 <MX_USART2_UART_Init+0x58>)
 8004300:	2200      	movs	r2, #0
 8004302:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004304:	4b0f      	ldr	r3, [pc, #60]	@ (8004344 <MX_USART2_UART_Init+0x58>)
 8004306:	2200      	movs	r2, #0
 8004308:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800430a:	4b0e      	ldr	r3, [pc, #56]	@ (8004344 <MX_USART2_UART_Init+0x58>)
 800430c:	2200      	movs	r2, #0
 800430e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004310:	4b0c      	ldr	r3, [pc, #48]	@ (8004344 <MX_USART2_UART_Init+0x58>)
 8004312:	220c      	movs	r2, #12
 8004314:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004316:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <MX_USART2_UART_Init+0x58>)
 8004318:	2200      	movs	r2, #0
 800431a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800431c:	4b09      	ldr	r3, [pc, #36]	@ (8004344 <MX_USART2_UART_Init+0x58>)
 800431e:	2200      	movs	r2, #0
 8004320:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004322:	4b08      	ldr	r3, [pc, #32]	@ (8004344 <MX_USART2_UART_Init+0x58>)
 8004324:	2200      	movs	r2, #0
 8004326:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004328:	4b06      	ldr	r3, [pc, #24]	@ (8004344 <MX_USART2_UART_Init+0x58>)
 800432a:	2200      	movs	r2, #0
 800432c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800432e:	4805      	ldr	r0, [pc, #20]	@ (8004344 <MX_USART2_UART_Init+0x58>)
 8004330:	f003 f9c2 	bl	80076b8 <HAL_UART_Init>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800433a:	f7ff fdaf 	bl	8003e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	2000024c 	.word	0x2000024c
 8004348:	40004400 	.word	0x40004400

0800434c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b09e      	sub	sp, #120	@ 0x78
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004354:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	605a      	str	r2, [r3, #4]
 800435e:	609a      	str	r2, [r3, #8]
 8004360:	60da      	str	r2, [r3, #12]
 8004362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004364:	f107 0310 	add.w	r3, r7, #16
 8004368:	2254      	movs	r2, #84	@ 0x54
 800436a:	2100      	movs	r1, #0
 800436c:	4618      	mov	r0, r3
 800436e:	f003 fe6d 	bl	800804c <memset>
  if(uartHandle->Instance==USART2)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a28      	ldr	r2, [pc, #160]	@ (8004418 <HAL_UART_MspInit+0xcc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d148      	bne.n	800440e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800437c:	2302      	movs	r3, #2
 800437e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004380:	2300      	movs	r3, #0
 8004382:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004384:	f107 0310 	add.w	r3, r7, #16
 8004388:	4618      	mov	r0, r3
 800438a:	f002 fa3b 	bl	8006804 <HAL_RCCEx_PeriphCLKConfig>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004394:	f7ff fd82 	bl	8003e9c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004398:	4b20      	ldr	r3, [pc, #128]	@ (800441c <HAL_UART_MspInit+0xd0>)
 800439a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439c:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <HAL_UART_MspInit+0xd0>)
 800439e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a4:	4b1d      	ldr	r3, [pc, #116]	@ (800441c <HAL_UART_MspInit+0xd0>)
 80043a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043b0:	4b1a      	ldr	r3, [pc, #104]	@ (800441c <HAL_UART_MspInit+0xd0>)
 80043b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043b4:	4a19      	ldr	r2, [pc, #100]	@ (800441c <HAL_UART_MspInit+0xd0>)
 80043b6:	f043 0301 	orr.w	r3, r3, #1
 80043ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043bc:	4b17      	ldr	r3, [pc, #92]	@ (800441c <HAL_UART_MspInit+0xd0>)
 80043be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80043c8:	2304      	movs	r3, #4
 80043ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043cc:	2302      	movs	r3, #2
 80043ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d0:	2300      	movs	r3, #0
 80043d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d4:	2303      	movs	r3, #3
 80043d6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80043d8:	2307      	movs	r3, #7
 80043da:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80043dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80043e0:	4619      	mov	r1, r3
 80043e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80043e6:	f000 fd47 	bl	8004e78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80043ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f0:	2302      	movs	r3, #2
 80043f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f8:	2303      	movs	r3, #3
 80043fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80043fc:	2303      	movs	r3, #3
 80043fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004400:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004404:	4619      	mov	r1, r3
 8004406:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800440a:	f000 fd35 	bl	8004e78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800440e:	bf00      	nop
 8004410:	3778      	adds	r7, #120	@ 0x78
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40004400 	.word	0x40004400
 800441c:	40021000 	.word	0x40021000

08004420 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004420:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004458 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004424:	f7ff fe00 	bl	8004028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004428:	480c      	ldr	r0, [pc, #48]	@ (800445c <LoopForever+0x6>)
  ldr r1, =_edata
 800442a:	490d      	ldr	r1, [pc, #52]	@ (8004460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800442c:	4a0d      	ldr	r2, [pc, #52]	@ (8004464 <LoopForever+0xe>)
  movs r3, #0
 800442e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004430:	e002      	b.n	8004438 <LoopCopyDataInit>

08004432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004436:	3304      	adds	r3, #4

08004438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800443a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800443c:	d3f9      	bcc.n	8004432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800443e:	4a0a      	ldr	r2, [pc, #40]	@ (8004468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004440:	4c0a      	ldr	r4, [pc, #40]	@ (800446c <LoopForever+0x16>)
  movs r3, #0
 8004442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004444:	e001      	b.n	800444a <LoopFillZerobss>

08004446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004448:	3204      	adds	r2, #4

0800444a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800444a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800444c:	d3fb      	bcc.n	8004446 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800444e:	f003 fe0b 	bl	8008068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004452:	f7ff fc89 	bl	8003d68 <main>

08004456 <LoopForever>:

LoopForever:
    b LoopForever
 8004456:	e7fe      	b.n	8004456 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004458:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800445c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004460:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8004464:	08008b08 	.word	0x08008b08
  ldr r2, =_sbss
 8004468:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800446c:	20000420 	.word	0x20000420

08004470 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004470:	e7fe      	b.n	8004470 <ADC1_IRQHandler>

08004472 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800447c:	2003      	movs	r0, #3
 800447e:	f000 f961 	bl	8004744 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004482:	2000      	movs	r0, #0
 8004484:	f000 f80e 	bl	80044a4 <HAL_InitTick>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	71fb      	strb	r3, [r7, #7]
 8004492:	e001      	b.n	8004498 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004494:	f7ff fd08 	bl	8003ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004498:	79fb      	ldrb	r3, [r7, #7]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80044b0:	4b17      	ldr	r3, [pc, #92]	@ (8004510 <HAL_InitTick+0x6c>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d023      	beq.n	8004500 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80044b8:	4b16      	ldr	r3, [pc, #88]	@ (8004514 <HAL_InitTick+0x70>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4b14      	ldr	r3, [pc, #80]	@ (8004510 <HAL_InitTick+0x6c>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	4619      	mov	r1, r3
 80044c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80044ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f96d 	bl	80047ae <HAL_SYSTICK_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10f      	bne.n	80044fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b0f      	cmp	r3, #15
 80044de:	d809      	bhi.n	80044f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044e0:	2200      	movs	r2, #0
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295
 80044e8:	f000 f937 	bl	800475a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004518 <HAL_InitTick+0x74>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e007      	b.n	8004504 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
 80044f8:	e004      	b.n	8004504 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
 80044fe:	e001      	b.n	8004504 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000014 	.word	0x20000014
 8004514:	2000000c 	.word	0x2000000c
 8004518:	20000010 	.word	0x20000010

0800451c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <HAL_IncTick+0x20>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	4b06      	ldr	r3, [pc, #24]	@ (8004540 <HAL_IncTick+0x24>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4413      	add	r3, r2
 800452c:	4a04      	ldr	r2, [pc, #16]	@ (8004540 <HAL_IncTick+0x24>)
 800452e:	6013      	str	r3, [r2, #0]
}
 8004530:	bf00      	nop
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000014 	.word	0x20000014
 8004540:	200002d4 	.word	0x200002d4

08004544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return uwTick;
 8004548:	4b03      	ldr	r3, [pc, #12]	@ (8004558 <HAL_GetTick+0x14>)
 800454a:	681b      	ldr	r3, [r3, #0]
}
 800454c:	4618      	mov	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	200002d4 	.word	0x200002d4

0800455c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004564:	f7ff ffee 	bl	8004544 <HAL_GetTick>
 8004568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d005      	beq.n	8004582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004576:	4b0a      	ldr	r3, [pc, #40]	@ (80045a0 <HAL_Delay+0x44>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	461a      	mov	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004582:	bf00      	nop
 8004584:	f7ff ffde 	bl	8004544 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	429a      	cmp	r2, r3
 8004592:	d8f7      	bhi.n	8004584 <HAL_Delay+0x28>
  {
  }
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000014 	.word	0x20000014

080045a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045b4:	4b0c      	ldr	r3, [pc, #48]	@ (80045e8 <__NVIC_SetPriorityGrouping+0x44>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045c0:	4013      	ands	r3, r2
 80045c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80045d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045d6:	4a04      	ldr	r2, [pc, #16]	@ (80045e8 <__NVIC_SetPriorityGrouping+0x44>)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	60d3      	str	r3, [r2, #12]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045f0:	4b04      	ldr	r3, [pc, #16]	@ (8004604 <__NVIC_GetPriorityGrouping+0x18>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	0a1b      	lsrs	r3, r3, #8
 80045f6:	f003 0307 	and.w	r3, r3, #7
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	4603      	mov	r3, r0
 8004610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004616:	2b00      	cmp	r3, #0
 8004618:	db0b      	blt.n	8004632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800461a:	79fb      	ldrb	r3, [r7, #7]
 800461c:	f003 021f 	and.w	r2, r3, #31
 8004620:	4907      	ldr	r1, [pc, #28]	@ (8004640 <__NVIC_EnableIRQ+0x38>)
 8004622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	2001      	movs	r0, #1
 800462a:	fa00 f202 	lsl.w	r2, r0, r2
 800462e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	e000e100 	.word	0xe000e100

08004644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	6039      	str	r1, [r7, #0]
 800464e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004654:	2b00      	cmp	r3, #0
 8004656:	db0a      	blt.n	800466e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	490c      	ldr	r1, [pc, #48]	@ (8004690 <__NVIC_SetPriority+0x4c>)
 800465e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004662:	0112      	lsls	r2, r2, #4
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	440b      	add	r3, r1
 8004668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800466c:	e00a      	b.n	8004684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	4908      	ldr	r1, [pc, #32]	@ (8004694 <__NVIC_SetPriority+0x50>)
 8004674:	79fb      	ldrb	r3, [r7, #7]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	3b04      	subs	r3, #4
 800467c:	0112      	lsls	r2, r2, #4
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	440b      	add	r3, r1
 8004682:	761a      	strb	r2, [r3, #24]
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr
 8004690:	e000e100 	.word	0xe000e100
 8004694:	e000ed00 	.word	0xe000ed00

08004698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004698:	b480      	push	{r7}
 800469a:	b089      	sub	sp, #36	@ 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	f1c3 0307 	rsb	r3, r3, #7
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	bf28      	it	cs
 80046b6:	2304      	movcs	r3, #4
 80046b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3304      	adds	r3, #4
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d902      	bls.n	80046c8 <NVIC_EncodePriority+0x30>
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	3b03      	subs	r3, #3
 80046c6:	e000      	b.n	80046ca <NVIC_EncodePriority+0x32>
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046cc:	f04f 32ff 	mov.w	r2, #4294967295
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	fa02 f303 	lsl.w	r3, r2, r3
 80046d6:	43da      	mvns	r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	401a      	ands	r2, r3
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046e0:	f04f 31ff 	mov.w	r1, #4294967295
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	43d9      	mvns	r1, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046f0:	4313      	orrs	r3, r2
         );
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3724      	adds	r7, #36	@ 0x24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
	...

08004700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3b01      	subs	r3, #1
 800470c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004710:	d301      	bcc.n	8004716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004712:	2301      	movs	r3, #1
 8004714:	e00f      	b.n	8004736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004716:	4a0a      	ldr	r2, [pc, #40]	@ (8004740 <SysTick_Config+0x40>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3b01      	subs	r3, #1
 800471c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800471e:	210f      	movs	r1, #15
 8004720:	f04f 30ff 	mov.w	r0, #4294967295
 8004724:	f7ff ff8e 	bl	8004644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004728:	4b05      	ldr	r3, [pc, #20]	@ (8004740 <SysTick_Config+0x40>)
 800472a:	2200      	movs	r2, #0
 800472c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800472e:	4b04      	ldr	r3, [pc, #16]	@ (8004740 <SysTick_Config+0x40>)
 8004730:	2207      	movs	r2, #7
 8004732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	e000e010 	.word	0xe000e010

08004744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff ff29 	bl	80045a4 <__NVIC_SetPriorityGrouping>
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b086      	sub	sp, #24
 800475e:	af00      	add	r7, sp, #0
 8004760:	4603      	mov	r3, r0
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004768:	2300      	movs	r3, #0
 800476a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800476c:	f7ff ff3e 	bl	80045ec <__NVIC_GetPriorityGrouping>
 8004770:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	68b9      	ldr	r1, [r7, #8]
 8004776:	6978      	ldr	r0, [r7, #20]
 8004778:	f7ff ff8e 	bl	8004698 <NVIC_EncodePriority>
 800477c:	4602      	mov	r2, r0
 800477e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004782:	4611      	mov	r1, r2
 8004784:	4618      	mov	r0, r3
 8004786:	f7ff ff5d 	bl	8004644 <__NVIC_SetPriority>
}
 800478a:	bf00      	nop
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	4603      	mov	r3, r0
 800479a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800479c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff31 	bl	8004608 <__NVIC_EnableIRQ>
}
 80047a6:	bf00      	nop
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff ffa2 	bl	8004700 <SysTick_Config>
 80047bc:	4603      	mov	r3, r0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e054      	b.n	8004884 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	7f5b      	ldrb	r3, [r3, #29]
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d105      	bne.n	80047f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fc fef0 	bl	80015d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	791b      	ldrb	r3, [r3, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10c      	bne.n	8004818 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a22      	ldr	r2, [pc, #136]	@ (800488c <HAL_CRC_Init+0xc4>)
 8004804:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0218 	bic.w	r2, r2, #24
 8004814:	609a      	str	r2, [r3, #8]
 8004816:	e00c      	b.n	8004832 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6899      	ldr	r1, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	461a      	mov	r2, r3
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f834 	bl	8004890 <HAL_CRCEx_Polynomial_Set>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e028      	b.n	8004884 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	795b      	ldrb	r3, [r3, #5]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d105      	bne.n	8004846 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f04f 32ff 	mov.w	r2, #4294967295
 8004842:	611a      	str	r2, [r3, #16]
 8004844:	e004      	b.n	8004850 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6912      	ldr	r2, [r2, #16]
 800484e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	04c11db7 	.word	0x04c11db7

08004890 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004890:	b480      	push	{r7}
 8004892:	b087      	sub	sp, #28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80048a0:	231f      	movs	r3, #31
 80048a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
 80048b2:	e063      	b.n	800497c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80048b4:	bf00      	nop
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1e5a      	subs	r2, r3, #1
 80048ba:	613a      	str	r2, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d009      	beq.n	80048d4 <HAL_CRCEx_Polynomial_Set+0x44>
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	68ba      	ldr	r2, [r7, #8]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b18      	cmp	r3, #24
 80048d8:	d846      	bhi.n	8004968 <HAL_CRCEx_Polynomial_Set+0xd8>
 80048da:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	0800496f 	.word	0x0800496f
 80048e4:	08004969 	.word	0x08004969
 80048e8:	08004969 	.word	0x08004969
 80048ec:	08004969 	.word	0x08004969
 80048f0:	08004969 	.word	0x08004969
 80048f4:	08004969 	.word	0x08004969
 80048f8:	08004969 	.word	0x08004969
 80048fc:	08004969 	.word	0x08004969
 8004900:	0800495d 	.word	0x0800495d
 8004904:	08004969 	.word	0x08004969
 8004908:	08004969 	.word	0x08004969
 800490c:	08004969 	.word	0x08004969
 8004910:	08004969 	.word	0x08004969
 8004914:	08004969 	.word	0x08004969
 8004918:	08004969 	.word	0x08004969
 800491c:	08004969 	.word	0x08004969
 8004920:	08004951 	.word	0x08004951
 8004924:	08004969 	.word	0x08004969
 8004928:	08004969 	.word	0x08004969
 800492c:	08004969 	.word	0x08004969
 8004930:	08004969 	.word	0x08004969
 8004934:	08004969 	.word	0x08004969
 8004938:	08004969 	.word	0x08004969
 800493c:	08004969 	.word	0x08004969
 8004940:	08004945 	.word	0x08004945
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	2b06      	cmp	r3, #6
 8004948:	d913      	bls.n	8004972 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800494e:	e010      	b.n	8004972 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b07      	cmp	r3, #7
 8004954:	d90f      	bls.n	8004976 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800495a:	e00c      	b.n	8004976 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	2b0f      	cmp	r3, #15
 8004960:	d90b      	bls.n	800497a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004966:	e008      	b.n	800497a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	75fb      	strb	r3, [r7, #23]
        break;
 800496c:	e006      	b.n	800497c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800496e:	bf00      	nop
 8004970:	e004      	b.n	800497c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004972:	bf00      	nop
 8004974:	e002      	b.n	800497c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004976:	bf00      	nop
 8004978:	e000      	b.n	800497c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800497a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800497c:	7dfb      	ldrb	r3, [r7, #23]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10d      	bne.n	800499e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f023 0118 	bic.w	r1, r3, #24
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	430a      	orrs	r2, r1
 800499c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80049be:	4b2f      	ldr	r3, [pc, #188]	@ (8004a7c <HAL_FLASH_Program+0xd0>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_FLASH_Program+0x1e>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e053      	b.n	8004a72 <HAL_FLASH_Program+0xc6>
 80049ca:	4b2c      	ldr	r3, [pc, #176]	@ (8004a7c <HAL_FLASH_Program+0xd0>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80049d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80049d4:	f000 f878 	bl	8004ac8 <FLASH_WaitForLastOperation>
 80049d8:	4603      	mov	r3, r0
 80049da:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80049dc:	7dfb      	ldrb	r3, [r7, #23]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d143      	bne.n	8004a6a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80049e2:	4b26      	ldr	r3, [pc, #152]	@ (8004a7c <HAL_FLASH_Program+0xd0>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80049e8:	4b25      	ldr	r3, [pc, #148]	@ (8004a80 <HAL_FLASH_Program+0xd4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d009      	beq.n	8004a08 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80049f4:	4b22      	ldr	r3, [pc, #136]	@ (8004a80 <HAL_FLASH_Program+0xd4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a21      	ldr	r2, [pc, #132]	@ (8004a80 <HAL_FLASH_Program+0xd4>)
 80049fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049fe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004a00:	4b1e      	ldr	r3, [pc, #120]	@ (8004a7c <HAL_FLASH_Program+0xd0>)
 8004a02:	2202      	movs	r2, #2
 8004a04:	771a      	strb	r2, [r3, #28]
 8004a06:	e002      	b.n	8004a0e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004a08:	4b1c      	ldr	r3, [pc, #112]	@ (8004a7c <HAL_FLASH_Program+0xd0>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d107      	bne.n	8004a24 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a18:	68b8      	ldr	r0, [r7, #8]
 8004a1a:	f000 f8ab 	bl	8004b74 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	e010      	b.n	8004a46 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d002      	beq.n	8004a30 <HAL_FLASH_Program+0x84>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d10a      	bne.n	8004a46 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	4619      	mov	r1, r3
 8004a34:	68b8      	ldr	r0, [r7, #8]
 8004a36:	f000 f8c3 	bl	8004bc0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d102      	bne.n	8004a46 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8004a40:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004a44:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004a46:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004a4a:	f000 f83d 	bl	8004ac8 <FLASH_WaitForLastOperation>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d006      	beq.n	8004a66 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8004a58:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <HAL_FLASH_Program+0xd4>)
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	4907      	ldr	r1, [pc, #28]	@ (8004a80 <HAL_FLASH_Program+0xd4>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004a66:	f000 f9bd 	bl	8004de4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004a6a:	4b04      	ldr	r3, [pc, #16]	@ (8004a7c <HAL_FLASH_Program+0xd0>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	701a      	strb	r2, [r3, #0]

  return status;
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000018 	.word	0x20000018
 8004a80:	40022000 	.word	0x40022000

08004a84 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004abc <HAL_FLASH_Unlock+0x38>)
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	da0b      	bge.n	8004aae <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004a96:	4b09      	ldr	r3, [pc, #36]	@ (8004abc <HAL_FLASH_Unlock+0x38>)
 8004a98:	4a09      	ldr	r2, [pc, #36]	@ (8004ac0 <HAL_FLASH_Unlock+0x3c>)
 8004a9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004a9c:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <HAL_FLASH_Unlock+0x38>)
 8004a9e:	4a09      	ldr	r2, [pc, #36]	@ (8004ac4 <HAL_FLASH_Unlock+0x40>)
 8004aa0:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004aa2:	4b06      	ldr	r3, [pc, #24]	@ (8004abc <HAL_FLASH_Unlock+0x38>)
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da01      	bge.n	8004aae <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004aae:	79fb      	ldrb	r3, [r7, #7]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	40022000 	.word	0x40022000
 8004ac0:	45670123 	.word	0x45670123
 8004ac4:	cdef89ab 	.word	0xcdef89ab

08004ac8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8004ad0:	f7ff fd38 	bl	8004544 <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004ad6:	e00d      	b.n	8004af4 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d009      	beq.n	8004af4 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8004ae0:	f7ff fd30 	bl	8004544 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d801      	bhi.n	8004af4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e035      	b.n	8004b60 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004af4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b68 <FLASH_WaitForLastOperation+0xa0>)
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1eb      	bne.n	8004ad8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8004b00:	4b19      	ldr	r3, [pc, #100]	@ (8004b68 <FLASH_WaitForLastOperation+0xa0>)
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	4b19      	ldr	r3, [pc, #100]	@ (8004b6c <FLASH_WaitForLastOperation+0xa4>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01d      	beq.n	8004b4c <FLASH_WaitForLastOperation+0x84>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8004b10:	4b17      	ldr	r3, [pc, #92]	@ (8004b70 <FLASH_WaitForLastOperation+0xa8>)
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	4a15      	ldr	r2, [pc, #84]	@ (8004b70 <FLASH_WaitForLastOperation+0xa8>)
 8004b1a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b22:	d307      	bcc.n	8004b34 <FLASH_WaitForLastOperation+0x6c>
 8004b24:	4b10      	ldr	r3, [pc, #64]	@ (8004b68 <FLASH_WaitForLastOperation+0xa0>)
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004b2e:	490e      	ldr	r1, [pc, #56]	@ (8004b68 <FLASH_WaitForLastOperation+0xa0>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	618b      	str	r3, [r1, #24]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d004      	beq.n	8004b48 <FLASH_WaitForLastOperation+0x80>
 8004b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8004b68 <FLASH_WaitForLastOperation+0xa0>)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004b46:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e009      	b.n	8004b60 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004b4c:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <FLASH_WaitForLastOperation+0xa0>)
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <FLASH_WaitForLastOperation+0x96>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004b58:	4b03      	ldr	r3, [pc, #12]	@ (8004b68 <FLASH_WaitForLastOperation+0xa0>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40022000 	.word	0x40022000
 8004b6c:	0002c3fa 	.word	0x0002c3fa
 8004b70:	20000018 	.word	0x20000018

08004b74 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8004b80:	4b0e      	ldr	r3, [pc, #56]	@ (8004bbc <FLASH_Program_DoubleWord+0x48>)
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	4a0d      	ldr	r2, [pc, #52]	@ (8004bbc <FLASH_Program_DoubleWord+0x48>)
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004b92:	f3bf 8f6f 	isb	sy
}
 8004b96:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8004b98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004b9c:	f04f 0200 	mov.w	r2, #0
 8004ba0:	f04f 0300 	mov.w	r3, #0
 8004ba4:	000a      	movs	r2, r1
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	68f9      	ldr	r1, [r7, #12]
 8004baa:	3104      	adds	r1, #4
 8004bac:	4613      	mov	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	40022000 	.word	0x40022000

08004bc0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b089      	sub	sp, #36	@ 0x24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004bca:	2340      	movs	r3, #64	@ 0x40
 8004bcc:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8004bd6:	4b14      	ldr	r3, [pc, #80]	@ (8004c28 <FLASH_Program_Fast+0x68>)
 8004bd8:	695b      	ldr	r3, [r3, #20]
 8004bda:	4a13      	ldr	r2, [pc, #76]	@ (8004c28 <FLASH_Program_Fast+0x68>)
 8004bdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004be0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be2:	f3ef 8310 	mrs	r3, PRIMASK
 8004be6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004be8:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8004bea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bec:	b672      	cpsid	i
}
 8004bee:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	3304      	adds	r3, #4
 8004c02:	617b      	str	r3, [r7, #20]
    row_index--;
 8004c04:	7ffb      	ldrb	r3, [r7, #31]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 8004c0a:	7ffb      	ldrb	r3, [r7, #31]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1ef      	bne.n	8004bf0 <FLASH_Program_Fast+0x30>
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f383 8810 	msr	PRIMASK, r3
}
 8004c1a:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8004c1c:	bf00      	nop
 8004c1e:	3724      	adds	r7, #36	@ 0x24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	40022000 	.word	0x40022000

08004c2c <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004c36:	4b48      	ldr	r3, [pc, #288]	@ (8004d58 <HAL_FLASHEx_Erase+0x12c>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_FLASHEx_Erase+0x16>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e085      	b.n	8004d4e <HAL_FLASHEx_Erase+0x122>
 8004c42:	4b45      	ldr	r3, [pc, #276]	@ (8004d58 <HAL_FLASHEx_Erase+0x12c>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c48:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004c4c:	f7ff ff3c 	bl	8004ac8 <FLASH_WaitForLastOperation>
 8004c50:	4603      	mov	r3, r0
 8004c52:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c54:	7bfb      	ldrb	r3, [r7, #15]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d175      	bne.n	8004d46 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d58 <HAL_FLASHEx_Erase+0x12c>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004c60:	4b3e      	ldr	r3, [pc, #248]	@ (8004d5c <HAL_FLASHEx_Erase+0x130>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d013      	beq.n	8004c94 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d5c <HAL_FLASHEx_Erase+0x130>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d009      	beq.n	8004c8c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8004c78:	4b38      	ldr	r3, [pc, #224]	@ (8004d5c <HAL_FLASHEx_Erase+0x130>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a37      	ldr	r2, [pc, #220]	@ (8004d5c <HAL_FLASHEx_Erase+0x130>)
 8004c7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c82:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8004c84:	4b34      	ldr	r3, [pc, #208]	@ (8004d58 <HAL_FLASHEx_Erase+0x12c>)
 8004c86:	2203      	movs	r2, #3
 8004c88:	771a      	strb	r2, [r3, #28]
 8004c8a:	e016      	b.n	8004cba <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004c8c:	4b32      	ldr	r3, [pc, #200]	@ (8004d58 <HAL_FLASHEx_Erase+0x12c>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	771a      	strb	r2, [r3, #28]
 8004c92:	e012      	b.n	8004cba <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004c94:	4b31      	ldr	r3, [pc, #196]	@ (8004d5c <HAL_FLASHEx_Erase+0x130>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d009      	beq.n	8004cb4 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8004d5c <HAL_FLASHEx_Erase+0x130>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2d      	ldr	r2, [pc, #180]	@ (8004d5c <HAL_FLASHEx_Erase+0x130>)
 8004ca6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004caa:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004cac:	4b2a      	ldr	r3, [pc, #168]	@ (8004d58 <HAL_FLASHEx_Erase+0x12c>)
 8004cae:	2202      	movs	r2, #2
 8004cb0:	771a      	strb	r2, [r3, #28]
 8004cb2:	e002      	b.n	8004cba <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004cb4:	4b28      	ldr	r3, [pc, #160]	@ (8004d58 <HAL_FLASHEx_Erase+0x12c>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d111      	bne.n	8004ce6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f84a 	bl	8004d60 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004ccc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004cd0:	f7ff fefa 	bl	8004ac8 <FLASH_WaitForLastOperation>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8004cd8:	4b20      	ldr	r3, [pc, #128]	@ (8004d5c <HAL_FLASHEx_Erase+0x130>)
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8004d5c <HAL_FLASHEx_Erase+0x130>)
 8004cde:	f023 0304 	bic.w	r3, r3, #4
 8004ce2:	6153      	str	r3, [r2, #20]
 8004ce4:	e02d      	b.n	8004d42 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cec:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	e01d      	b.n	8004d32 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68b8      	ldr	r0, [r7, #8]
 8004cfe:	f000 f84d 	bl	8004d9c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004d02:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8004d06:	f7ff fedf 	bl	8004ac8 <FLASH_WaitForLastOperation>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004d0e:	4b13      	ldr	r3, [pc, #76]	@ (8004d5c <HAL_FLASHEx_Erase+0x130>)
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4a12      	ldr	r2, [pc, #72]	@ (8004d5c <HAL_FLASHEx_Erase+0x130>)
 8004d14:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 8004d18:	f023 0302 	bic.w	r3, r3, #2
 8004d1c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	601a      	str	r2, [r3, #0]
          break;
 8004d2a:	e00a      	b.n	8004d42 <HAL_FLASHEx_Erase+0x116>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689a      	ldr	r2, [r3, #8]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d3d9      	bcc.n	8004cf6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004d42:	f000 f84f 	bl	8004de4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004d46:	4b04      	ldr	r3, [pc, #16]	@ (8004d58 <HAL_FLASHEx_Erase+0x12c>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]

  return status;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000018 	.word	0x20000018
 8004d5c:	40022000 	.word	0x40022000

08004d60 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8004d72:	4b09      	ldr	r3, [pc, #36]	@ (8004d98 <FLASH_MassErase+0x38>)
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	4a08      	ldr	r2, [pc, #32]	@ (8004d98 <FLASH_MassErase+0x38>)
 8004d78:	f043 0304 	orr.w	r3, r3, #4
 8004d7c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004d7e:	4b06      	ldr	r3, [pc, #24]	@ (8004d98 <FLASH_MassErase+0x38>)
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	4a05      	ldr	r2, [pc, #20]	@ (8004d98 <FLASH_MassErase+0x38>)
 8004d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d88:	6153      	str	r3, [r2, #20]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40022000 	.word	0x40022000

08004d9c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004da6:	4b0e      	ldr	r3, [pc, #56]	@ (8004de0 <FLASH_PageErase+0x44>)
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8004db6:	490a      	ldr	r1, [pc, #40]	@ (8004de0 <FLASH_PageErase+0x44>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004dbc:	4b08      	ldr	r3, [pc, #32]	@ (8004de0 <FLASH_PageErase+0x44>)
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	4a07      	ldr	r2, [pc, #28]	@ (8004de0 <FLASH_PageErase+0x44>)
 8004dc2:	f043 0302 	orr.w	r3, r3, #2
 8004dc6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004dc8:	4b05      	ldr	r3, [pc, #20]	@ (8004de0 <FLASH_PageErase+0x44>)
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	4a04      	ldr	r2, [pc, #16]	@ (8004de0 <FLASH_PageErase+0x44>)
 8004dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd2:	6153      	str	r3, [r2, #20]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	40022000 	.word	0x40022000

08004de4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8004dea:	4b21      	ldr	r3, [pc, #132]	@ (8004e70 <FLASH_FlushCaches+0x8c>)
 8004dec:	7f1b      	ldrb	r3, [r3, #28]
 8004dee:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d002      	beq.n	8004dfc <FLASH_FlushCaches+0x18>
 8004df6:	79fb      	ldrb	r3, [r7, #7]
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d117      	bne.n	8004e2c <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a1c      	ldr	r2, [pc, #112]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e02:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e06:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004e08:	4b1a      	ldr	r3, [pc, #104]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a19      	ldr	r2, [pc, #100]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	4b17      	ldr	r3, [pc, #92]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a16      	ldr	r2, [pc, #88]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e1e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e20:	4b14      	ldr	r3, [pc, #80]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a13      	ldr	r2, [pc, #76]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e2a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d002      	beq.n	8004e38 <FLASH_FlushCaches+0x54>
 8004e32:	79fb      	ldrb	r3, [r7, #7]
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d111      	bne.n	8004e5c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004e38:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	4b0b      	ldr	r3, [pc, #44]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a0a      	ldr	r2, [pc, #40]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e4e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e50:	4b08      	ldr	r3, [pc, #32]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a07      	ldr	r2, [pc, #28]	@ (8004e74 <FLASH_FlushCaches+0x90>)
 8004e56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e5a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8004e5c:	4b04      	ldr	r3, [pc, #16]	@ (8004e70 <FLASH_FlushCaches+0x8c>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	771a      	strb	r2, [r3, #28]
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000018 	.word	0x20000018
 8004e74:	40022000 	.word	0x40022000

08004e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e86:	e148      	b.n	800511a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	fa01 f303 	lsl.w	r3, r1, r3
 8004e94:	4013      	ands	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 813a 	beq.w	8005114 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d005      	beq.n	8004eb8 <HAL_GPIO_Init+0x40>
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f003 0303 	and.w	r3, r3, #3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d130      	bne.n	8004f1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004eee:	2201      	movs	r2, #1
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4013      	ands	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	091b      	lsrs	r3, r3, #4
 8004f04:	f003 0201 	and.w	r2, r3, #1
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b03      	cmp	r3, #3
 8004f24:	d017      	beq.n	8004f56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	2203      	movs	r2, #3
 8004f32:	fa02 f303 	lsl.w	r3, r2, r3
 8004f36:	43db      	mvns	r3, r3
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d123      	bne.n	8004faa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	08da      	lsrs	r2, r3, #3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3208      	adds	r2, #8
 8004f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	220f      	movs	r2, #15
 8004f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4013      	ands	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	08da      	lsrs	r2, r3, #3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3208      	adds	r2, #8
 8004fa4:	6939      	ldr	r1, [r7, #16]
 8004fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	005b      	lsls	r3, r3, #1
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 0203 	and.w	r2, r3, #3
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8094 	beq.w	8005114 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fec:	4b52      	ldr	r3, [pc, #328]	@ (8005138 <HAL_GPIO_Init+0x2c0>)
 8004fee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff0:	4a51      	ldr	r2, [pc, #324]	@ (8005138 <HAL_GPIO_Init+0x2c0>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ff8:	4b4f      	ldr	r3, [pc, #316]	@ (8005138 <HAL_GPIO_Init+0x2c0>)
 8004ffa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	60bb      	str	r3, [r7, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005004:	4a4d      	ldr	r2, [pc, #308]	@ (800513c <HAL_GPIO_Init+0x2c4>)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	089b      	lsrs	r3, r3, #2
 800500a:	3302      	adds	r3, #2
 800500c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005010:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	220f      	movs	r2, #15
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800502e:	d00d      	beq.n	800504c <HAL_GPIO_Init+0x1d4>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a43      	ldr	r2, [pc, #268]	@ (8005140 <HAL_GPIO_Init+0x2c8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d007      	beq.n	8005048 <HAL_GPIO_Init+0x1d0>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a42      	ldr	r2, [pc, #264]	@ (8005144 <HAL_GPIO_Init+0x2cc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d101      	bne.n	8005044 <HAL_GPIO_Init+0x1cc>
 8005040:	2302      	movs	r3, #2
 8005042:	e004      	b.n	800504e <HAL_GPIO_Init+0x1d6>
 8005044:	2307      	movs	r3, #7
 8005046:	e002      	b.n	800504e <HAL_GPIO_Init+0x1d6>
 8005048:	2301      	movs	r3, #1
 800504a:	e000      	b.n	800504e <HAL_GPIO_Init+0x1d6>
 800504c:	2300      	movs	r3, #0
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	f002 0203 	and.w	r2, r2, #3
 8005054:	0092      	lsls	r2, r2, #2
 8005056:	4093      	lsls	r3, r2
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800505e:	4937      	ldr	r1, [pc, #220]	@ (800513c <HAL_GPIO_Init+0x2c4>)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	089b      	lsrs	r3, r3, #2
 8005064:	3302      	adds	r3, #2
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800506c:	4b36      	ldr	r3, [pc, #216]	@ (8005148 <HAL_GPIO_Init+0x2d0>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	43db      	mvns	r3, r3
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	4013      	ands	r3, r2
 800507a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005090:	4a2d      	ldr	r2, [pc, #180]	@ (8005148 <HAL_GPIO_Init+0x2d0>)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005096:	4b2c      	ldr	r3, [pc, #176]	@ (8005148 <HAL_GPIO_Init+0x2d0>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	43db      	mvns	r3, r3
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4013      	ands	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050ba:	4a23      	ldr	r2, [pc, #140]	@ (8005148 <HAL_GPIO_Init+0x2d0>)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80050c0:	4b21      	ldr	r3, [pc, #132]	@ (8005148 <HAL_GPIO_Init+0x2d0>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	4013      	ands	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050e4:	4a18      	ldr	r2, [pc, #96]	@ (8005148 <HAL_GPIO_Init+0x2d0>)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80050ea:	4b17      	ldr	r3, [pc, #92]	@ (8005148 <HAL_GPIO_Init+0x2d0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	43db      	mvns	r3, r3
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4013      	ands	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800510e:	4a0e      	ldr	r2, [pc, #56]	@ (8005148 <HAL_GPIO_Init+0x2d0>)
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	3301      	adds	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	f47f aeaf 	bne.w	8004e88 <HAL_GPIO_Init+0x10>
  }
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40021000 	.word	0x40021000
 800513c:	40010000 	.word	0x40010000
 8005140:	48000400 	.word	0x48000400
 8005144:	48000800 	.word	0x48000800
 8005148:	40010400 	.word	0x40010400

0800514c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	807b      	strh	r3, [r7, #2]
 8005158:	4613      	mov	r3, r2
 800515a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800515c:	787b      	ldrb	r3, [r7, #1]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005162:	887a      	ldrh	r2, [r7, #2]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005168:	e002      	b.n	8005170 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800516a:	887a      	ldrh	r2, [r7, #2]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800518e:	887a      	ldrh	r2, [r7, #2]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4013      	ands	r3, r2
 8005194:	041a      	lsls	r2, r3, #16
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	43d9      	mvns	r1, r3
 800519a:	887b      	ldrh	r3, [r7, #2]
 800519c:	400b      	ands	r3, r1
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	619a      	str	r2, [r3, #24]
}
 80051a4:	bf00      	nop
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	4603      	mov	r3, r0
 80051b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051ba:	4b08      	ldr	r3, [pc, #32]	@ (80051dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051bc:	695a      	ldr	r2, [r3, #20]
 80051be:	88fb      	ldrh	r3, [r7, #6]
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d006      	beq.n	80051d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051c6:	4a05      	ldr	r2, [pc, #20]	@ (80051dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051cc:	88fb      	ldrh	r3, [r7, #6]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fe fcc6 	bl	8003b60 <HAL_GPIO_EXTI_Callback>
  }
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40010400 	.word	0x40010400

080051e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d101      	bne.n	80051f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e08d      	b.n	800530e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fe fd38 	bl	8003c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2224      	movs	r2, #36	@ 0x24
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005230:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	689a      	ldr	r2, [r3, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005240:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d107      	bne.n	800525a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005256:	609a      	str	r2, [r3, #8]
 8005258:	e006      	b.n	8005268 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005266:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	2b02      	cmp	r3, #2
 800526e:	d108      	bne.n	8005282 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800527e:	605a      	str	r2, [r3, #4]
 8005280:	e007      	b.n	8005292 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005290:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80052a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69d9      	ldr	r1, [r3, #28]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a1a      	ldr	r2, [r3, #32]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
	...

08005318 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	607a      	str	r2, [r7, #4]
 8005322:	461a      	mov	r2, r3
 8005324:	460b      	mov	r3, r1
 8005326:	817b      	strh	r3, [r7, #10]
 8005328:	4613      	mov	r3, r2
 800532a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b20      	cmp	r3, #32
 8005336:	f040 80fd 	bne.w	8005534 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_I2C_Master_Transmit+0x30>
 8005344:	2302      	movs	r3, #2
 8005346:	e0f6      	b.n	8005536 <HAL_I2C_Master_Transmit+0x21e>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005350:	f7ff f8f8 	bl	8004544 <HAL_GetTick>
 8005354:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	2319      	movs	r3, #25
 800535c:	2201      	movs	r2, #1
 800535e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f914 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e0e1      	b.n	8005536 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2221      	movs	r2, #33	@ 0x21
 8005376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2210      	movs	r2, #16
 800537e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	893a      	ldrh	r2, [r7, #8]
 8005392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2bff      	cmp	r3, #255	@ 0xff
 80053a2:	d906      	bls.n	80053b2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	22ff      	movs	r2, #255	@ 0xff
 80053a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80053aa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e007      	b.n	80053c2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80053bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053c0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d024      	beq.n	8005414 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f2:	3b01      	subs	r3, #1
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	3301      	adds	r3, #1
 8005402:	b2da      	uxtb	r2, r3
 8005404:	8979      	ldrh	r1, [r7, #10]
 8005406:	4b4e      	ldr	r3, [pc, #312]	@ (8005540 <HAL_I2C_Master_Transmit+0x228>)
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fa83 	bl	8005918 <I2C_TransferConfig>
 8005412:	e066      	b.n	80054e2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005418:	b2da      	uxtb	r2, r3
 800541a:	8979      	ldrh	r1, [r7, #10]
 800541c:	4b48      	ldr	r3, [pc, #288]	@ (8005540 <HAL_I2C_Master_Transmit+0x228>)
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fa78 	bl	8005918 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005428:	e05b      	b.n	80054e2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	6a39      	ldr	r1, [r7, #32]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f907 	bl	8005642 <I2C_WaitOnTXISFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e07b      	b.n	8005536 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	781a      	ldrb	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005466:	3b01      	subs	r3, #1
 8005468:	b29a      	uxth	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d034      	beq.n	80054e2 <HAL_I2C_Master_Transmit+0x1ca>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800547c:	2b00      	cmp	r3, #0
 800547e:	d130      	bne.n	80054e2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	6a3b      	ldr	r3, [r7, #32]
 8005486:	2200      	movs	r2, #0
 8005488:	2180      	movs	r1, #128	@ 0x80
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f880 	bl	8005590 <I2C_WaitOnFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e04d      	b.n	8005536 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2bff      	cmp	r3, #255	@ 0xff
 80054a2:	d90e      	bls.n	80054c2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	22ff      	movs	r2, #255	@ 0xff
 80054a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	8979      	ldrh	r1, [r7, #10]
 80054b2:	2300      	movs	r3, #0
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 fa2c 	bl	8005918 <I2C_TransferConfig>
 80054c0:	e00f      	b.n	80054e2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	8979      	ldrh	r1, [r7, #10]
 80054d4:	2300      	movs	r3, #0
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 fa1b 	bl	8005918 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d19e      	bne.n	800542a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	6a39      	ldr	r1, [r7, #32]
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f000 f8ed 	bl	80056d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e01a      	b.n	8005536 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2220      	movs	r2, #32
 8005506:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	6859      	ldr	r1, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	4b0c      	ldr	r3, [pc, #48]	@ (8005544 <HAL_I2C_Master_Transmit+0x22c>)
 8005514:	400b      	ands	r3, r1
 8005516:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005530:	2300      	movs	r3, #0
 8005532:	e000      	b.n	8005536 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005534:	2302      	movs	r3, #2
  }
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	80002000 	.word	0x80002000
 8005544:	fe00e800 	.word	0xfe00e800

08005548 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b02      	cmp	r3, #2
 800555c:	d103      	bne.n	8005566 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2200      	movs	r2, #0
 8005564:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	f003 0301 	and.w	r3, r3, #1
 8005570:	2b01      	cmp	r3, #1
 8005572:	d007      	beq.n	8005584 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	619a      	str	r2, [r3, #24]
  }
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	603b      	str	r3, [r7, #0]
 800559c:	4613      	mov	r3, r2
 800559e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055a0:	e03b      	b.n	800561a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055a2:	69ba      	ldr	r2, [r7, #24]
 80055a4:	6839      	ldr	r1, [r7, #0]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 f8d6 	bl	8005758 <I2C_IsErrorOccurred>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e041      	b.n	800563a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055bc:	d02d      	beq.n	800561a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055be:	f7fe ffc1 	bl	8004544 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d302      	bcc.n	80055d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d122      	bne.n	800561a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	699a      	ldr	r2, [r3, #24]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	4013      	ands	r3, r2
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	bf0c      	ite	eq
 80055e4:	2301      	moveq	r3, #1
 80055e6:	2300      	movne	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d113      	bne.n	800561a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f6:	f043 0220 	orr.w	r2, r3, #32
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2220      	movs	r2, #32
 8005602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e00f      	b.n	800563a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	4013      	ands	r3, r2
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	bf0c      	ite	eq
 800562a:	2301      	moveq	r3, #1
 800562c:	2300      	movne	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	79fb      	ldrb	r3, [r7, #7]
 8005634:	429a      	cmp	r2, r3
 8005636:	d0b4      	beq.n	80055a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b084      	sub	sp, #16
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800564e:	e033      	b.n	80056b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f87f 	bl	8005758 <I2C_IsErrorOccurred>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e031      	b.n	80056c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566a:	d025      	beq.n	80056b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566c:	f7fe ff6a 	bl	8004544 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	429a      	cmp	r2, r3
 800567a:	d302      	bcc.n	8005682 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d11a      	bne.n	80056b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b02      	cmp	r3, #2
 800568e:	d013      	beq.n	80056b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005694:	f043 0220 	orr.w	r2, r3, #32
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e007      	b.n	80056c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d1c4      	bne.n	8005650 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056dc:	e02f      	b.n	800573e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 f838 	bl	8005758 <I2C_IsErrorOccurred>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e02d      	b.n	800574e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f2:	f7fe ff27 	bl	8004544 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11a      	bne.n	800573e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b20      	cmp	r3, #32
 8005714:	d013      	beq.n	800573e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	f043 0220 	orr.w	r2, r3, #32
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e007      	b.n	800574e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b20      	cmp	r3, #32
 800574a:	d1c8      	bne.n	80056de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b08a      	sub	sp, #40	@ 0x28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	f003 0310 	and.w	r3, r3, #16
 8005780:	2b00      	cmp	r3, #0
 8005782:	d068      	beq.n	8005856 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2210      	movs	r2, #16
 800578a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800578c:	e049      	b.n	8005822 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d045      	beq.n	8005822 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005796:	f7fe fed5 	bl	8004544 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d302      	bcc.n	80057ac <I2C_IsErrorOccurred+0x54>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d13a      	bne.n	8005822 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057ce:	d121      	bne.n	8005814 <I2C_IsErrorOccurred+0xbc>
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80057d6:	d01d      	beq.n	8005814 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80057d8:	7cfb      	ldrb	r3, [r7, #19]
 80057da:	2b20      	cmp	r3, #32
 80057dc:	d01a      	beq.n	8005814 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80057ee:	f7fe fea9 	bl	8004544 <HAL_GetTick>
 80057f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057f4:	e00e      	b.n	8005814 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80057f6:	f7fe fea5 	bl	8004544 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b19      	cmp	r3, #25
 8005802:	d907      	bls.n	8005814 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	f043 0320 	orr.w	r3, r3, #32
 800580a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8005812:	e006      	b.n	8005822 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b20      	cmp	r3, #32
 8005820:	d1e9      	bne.n	80057f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b20      	cmp	r3, #32
 800582e:	d003      	beq.n	8005838 <I2C_IsErrorOccurred+0xe0>
 8005830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0aa      	beq.n	800578e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005838:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800583c:	2b00      	cmp	r3, #0
 800583e:	d103      	bne.n	8005848 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2220      	movs	r2, #32
 8005846:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	f043 0304 	orr.w	r3, r3, #4
 800584e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005878:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00b      	beq.n	80058a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800589a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80058a2:	69bb      	ldr	r3, [r7, #24]
 80058a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00b      	beq.n	80058c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	f043 0302 	orr.w	r3, r3, #2
 80058b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80058c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d01c      	beq.n	8005906 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f7ff fe3b 	bl	8005548 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6859      	ldr	r1, [r3, #4]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005914 <I2C_IsErrorOccurred+0x1bc>)
 80058de:	400b      	ands	r3, r1
 80058e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005906:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800590a:	4618      	mov	r0, r3
 800590c:	3728      	adds	r7, #40	@ 0x28
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	fe00e800 	.word	0xfe00e800

08005918 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	460b      	mov	r3, r1
 8005924:	817b      	strh	r3, [r7, #10]
 8005926:	4613      	mov	r3, r2
 8005928:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800592a:	897b      	ldrh	r3, [r7, #10]
 800592c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005930:	7a7b      	ldrb	r3, [r7, #9]
 8005932:	041b      	lsls	r3, r3, #16
 8005934:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005938:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	4313      	orrs	r3, r2
 8005942:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005946:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	0d5b      	lsrs	r3, r3, #21
 8005952:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005956:	4b08      	ldr	r3, [pc, #32]	@ (8005978 <I2C_TransferConfig+0x60>)
 8005958:	430b      	orrs	r3, r1
 800595a:	43db      	mvns	r3, r3
 800595c:	ea02 0103 	and.w	r1, r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	03ff63ff 	.word	0x03ff63ff

0800597c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b20      	cmp	r3, #32
 8005990:	d138      	bne.n	8005a04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800599c:	2302      	movs	r3, #2
 800599e:	e032      	b.n	8005a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2224      	movs	r2, #36	@ 0x24
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0201 	bic.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80059ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6819      	ldr	r1, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a00:	2300      	movs	r3, #0
 8005a02:	e000      	b.n	8005a06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005a04:	2302      	movs	r3, #2
  }
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d139      	bne.n	8005a9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005a32:	2302      	movs	r3, #2
 8005a34:	e033      	b.n	8005a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2224      	movs	r2, #36	@ 0x24
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005a64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e000      	b.n	8005a9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
  }
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
	...

08005aac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ab0:	4b05      	ldr	r3, [pc, #20]	@ (8005ac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a04      	ldr	r2, [pc, #16]	@ (8005ac8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005aba:	6013      	str	r3, [r2, #0]
}
 8005abc:	bf00      	nop
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40007000 	.word	0x40007000

08005acc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005ad0:	4b04      	ldr	r3, [pc, #16]	@ (8005ae4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40007000 	.word	0x40007000

08005ae8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af6:	d130      	bne.n	8005b5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005af8:	4b23      	ldr	r3, [pc, #140]	@ (8005b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b04:	d038      	beq.n	8005b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b06:	4b20      	ldr	r3, [pc, #128]	@ (8005b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b0e:	4a1e      	ldr	r2, [pc, #120]	@ (8005b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b16:	4b1d      	ldr	r3, [pc, #116]	@ (8005b8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2232      	movs	r2, #50	@ 0x32
 8005b1c:	fb02 f303 	mul.w	r3, r2, r3
 8005b20:	4a1b      	ldr	r2, [pc, #108]	@ (8005b90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005b22:	fba2 2303 	umull	r2, r3, r2, r3
 8005b26:	0c9b      	lsrs	r3, r3, #18
 8005b28:	3301      	adds	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b2c:	e002      	b.n	8005b34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b34:	4b14      	ldr	r3, [pc, #80]	@ (8005b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b40:	d102      	bne.n	8005b48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f2      	bne.n	8005b2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b48:	4b0f      	ldr	r3, [pc, #60]	@ (8005b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b54:	d110      	bne.n	8005b78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e00f      	b.n	8005b7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b66:	d007      	beq.n	8005b78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b68:	4b07      	ldr	r3, [pc, #28]	@ (8005b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005b70:	4a05      	ldr	r2, [pc, #20]	@ (8005b88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	40007000 	.word	0x40007000
 8005b8c:	2000000c 	.word	0x2000000c
 8005b90:	431bde83 	.word	0x431bde83

08005b94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b088      	sub	sp, #32
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f000 bc02 	b.w	80063ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ba8:	4b96      	ldr	r3, [pc, #600]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 030c 	and.w	r3, r3, #12
 8005bb0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bb2:	4b94      	ldr	r3, [pc, #592]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80e4 	beq.w	8005d92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <HAL_RCC_OscConfig+0x4c>
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	2b0c      	cmp	r3, #12
 8005bd4:	f040 808b 	bne.w	8005cee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	f040 8087 	bne.w	8005cee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005be0:	4b88      	ldr	r3, [pc, #544]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x64>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e3d9      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a1a      	ldr	r2, [r3, #32]
 8005bfc:	4b81      	ldr	r3, [pc, #516]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <HAL_RCC_OscConfig+0x7e>
 8005c08:	4b7e      	ldr	r3, [pc, #504]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c10:	e005      	b.n	8005c1e <HAL_RCC_OscConfig+0x8a>
 8005c12:	4b7c      	ldr	r3, [pc, #496]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c18:	091b      	lsrs	r3, r3, #4
 8005c1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d223      	bcs.n	8005c6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fd8c 	bl	8006744 <RCC_SetFlashLatencyFromMSIRange>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e3ba      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c36:	4b73      	ldr	r3, [pc, #460]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a72      	ldr	r2, [pc, #456]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c3c:	f043 0308 	orr.w	r3, r3, #8
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4b70      	ldr	r3, [pc, #448]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	496d      	ldr	r1, [pc, #436]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c54:	4b6b      	ldr	r3, [pc, #428]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	4968      	ldr	r1, [pc, #416]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	604b      	str	r3, [r1, #4]
 8005c68:	e025      	b.n	8005cb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c6a:	4b66      	ldr	r3, [pc, #408]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a65      	ldr	r2, [pc, #404]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c70:	f043 0308 	orr.w	r3, r3, #8
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	4b63      	ldr	r3, [pc, #396]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	4960      	ldr	r1, [pc, #384]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c88:	4b5e      	ldr	r3, [pc, #376]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	495b      	ldr	r1, [pc, #364]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d109      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fd4c 	bl	8006744 <RCC_SetFlashLatencyFromMSIRange>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e37a      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cb6:	f000 fc81 	bl	80065bc <HAL_RCC_GetSysClockFreq>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	4b51      	ldr	r3, [pc, #324]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	091b      	lsrs	r3, r3, #4
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	4950      	ldr	r1, [pc, #320]	@ (8005e08 <HAL_RCC_OscConfig+0x274>)
 8005cc8:	5ccb      	ldrb	r3, [r1, r3]
 8005cca:	f003 031f 	and.w	r3, r3, #31
 8005cce:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd2:	4a4e      	ldr	r2, [pc, #312]	@ (8005e0c <HAL_RCC_OscConfig+0x278>)
 8005cd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8005e10 <HAL_RCC_OscConfig+0x27c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fe fbe2 	bl	80044a4 <HAL_InitTick>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d052      	beq.n	8005d90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
 8005cec:	e35e      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d032      	beq.n	8005d5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005cf6:	4b43      	ldr	r3, [pc, #268]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a42      	ldr	r2, [pc, #264]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d02:	f7fe fc1f 	bl	8004544 <HAL_GetTick>
 8005d06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d0a:	f7fe fc1b 	bl	8004544 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e347      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d1c:	4b39      	ldr	r3, [pc, #228]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0302 	and.w	r3, r3, #2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f0      	beq.n	8005d0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d28:	4b36      	ldr	r3, [pc, #216]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a35      	ldr	r2, [pc, #212]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d2e:	f043 0308 	orr.w	r3, r3, #8
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4b33      	ldr	r3, [pc, #204]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	4930      	ldr	r1, [pc, #192]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d46:	4b2f      	ldr	r3, [pc, #188]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	492b      	ldr	r1, [pc, #172]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	604b      	str	r3, [r1, #4]
 8005d5a:	e01a      	b.n	8005d92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d5c:	4b29      	ldr	r3, [pc, #164]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a28      	ldr	r2, [pc, #160]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d68:	f7fe fbec 	bl	8004544 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d70:	f7fe fbe8 	bl	8004544 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e314      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005d82:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f0      	bne.n	8005d70 <HAL_RCC_OscConfig+0x1dc>
 8005d8e:	e000      	b.n	8005d92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d073      	beq.n	8005e86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d005      	beq.n	8005db0 <HAL_RCC_OscConfig+0x21c>
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	2b0c      	cmp	r3, #12
 8005da8:	d10e      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d10b      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db0:	4b14      	ldr	r3, [pc, #80]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d063      	beq.n	8005e84 <HAL_RCC_OscConfig+0x2f0>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d15f      	bne.n	8005e84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e2f1      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dd0:	d106      	bne.n	8005de0 <HAL_RCC_OscConfig+0x24c>
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	e025      	b.n	8005e2c <HAL_RCC_OscConfig+0x298>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005de8:	d114      	bne.n	8005e14 <HAL_RCC_OscConfig+0x280>
 8005dea:	4b06      	ldr	r3, [pc, #24]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a05      	ldr	r2, [pc, #20]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4b03      	ldr	r3, [pc, #12]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a02      	ldr	r2, [pc, #8]	@ (8005e04 <HAL_RCC_OscConfig+0x270>)
 8005dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	e013      	b.n	8005e2c <HAL_RCC_OscConfig+0x298>
 8005e04:	40021000 	.word	0x40021000
 8005e08:	08008a7c 	.word	0x08008a7c
 8005e0c:	2000000c 	.word	0x2000000c
 8005e10:	20000010 	.word	0x20000010
 8005e14:	4ba0      	ldr	r3, [pc, #640]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a9f      	ldr	r2, [pc, #636]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e1e:	6013      	str	r3, [r2, #0]
 8005e20:	4b9d      	ldr	r3, [pc, #628]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a9c      	ldr	r2, [pc, #624]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d013      	beq.n	8005e5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e34:	f7fe fb86 	bl	8004544 <HAL_GetTick>
 8005e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e3c:	f7fe fb82 	bl	8004544 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b64      	cmp	r3, #100	@ 0x64
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e2ae      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e4e:	4b92      	ldr	r3, [pc, #584]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0f0      	beq.n	8005e3c <HAL_RCC_OscConfig+0x2a8>
 8005e5a:	e014      	b.n	8005e86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5c:	f7fe fb72 	bl	8004544 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e64:	f7fe fb6e 	bl	8004544 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b64      	cmp	r3, #100	@ 0x64
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e29a      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e76:	4b88      	ldr	r3, [pc, #544]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x2d0>
 8005e82:	e000      	b.n	8005e86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d060      	beq.n	8005f54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b04      	cmp	r3, #4
 8005e96:	d005      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x310>
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b0c      	cmp	r3, #12
 8005e9c:	d119      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d116      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ea4:	4b7c      	ldr	r3, [pc, #496]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <HAL_RCC_OscConfig+0x328>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e277      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ebc:	4b76      	ldr	r3, [pc, #472]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	061b      	lsls	r3, r3, #24
 8005eca:	4973      	ldr	r1, [pc, #460]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed0:	e040      	b.n	8005f54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d023      	beq.n	8005f22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eda:	4b6f      	ldr	r3, [pc, #444]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a6e      	ldr	r2, [pc, #440]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee6:	f7fe fb2d 	bl	8004544 <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eec:	e008      	b.n	8005f00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eee:	f7fe fb29 	bl	8004544 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d901      	bls.n	8005f00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e255      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f00:	4b65      	ldr	r3, [pc, #404]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0f0      	beq.n	8005eee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f0c:	4b62      	ldr	r3, [pc, #392]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	061b      	lsls	r3, r3, #24
 8005f1a:	495f      	ldr	r1, [pc, #380]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	604b      	str	r3, [r1, #4]
 8005f20:	e018      	b.n	8005f54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f22:	4b5d      	ldr	r3, [pc, #372]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a5c      	ldr	r2, [pc, #368]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f2e:	f7fe fb09 	bl	8004544 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f36:	f7fe fb05 	bl	8004544 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e231      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f48:	4b53      	ldr	r3, [pc, #332]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f0      	bne.n	8005f36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d03c      	beq.n	8005fda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d01c      	beq.n	8005fa2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f68:	4b4b      	ldr	r3, [pc, #300]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f6e:	4a4a      	ldr	r2, [pc, #296]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f70:	f043 0301 	orr.w	r3, r3, #1
 8005f74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f78:	f7fe fae4 	bl	8004544 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f80:	f7fe fae0 	bl	8004544 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e20c      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f92:	4b41      	ldr	r3, [pc, #260]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0ef      	beq.n	8005f80 <HAL_RCC_OscConfig+0x3ec>
 8005fa0:	e01b      	b.n	8005fda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fa2:	4b3d      	ldr	r3, [pc, #244]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fa8:	4a3b      	ldr	r2, [pc, #236]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005faa:	f023 0301 	bic.w	r3, r3, #1
 8005fae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fb2:	f7fe fac7 	bl	8004544 <HAL_GetTick>
 8005fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fb8:	e008      	b.n	8005fcc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fba:	f7fe fac3 	bl	8004544 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e1ef      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fcc:	4b32      	ldr	r3, [pc, #200]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d1ef      	bne.n	8005fba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f000 80a6 	beq.w	8006134 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005fec:	4b2a      	ldr	r3, [pc, #168]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005fee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10d      	bne.n	8006014 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ff8:	4b27      	ldr	r3, [pc, #156]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffc:	4a26      	ldr	r2, [pc, #152]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8005ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006002:	6593      	str	r3, [r2, #88]	@ 0x58
 8006004:	4b24      	ldr	r3, [pc, #144]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8006006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006010:	2301      	movs	r3, #1
 8006012:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006014:	4b21      	ldr	r3, [pc, #132]	@ (800609c <HAL_RCC_OscConfig+0x508>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d118      	bne.n	8006052 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006020:	4b1e      	ldr	r3, [pc, #120]	@ (800609c <HAL_RCC_OscConfig+0x508>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a1d      	ldr	r2, [pc, #116]	@ (800609c <HAL_RCC_OscConfig+0x508>)
 8006026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800602a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800602c:	f7fe fa8a 	bl	8004544 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006034:	f7fe fa86 	bl	8004544 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e1b2      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006046:	4b15      	ldr	r3, [pc, #84]	@ (800609c <HAL_RCC_OscConfig+0x508>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d108      	bne.n	800606c <HAL_RCC_OscConfig+0x4d8>
 800605a:	4b0f      	ldr	r3, [pc, #60]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 800605c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006060:	4a0d      	ldr	r2, [pc, #52]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8006062:	f043 0301 	orr.w	r3, r3, #1
 8006066:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800606a:	e029      	b.n	80060c0 <HAL_RCC_OscConfig+0x52c>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b05      	cmp	r3, #5
 8006072:	d115      	bne.n	80060a0 <HAL_RCC_OscConfig+0x50c>
 8006074:	4b08      	ldr	r3, [pc, #32]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8006076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607a:	4a07      	ldr	r2, [pc, #28]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 800607c:	f043 0304 	orr.w	r3, r3, #4
 8006080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006084:	4b04      	ldr	r3, [pc, #16]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800608a:	4a03      	ldr	r2, [pc, #12]	@ (8006098 <HAL_RCC_OscConfig+0x504>)
 800608c:	f043 0301 	orr.w	r3, r3, #1
 8006090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006094:	e014      	b.n	80060c0 <HAL_RCC_OscConfig+0x52c>
 8006096:	bf00      	nop
 8006098:	40021000 	.word	0x40021000
 800609c:	40007000 	.word	0x40007000
 80060a0:	4b9a      	ldr	r3, [pc, #616]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a6:	4a99      	ldr	r2, [pc, #612]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80060b0:	4b96      	ldr	r3, [pc, #600]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b6:	4a95      	ldr	r2, [pc, #596]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80060b8:	f023 0304 	bic.w	r3, r3, #4
 80060bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d016      	beq.n	80060f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060c8:	f7fe fa3c 	bl	8004544 <HAL_GetTick>
 80060cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060ce:	e00a      	b.n	80060e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060d0:	f7fe fa38 	bl	8004544 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060de:	4293      	cmp	r3, r2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e162      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060e6:	4b89      	ldr	r3, [pc, #548]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0ed      	beq.n	80060d0 <HAL_RCC_OscConfig+0x53c>
 80060f4:	e015      	b.n	8006122 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f6:	f7fe fa25 	bl	8004544 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060fc:	e00a      	b.n	8006114 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fe:	f7fe fa21 	bl	8004544 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800610c:	4293      	cmp	r3, r2
 800610e:	d901      	bls.n	8006114 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e14b      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006114:	4b7d      	ldr	r3, [pc, #500]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1ed      	bne.n	80060fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006122:	7ffb      	ldrb	r3, [r7, #31]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d105      	bne.n	8006134 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006128:	4b78      	ldr	r3, [pc, #480]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 800612a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612c:	4a77      	ldr	r2, [pc, #476]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 800612e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006132:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b00      	cmp	r3, #0
 800613e:	d03c      	beq.n	80061ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	d01c      	beq.n	8006182 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006148:	4b70      	ldr	r3, [pc, #448]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 800614a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800614e:	4a6f      	ldr	r2, [pc, #444]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fe f9f4 	bl	8004544 <HAL_GetTick>
 800615c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800615e:	e008      	b.n	8006172 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006160:	f7fe f9f0 	bl	8004544 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d901      	bls.n	8006172 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e11c      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006172:	4b66      	ldr	r3, [pc, #408]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 8006174:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ef      	beq.n	8006160 <HAL_RCC_OscConfig+0x5cc>
 8006180:	e01b      	b.n	80061ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006182:	4b62      	ldr	r3, [pc, #392]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 8006184:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006188:	4a60      	ldr	r2, [pc, #384]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 800618a:	f023 0301 	bic.w	r3, r3, #1
 800618e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006192:	f7fe f9d7 	bl	8004544 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800619a:	f7fe f9d3 	bl	8004544 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e0ff      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061ac:	4b57      	ldr	r3, [pc, #348]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80061ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1ef      	bne.n	800619a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80f3 	beq.w	80063aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	f040 80c9 	bne.w	8006360 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80061ce:	4b4f      	ldr	r3, [pc, #316]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f003 0203 	and.w	r2, r3, #3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	429a      	cmp	r2, r3
 80061e0:	d12c      	bne.n	800623c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ec:	3b01      	subs	r3, #1
 80061ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d123      	bne.n	800623c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006200:	429a      	cmp	r2, r3
 8006202:	d11b      	bne.n	800623c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006210:	429a      	cmp	r2, r3
 8006212:	d113      	bne.n	800623c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	3b01      	subs	r3, #1
 8006222:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d109      	bne.n	800623c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006232:	085b      	lsrs	r3, r3, #1
 8006234:	3b01      	subs	r3, #1
 8006236:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006238:	429a      	cmp	r2, r3
 800623a:	d06b      	beq.n	8006314 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	2b0c      	cmp	r3, #12
 8006240:	d062      	beq.n	8006308 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006242:	4b32      	ldr	r3, [pc, #200]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e0ac      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006252:	4b2e      	ldr	r3, [pc, #184]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a2d      	ldr	r2, [pc, #180]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 8006258:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800625c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800625e:	f7fe f971 	bl	8004544 <HAL_GetTick>
 8006262:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006264:	e008      	b.n	8006278 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006266:	f7fe f96d 	bl	8004544 <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d901      	bls.n	8006278 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e099      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006278:	4b24      	ldr	r3, [pc, #144]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f0      	bne.n	8006266 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006284:	4b21      	ldr	r3, [pc, #132]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	4b21      	ldr	r3, [pc, #132]	@ (8006310 <HAL_RCC_OscConfig+0x77c>)
 800628a:	4013      	ands	r3, r2
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006294:	3a01      	subs	r2, #1
 8006296:	0112      	lsls	r2, r2, #4
 8006298:	4311      	orrs	r1, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800629e:	0212      	lsls	r2, r2, #8
 80062a0:	4311      	orrs	r1, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062a6:	0852      	lsrs	r2, r2, #1
 80062a8:	3a01      	subs	r2, #1
 80062aa:	0552      	lsls	r2, r2, #21
 80062ac:	4311      	orrs	r1, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80062b2:	0852      	lsrs	r2, r2, #1
 80062b4:	3a01      	subs	r2, #1
 80062b6:	0652      	lsls	r2, r2, #25
 80062b8:	4311      	orrs	r1, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80062be:	06d2      	lsls	r2, r2, #27
 80062c0:	430a      	orrs	r2, r1
 80062c2:	4912      	ldr	r1, [pc, #72]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80062c8:	4b10      	ldr	r3, [pc, #64]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a0f      	ldr	r2, [pc, #60]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80062ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062d4:	4b0d      	ldr	r3, [pc, #52]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	4a0c      	ldr	r2, [pc, #48]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80062da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80062e0:	f7fe f930 	bl	8004544 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062e8:	f7fe f92c 	bl	8004544 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e058      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062fa:	4b04      	ldr	r3, [pc, #16]	@ (800630c <HAL_RCC_OscConfig+0x778>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0f0      	beq.n	80062e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006306:	e050      	b.n	80063aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e04f      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
 800630c:	40021000 	.word	0x40021000
 8006310:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006314:	4b27      	ldr	r3, [pc, #156]	@ (80063b4 <HAL_RCC_OscConfig+0x820>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d144      	bne.n	80063aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006320:	4b24      	ldr	r3, [pc, #144]	@ (80063b4 <HAL_RCC_OscConfig+0x820>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a23      	ldr	r2, [pc, #140]	@ (80063b4 <HAL_RCC_OscConfig+0x820>)
 8006326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800632a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800632c:	4b21      	ldr	r3, [pc, #132]	@ (80063b4 <HAL_RCC_OscConfig+0x820>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	4a20      	ldr	r2, [pc, #128]	@ (80063b4 <HAL_RCC_OscConfig+0x820>)
 8006332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006336:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006338:	f7fe f904 	bl	8004544 <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006340:	f7fe f900 	bl	8004544 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e02c      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006352:	4b18      	ldr	r3, [pc, #96]	@ (80063b4 <HAL_RCC_OscConfig+0x820>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d0f0      	beq.n	8006340 <HAL_RCC_OscConfig+0x7ac>
 800635e:	e024      	b.n	80063aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	2b0c      	cmp	r3, #12
 8006364:	d01f      	beq.n	80063a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006366:	4b13      	ldr	r3, [pc, #76]	@ (80063b4 <HAL_RCC_OscConfig+0x820>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a12      	ldr	r2, [pc, #72]	@ (80063b4 <HAL_RCC_OscConfig+0x820>)
 800636c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006372:	f7fe f8e7 	bl	8004544 <HAL_GetTick>
 8006376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006378:	e008      	b.n	800638c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800637a:	f7fe f8e3 	bl	8004544 <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d901      	bls.n	800638c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e00f      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800638c:	4b09      	ldr	r3, [pc, #36]	@ (80063b4 <HAL_RCC_OscConfig+0x820>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1f0      	bne.n	800637a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006398:	4b06      	ldr	r3, [pc, #24]	@ (80063b4 <HAL_RCC_OscConfig+0x820>)
 800639a:	68da      	ldr	r2, [r3, #12]
 800639c:	4905      	ldr	r1, [pc, #20]	@ (80063b4 <HAL_RCC_OscConfig+0x820>)
 800639e:	4b06      	ldr	r3, [pc, #24]	@ (80063b8 <HAL_RCC_OscConfig+0x824>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	60cb      	str	r3, [r1, #12]
 80063a4:	e001      	b.n	80063aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80063a6:	2301      	movs	r3, #1
 80063a8:	e000      	b.n	80063ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3720      	adds	r7, #32
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	40021000 	.word	0x40021000
 80063b8:	feeefffc 	.word	0xfeeefffc

080063bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0e7      	b.n	80065a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063d0:	4b75      	ldr	r3, [pc, #468]	@ (80065a8 <HAL_RCC_ClockConfig+0x1ec>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0307 	and.w	r3, r3, #7
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d910      	bls.n	8006400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063de:	4b72      	ldr	r3, [pc, #456]	@ (80065a8 <HAL_RCC_ClockConfig+0x1ec>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f023 0207 	bic.w	r2, r3, #7
 80063e6:	4970      	ldr	r1, [pc, #448]	@ (80065a8 <HAL_RCC_ClockConfig+0x1ec>)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ee:	4b6e      	ldr	r3, [pc, #440]	@ (80065a8 <HAL_RCC_ClockConfig+0x1ec>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d001      	beq.n	8006400 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e0cf      	b.n	80065a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f003 0302 	and.w	r3, r3, #2
 8006408:	2b00      	cmp	r3, #0
 800640a:	d010      	beq.n	800642e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	4b66      	ldr	r3, [pc, #408]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006418:	429a      	cmp	r2, r3
 800641a:	d908      	bls.n	800642e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800641c:	4b63      	ldr	r3, [pc, #396]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	4960      	ldr	r1, [pc, #384]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 800642a:	4313      	orrs	r3, r2
 800642c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d04c      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b03      	cmp	r3, #3
 8006440:	d107      	bne.n	8006452 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006442:	4b5a      	ldr	r3, [pc, #360]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d121      	bne.n	8006492 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e0a6      	b.n	80065a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d107      	bne.n	800646a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800645a:	4b54      	ldr	r3, [pc, #336]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d115      	bne.n	8006492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e09a      	b.n	80065a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006472:	4b4e      	ldr	r3, [pc, #312]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e08e      	b.n	80065a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006482:	4b4a      	ldr	r3, [pc, #296]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e086      	b.n	80065a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006492:	4b46      	ldr	r3, [pc, #280]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f023 0203 	bic.w	r2, r3, #3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	4943      	ldr	r1, [pc, #268]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a4:	f7fe f84e 	bl	8004544 <HAL_GetTick>
 80064a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064aa:	e00a      	b.n	80064c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ac:	f7fe f84a 	bl	8004544 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e06e      	b.n	80065a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064c2:	4b3a      	ldr	r3, [pc, #232]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 020c 	and.w	r2, r3, #12
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d1eb      	bne.n	80064ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d010      	beq.n	8006502 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	4b31      	ldr	r3, [pc, #196]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d208      	bcs.n	8006502 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064f0:	4b2e      	ldr	r3, [pc, #184]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	492b      	ldr	r1, [pc, #172]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006502:	4b29      	ldr	r3, [pc, #164]	@ (80065a8 <HAL_RCC_ClockConfig+0x1ec>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f003 0307 	and.w	r3, r3, #7
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	429a      	cmp	r2, r3
 800650e:	d210      	bcs.n	8006532 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006510:	4b25      	ldr	r3, [pc, #148]	@ (80065a8 <HAL_RCC_ClockConfig+0x1ec>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f023 0207 	bic.w	r2, r3, #7
 8006518:	4923      	ldr	r1, [pc, #140]	@ (80065a8 <HAL_RCC_ClockConfig+0x1ec>)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006520:	4b21      	ldr	r3, [pc, #132]	@ (80065a8 <HAL_RCC_ClockConfig+0x1ec>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	429a      	cmp	r2, r3
 800652c:	d001      	beq.n	8006532 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e036      	b.n	80065a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0304 	and.w	r3, r3, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	d008      	beq.n	8006550 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800653e:	4b1b      	ldr	r3, [pc, #108]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	4918      	ldr	r1, [pc, #96]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 800654c:	4313      	orrs	r3, r2
 800654e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d009      	beq.n	8006570 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800655c:	4b13      	ldr	r3, [pc, #76]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4910      	ldr	r1, [pc, #64]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 800656c:	4313      	orrs	r3, r2
 800656e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006570:	f000 f824 	bl	80065bc <HAL_RCC_GetSysClockFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b0d      	ldr	r3, [pc, #52]	@ (80065ac <HAL_RCC_ClockConfig+0x1f0>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	091b      	lsrs	r3, r3, #4
 800657c:	f003 030f 	and.w	r3, r3, #15
 8006580:	490b      	ldr	r1, [pc, #44]	@ (80065b0 <HAL_RCC_ClockConfig+0x1f4>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
 800658c:	4a09      	ldr	r2, [pc, #36]	@ (80065b4 <HAL_RCC_ClockConfig+0x1f8>)
 800658e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006590:	4b09      	ldr	r3, [pc, #36]	@ (80065b8 <HAL_RCC_ClockConfig+0x1fc>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4618      	mov	r0, r3
 8006596:	f7fd ff85 	bl	80044a4 <HAL_InitTick>
 800659a:	4603      	mov	r3, r0
 800659c:	72fb      	strb	r3, [r7, #11]

  return status;
 800659e:	7afb      	ldrb	r3, [r7, #11]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	40022000 	.word	0x40022000
 80065ac:	40021000 	.word	0x40021000
 80065b0:	08008a7c 	.word	0x08008a7c
 80065b4:	2000000c 	.word	0x2000000c
 80065b8:	20000010 	.word	0x20000010

080065bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	b089      	sub	sp, #36	@ 0x24
 80065c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	2300      	movs	r3, #0
 80065c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ca:	4b3e      	ldr	r3, [pc, #248]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 030c 	and.w	r3, r3, #12
 80065d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065d4:	4b3b      	ldr	r3, [pc, #236]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0303 	and.w	r3, r3, #3
 80065dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <HAL_RCC_GetSysClockFreq+0x34>
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	2b0c      	cmp	r3, #12
 80065e8:	d121      	bne.n	800662e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d11e      	bne.n	800662e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80065f0:	4b34      	ldr	r3, [pc, #208]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d107      	bne.n	800660c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80065fc:	4b31      	ldr	r3, [pc, #196]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80065fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006602:	0a1b      	lsrs	r3, r3, #8
 8006604:	f003 030f 	and.w	r3, r3, #15
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	e005      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800660c:	4b2d      	ldr	r3, [pc, #180]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	091b      	lsrs	r3, r3, #4
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006618:	4a2b      	ldr	r2, [pc, #172]	@ (80066c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006620:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10d      	bne.n	8006644 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800662c:	e00a      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b04      	cmp	r3, #4
 8006632:	d102      	bne.n	800663a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006634:	4b25      	ldr	r3, [pc, #148]	@ (80066cc <HAL_RCC_GetSysClockFreq+0x110>)
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	e004      	b.n	8006644 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b08      	cmp	r3, #8
 800663e:	d101      	bne.n	8006644 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006640:	4b23      	ldr	r3, [pc, #140]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006642:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	2b0c      	cmp	r3, #12
 8006648:	d134      	bne.n	80066b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800664a:	4b1e      	ldr	r3, [pc, #120]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f003 0303 	and.w	r3, r3, #3
 8006652:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	2b02      	cmp	r3, #2
 8006658:	d003      	beq.n	8006662 <HAL_RCC_GetSysClockFreq+0xa6>
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	2b03      	cmp	r3, #3
 800665e:	d003      	beq.n	8006668 <HAL_RCC_GetSysClockFreq+0xac>
 8006660:	e005      	b.n	800666e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006662:	4b1a      	ldr	r3, [pc, #104]	@ (80066cc <HAL_RCC_GetSysClockFreq+0x110>)
 8006664:	617b      	str	r3, [r7, #20]
      break;
 8006666:	e005      	b.n	8006674 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006668:	4b19      	ldr	r3, [pc, #100]	@ (80066d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800666a:	617b      	str	r3, [r7, #20]
      break;
 800666c:	e002      	b.n	8006674 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	617b      	str	r3, [r7, #20]
      break;
 8006672:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006674:	4b13      	ldr	r3, [pc, #76]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	3301      	adds	r3, #1
 8006680:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006682:	4b10      	ldr	r3, [pc, #64]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	0a1b      	lsrs	r3, r3, #8
 8006688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	fb03 f202 	mul.w	r2, r3, r2
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	fbb2 f3f3 	udiv	r3, r2, r3
 8006698:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800669a:	4b0a      	ldr	r3, [pc, #40]	@ (80066c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	0e5b      	lsrs	r3, r3, #25
 80066a0:	f003 0303 	and.w	r3, r3, #3
 80066a4:	3301      	adds	r3, #1
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80066b4:	69bb      	ldr	r3, [r7, #24]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3724      	adds	r7, #36	@ 0x24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	40021000 	.word	0x40021000
 80066c8:	08008a94 	.word	0x08008a94
 80066cc:	00f42400 	.word	0x00f42400
 80066d0:	007a1200 	.word	0x007a1200

080066d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066d8:	4b03      	ldr	r3, [pc, #12]	@ (80066e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80066da:	681b      	ldr	r3, [r3, #0]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	2000000c 	.word	0x2000000c

080066ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80066f0:	f7ff fff0 	bl	80066d4 <HAL_RCC_GetHCLKFreq>
 80066f4:	4602      	mov	r2, r0
 80066f6:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	4904      	ldr	r1, [pc, #16]	@ (8006714 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006702:	5ccb      	ldrb	r3, [r1, r3]
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800670c:	4618      	mov	r0, r3
 800670e:	bd80      	pop	{r7, pc}
 8006710:	40021000 	.word	0x40021000
 8006714:	08008a8c 	.word	0x08008a8c

08006718 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800671c:	f7ff ffda 	bl	80066d4 <HAL_RCC_GetHCLKFreq>
 8006720:	4602      	mov	r2, r0
 8006722:	4b06      	ldr	r3, [pc, #24]	@ (800673c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	0adb      	lsrs	r3, r3, #11
 8006728:	f003 0307 	and.w	r3, r3, #7
 800672c:	4904      	ldr	r1, [pc, #16]	@ (8006740 <HAL_RCC_GetPCLK2Freq+0x28>)
 800672e:	5ccb      	ldrb	r3, [r1, r3]
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006738:	4618      	mov	r0, r3
 800673a:	bd80      	pop	{r7, pc}
 800673c:	40021000 	.word	0x40021000
 8006740:	08008a8c 	.word	0x08008a8c

08006744 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b086      	sub	sp, #24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800674c:	2300      	movs	r3, #0
 800674e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006750:	4b2a      	ldr	r3, [pc, #168]	@ (80067fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800675c:	f7ff f9b6 	bl	8005acc <HAL_PWREx_GetVoltageRange>
 8006760:	6178      	str	r0, [r7, #20]
 8006762:	e014      	b.n	800678e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006764:	4b25      	ldr	r3, [pc, #148]	@ (80067fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006768:	4a24      	ldr	r2, [pc, #144]	@ (80067fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800676a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800676e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006770:	4b22      	ldr	r3, [pc, #136]	@ (80067fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800677c:	f7ff f9a6 	bl	8005acc <HAL_PWREx_GetVoltageRange>
 8006780:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006782:	4b1e      	ldr	r3, [pc, #120]	@ (80067fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006786:	4a1d      	ldr	r2, [pc, #116]	@ (80067fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006788:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800678c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006794:	d10b      	bne.n	80067ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b80      	cmp	r3, #128	@ 0x80
 800679a:	d919      	bls.n	80067d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2ba0      	cmp	r3, #160	@ 0xa0
 80067a0:	d902      	bls.n	80067a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80067a2:	2302      	movs	r3, #2
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	e013      	b.n	80067d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80067a8:	2301      	movs	r3, #1
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	e010      	b.n	80067d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b80      	cmp	r3, #128	@ 0x80
 80067b2:	d902      	bls.n	80067ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80067b4:	2303      	movs	r3, #3
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	e00a      	b.n	80067d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b80      	cmp	r3, #128	@ 0x80
 80067be:	d102      	bne.n	80067c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80067c0:	2302      	movs	r3, #2
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	e004      	b.n	80067d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b70      	cmp	r3, #112	@ 0x70
 80067ca:	d101      	bne.n	80067d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80067cc:	2301      	movs	r3, #1
 80067ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80067d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006800 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f023 0207 	bic.w	r2, r3, #7
 80067d8:	4909      	ldr	r1, [pc, #36]	@ (8006800 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80067e0:	4b07      	ldr	r3, [pc, #28]	@ (8006800 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0307 	and.w	r3, r3, #7
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d001      	beq.n	80067f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e000      	b.n	80067f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40021000 	.word	0x40021000
 8006800:	40022000 	.word	0x40022000

08006804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800680c:	2300      	movs	r3, #0
 800680e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006810:	2300      	movs	r3, #0
 8006812:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800681c:	2b00      	cmp	r3, #0
 800681e:	d031      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006824:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006828:	d01a      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800682a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800682e:	d814      	bhi.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006830:	2b00      	cmp	r3, #0
 8006832:	d009      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006834:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006838:	d10f      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800683a:	4b5d      	ldr	r3, [pc, #372]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	4a5c      	ldr	r2, [pc, #368]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006844:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006846:	e00c      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	3304      	adds	r3, #4
 800684c:	2100      	movs	r1, #0
 800684e:	4618      	mov	r0, r3
 8006850:	f000 f9de 	bl	8006c10 <RCCEx_PLLSAI1_Config>
 8006854:	4603      	mov	r3, r0
 8006856:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006858:	e003      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	74fb      	strb	r3, [r7, #19]
      break;
 800685e:	e000      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006862:	7cfb      	ldrb	r3, [r7, #19]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006868:	4b51      	ldr	r3, [pc, #324]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800686a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800686e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006876:	494e      	ldr	r1, [pc, #312]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006878:	4313      	orrs	r3, r2
 800687a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800687e:	e001      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006880:	7cfb      	ldrb	r3, [r7, #19]
 8006882:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 809e 	beq.w	80069ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006892:	2300      	movs	r3, #0
 8006894:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006896:	4b46      	ldr	r3, [pc, #280]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800689a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d101      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80068a6:	2300      	movs	r3, #0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00d      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ac:	4b40      	ldr	r3, [pc, #256]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b0:	4a3f      	ldr	r2, [pc, #252]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80068b8:	4b3d      	ldr	r3, [pc, #244]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80068ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c0:	60bb      	str	r3, [r7, #8]
 80068c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068c4:	2301      	movs	r3, #1
 80068c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068c8:	4b3a      	ldr	r3, [pc, #232]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a39      	ldr	r2, [pc, #228]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80068ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068d4:	f7fd fe36 	bl	8004544 <HAL_GetTick>
 80068d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068da:	e009      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068dc:	f7fd fe32 	bl	8004544 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d902      	bls.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	74fb      	strb	r3, [r7, #19]
        break;
 80068ee:	e005      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80068f0:	4b30      	ldr	r3, [pc, #192]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0ef      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80068fc:	7cfb      	ldrb	r3, [r7, #19]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d15a      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006902:	4b2b      	ldr	r3, [pc, #172]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006908:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800690c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d01e      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	429a      	cmp	r2, r3
 800691c:	d019      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800691e:	4b24      	ldr	r3, [pc, #144]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006928:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800692a:	4b21      	ldr	r3, [pc, #132]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800692c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006930:	4a1f      	ldr	r2, [pc, #124]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006932:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006936:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800693a:	4b1d      	ldr	r3, [pc, #116]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800693c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006940:	4a1b      	ldr	r2, [pc, #108]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006946:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800694a:	4a19      	ldr	r2, [pc, #100]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d016      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695c:	f7fd fdf2 	bl	8004544 <HAL_GetTick>
 8006960:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006962:	e00b      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006964:	f7fd fdee 	bl	8004544 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006972:	4293      	cmp	r3, r2
 8006974:	d902      	bls.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	74fb      	strb	r3, [r7, #19]
            break;
 800697a:	e006      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800697c:	4b0c      	ldr	r3, [pc, #48]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0ec      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800698a:	7cfb      	ldrb	r3, [r7, #19]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d10b      	bne.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006990:	4b07      	ldr	r3, [pc, #28]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006996:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800699e:	4904      	ldr	r1, [pc, #16]	@ (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80069a6:	e009      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069a8:	7cfb      	ldrb	r3, [r7, #19]
 80069aa:	74bb      	strb	r3, [r7, #18]
 80069ac:	e006      	b.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80069ae:	bf00      	nop
 80069b0:	40021000 	.word	0x40021000
 80069b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b8:	7cfb      	ldrb	r3, [r7, #19]
 80069ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069bc:	7c7b      	ldrb	r3, [r7, #17]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d105      	bne.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069c2:	4b8a      	ldr	r3, [pc, #552]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c6:	4a89      	ldr	r2, [pc, #548]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069da:	4b84      	ldr	r3, [pc, #528]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e0:	f023 0203 	bic.w	r2, r3, #3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	4980      	ldr	r1, [pc, #512]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069fc:	4b7b      	ldr	r3, [pc, #492]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a02:	f023 020c 	bic.w	r2, r3, #12
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0a:	4978      	ldr	r1, [pc, #480]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a1e:	4b73      	ldr	r3, [pc, #460]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a24:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2c:	496f      	ldr	r1, [pc, #444]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a40:	4b6a      	ldr	r3, [pc, #424]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a46:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a4e:	4967      	ldr	r1, [pc, #412]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a62:	4b62      	ldr	r3, [pc, #392]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a68:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a70:	495e      	ldr	r1, [pc, #376]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d00a      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a84:	4b59      	ldr	r3, [pc, #356]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a92:	4956      	ldr	r1, [pc, #344]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006aa6:	4b51      	ldr	r3, [pc, #324]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	494d      	ldr	r1, [pc, #308]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d028      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ac8:	4b48      	ldr	r3, [pc, #288]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ace:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad6:	4945      	ldr	r1, [pc, #276]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ae6:	d106      	bne.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ae8:	4b40      	ldr	r3, [pc, #256]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	4a3f      	ldr	r2, [pc, #252]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006aee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006af2:	60d3      	str	r3, [r2, #12]
 8006af4:	e011      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006afe:	d10c      	bne.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	2101      	movs	r1, #1
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f882 	bl	8006c10 <RCCEx_PLLSAI1_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006b10:	7cfb      	ldrb	r3, [r7, #19]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8006b16:	7cfb      	ldrb	r3, [r7, #19]
 8006b18:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d028      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b26:	4b31      	ldr	r3, [pc, #196]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b2c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b34:	492d      	ldr	r1, [pc, #180]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b44:	d106      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b46:	4b29      	ldr	r3, [pc, #164]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	4a28      	ldr	r2, [pc, #160]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b4c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b50:	60d3      	str	r3, [r2, #12]
 8006b52:	e011      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b5c:	d10c      	bne.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3304      	adds	r3, #4
 8006b62:	2101      	movs	r1, #1
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 f853 	bl	8006c10 <RCCEx_PLLSAI1_Config>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b6e:	7cfb      	ldrb	r3, [r7, #19]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006b74:	7cfb      	ldrb	r3, [r7, #19]
 8006b76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01c      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b84:	4b19      	ldr	r3, [pc, #100]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b8a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b92:	4916      	ldr	r1, [pc, #88]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ba2:	d10c      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	3304      	adds	r3, #4
 8006ba8:	2102      	movs	r1, #2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 f830 	bl	8006c10 <RCCEx_PLLSAI1_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d001      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006bba:	7cfb      	ldrb	r3, [r7, #19]
 8006bbc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006bca:	4b08      	ldr	r3, [pc, #32]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bd0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd8:	4904      	ldr	r1, [pc, #16]	@ (8006bec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006be0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	40021000 	.word	0x40021000

08006bf0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006bf4:	4b05      	ldr	r3, [pc, #20]	@ (8006c0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a04      	ldr	r2, [pc, #16]	@ (8006c0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006bfa:	f043 0304 	orr.w	r3, r3, #4
 8006bfe:	6013      	str	r3, [r2, #0]
}
 8006c00:	bf00      	nop
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40021000 	.word	0x40021000

08006c10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c1e:	4b74      	ldr	r3, [pc, #464]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d018      	beq.n	8006c5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c2a:	4b71      	ldr	r3, [pc, #452]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f003 0203 	and.w	r2, r3, #3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d10d      	bne.n	8006c56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
       ||
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d009      	beq.n	8006c56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006c42:	4b6b      	ldr	r3, [pc, #428]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	091b      	lsrs	r3, r3, #4
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
       ||
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d047      	beq.n	8006ce6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	73fb      	strb	r3, [r7, #15]
 8006c5a:	e044      	b.n	8006ce6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d018      	beq.n	8006c96 <RCCEx_PLLSAI1_Config+0x86>
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d825      	bhi.n	8006cb4 <RCCEx_PLLSAI1_Config+0xa4>
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d002      	beq.n	8006c72 <RCCEx_PLLSAI1_Config+0x62>
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d009      	beq.n	8006c84 <RCCEx_PLLSAI1_Config+0x74>
 8006c70:	e020      	b.n	8006cb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006c72:	4b5f      	ldr	r3, [pc, #380]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d11d      	bne.n	8006cba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c82:	e01a      	b.n	8006cba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c84:	4b5a      	ldr	r3, [pc, #360]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d116      	bne.n	8006cbe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006c90:	2301      	movs	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c94:	e013      	b.n	8006cbe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c96:	4b56      	ldr	r3, [pc, #344]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10f      	bne.n	8006cc2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ca2:	4b53      	ldr	r3, [pc, #332]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cb2:	e006      	b.n	8006cc2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb8:	e004      	b.n	8006cc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006cba:	bf00      	nop
 8006cbc:	e002      	b.n	8006cc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006cbe:	bf00      	nop
 8006cc0:	e000      	b.n	8006cc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006cc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10d      	bne.n	8006ce6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006cca:	4b49      	ldr	r3, [pc, #292]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6819      	ldr	r1, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	430b      	orrs	r3, r1
 8006ce0:	4943      	ldr	r1, [pc, #268]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006ce6:	7bfb      	ldrb	r3, [r7, #15]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d17c      	bne.n	8006de6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006cec:	4b40      	ldr	r3, [pc, #256]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a3f      	ldr	r2, [pc, #252]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006cf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cf8:	f7fd fc24 	bl	8004544 <HAL_GetTick>
 8006cfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006cfe:	e009      	b.n	8006d14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d00:	f7fd fc20 	bl	8004544 <HAL_GetTick>
 8006d04:	4602      	mov	r2, r0
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d902      	bls.n	8006d14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	73fb      	strb	r3, [r7, #15]
        break;
 8006d12:	e005      	b.n	8006d20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d14:	4b36      	ldr	r3, [pc, #216]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1ef      	bne.n	8006d00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d15f      	bne.n	8006de6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d110      	bne.n	8006d4e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d2c:	4b30      	ldr	r3, [pc, #192]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8006d34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6892      	ldr	r2, [r2, #8]
 8006d3c:	0211      	lsls	r1, r2, #8
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	68d2      	ldr	r2, [r2, #12]
 8006d42:	06d2      	lsls	r2, r2, #27
 8006d44:	430a      	orrs	r2, r1
 8006d46:	492a      	ldr	r1, [pc, #168]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	610b      	str	r3, [r1, #16]
 8006d4c:	e027      	b.n	8006d9e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d112      	bne.n	8006d7a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d54:	4b26      	ldr	r3, [pc, #152]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006d5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	6892      	ldr	r2, [r2, #8]
 8006d64:	0211      	lsls	r1, r2, #8
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	6912      	ldr	r2, [r2, #16]
 8006d6a:	0852      	lsrs	r2, r2, #1
 8006d6c:	3a01      	subs	r2, #1
 8006d6e:	0552      	lsls	r2, r2, #21
 8006d70:	430a      	orrs	r2, r1
 8006d72:	491f      	ldr	r1, [pc, #124]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	610b      	str	r3, [r1, #16]
 8006d78:	e011      	b.n	8006d9e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006d82:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6892      	ldr	r2, [r2, #8]
 8006d8a:	0211      	lsls	r1, r2, #8
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6952      	ldr	r2, [r2, #20]
 8006d90:	0852      	lsrs	r2, r2, #1
 8006d92:	3a01      	subs	r2, #1
 8006d94:	0652      	lsls	r2, r2, #25
 8006d96:	430a      	orrs	r2, r1
 8006d98:	4915      	ldr	r1, [pc, #84]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d9e:	4b14      	ldr	r3, [pc, #80]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a13      	ldr	r2, [pc, #76]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006da4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006da8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006daa:	f7fd fbcb 	bl	8004544 <HAL_GetTick>
 8006dae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006db0:	e009      	b.n	8006dc6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006db2:	f7fd fbc7 	bl	8004544 <HAL_GetTick>
 8006db6:	4602      	mov	r2, r0
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d902      	bls.n	8006dc6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	73fb      	strb	r3, [r7, #15]
          break;
 8006dc4:	e005      	b.n	8006dd2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d0ef      	beq.n	8006db2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d106      	bne.n	8006de6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006dd8:	4b05      	ldr	r3, [pc, #20]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006dda:	691a      	ldr	r2, [r3, #16]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	4903      	ldr	r1, [pc, #12]	@ (8006df0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006de2:	4313      	orrs	r3, r2
 8006de4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	40021000 	.word	0x40021000

08006df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e049      	b.n	8006e9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d106      	bne.n	8006e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fd fa0a 	bl	8004234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4619      	mov	r1, r3
 8006e32:	4610      	mov	r0, r2
 8006e34:	f000 fab2 	bl	800739c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3708      	adds	r7, #8
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
	...

08006ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d001      	beq.n	8006ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e03b      	b.n	8006f34 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0201 	orr.w	r2, r2, #1
 8006ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a19      	ldr	r2, [pc, #100]	@ (8006f40 <HAL_TIM_Base_Start_IT+0x9c>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d009      	beq.n	8006ef2 <HAL_TIM_Base_Start_IT+0x4e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee6:	d004      	beq.n	8006ef2 <HAL_TIM_Base_Start_IT+0x4e>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a15      	ldr	r2, [pc, #84]	@ (8006f44 <HAL_TIM_Base_Start_IT+0xa0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d115      	bne.n	8006f1e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	4b13      	ldr	r3, [pc, #76]	@ (8006f48 <HAL_TIM_Base_Start_IT+0xa4>)
 8006efa:	4013      	ands	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2b06      	cmp	r3, #6
 8006f02:	d015      	beq.n	8006f30 <HAL_TIM_Base_Start_IT+0x8c>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f0a:	d011      	beq.n	8006f30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0201 	orr.w	r2, r2, #1
 8006f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f1c:	e008      	b.n	8006f30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0201 	orr.w	r2, r2, #1
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	e000      	b.n	8006f32 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	40012c00 	.word	0x40012c00
 8006f44:	40014000 	.word	0x40014000
 8006f48:	00010007 	.word	0x00010007

08006f4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68da      	ldr	r2, [r3, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	6a1a      	ldr	r2, [r3, #32]
 8006f6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006f6e:	4013      	ands	r3, r2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10f      	bne.n	8006f94 <HAL_TIM_Base_Stop_IT+0x48>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6a1a      	ldr	r2, [r3, #32]
 8006f7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8006f7e:	4013      	ands	r3, r2
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d107      	bne.n	8006f94 <HAL_TIM_Base_Stop_IT+0x48>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0201 	bic.w	r2, r2, #1
 8006f92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f003 0302 	and.w	r3, r3, #2
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d020      	beq.n	800700e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d01b      	beq.n	800700e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f06f 0202 	mvn.w	r2, #2
 8006fde:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f003 0303 	and.w	r3, r3, #3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f9b2 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 8006ffa:	e005      	b.n	8007008 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f9a4 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f9b5 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d020      	beq.n	800705a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 0304 	and.w	r3, r3, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	d01b      	beq.n	800705a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f06f 0204 	mvn.w	r2, #4
 800702a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2202      	movs	r2, #2
 8007030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f98c 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 8007046:	e005      	b.n	8007054 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f97e 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f98f 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f003 0308 	and.w	r3, r3, #8
 8007060:	2b00      	cmp	r3, #0
 8007062:	d020      	beq.n	80070a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b00      	cmp	r3, #0
 800706c:	d01b      	beq.n	80070a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f06f 0208 	mvn.w	r2, #8
 8007076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2204      	movs	r2, #4
 800707c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f003 0303 	and.w	r3, r3, #3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f966 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 8007092:	e005      	b.n	80070a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f958 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f969 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f003 0310 	and.w	r3, r3, #16
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d020      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f003 0310 	and.w	r3, r3, #16
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01b      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f06f 0210 	mvn.w	r2, #16
 80070c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2208      	movs	r2, #8
 80070c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f940 	bl	800735e <HAL_TIM_IC_CaptureCallback>
 80070de:	e005      	b.n	80070ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f932 	bl	800734a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f943 	bl	8007372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00c      	beq.n	8007116 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d007      	beq.n	8007116 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f06f 0201 	mvn.w	r2, #1
 800710e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7f9 fb43 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800711c:	2b00      	cmp	r3, #0
 800711e:	d104      	bne.n	800712a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00c      	beq.n	8007144 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007130:	2b00      	cmp	r3, #0
 8007132:	d007      	beq.n	8007144 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800713c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 faa6 	bl	8007690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00c      	beq.n	8007168 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007154:	2b00      	cmp	r3, #0
 8007156:	d007      	beq.n	8007168 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fa9e 	bl	80076a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00c      	beq.n	800718c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007178:	2b00      	cmp	r3, #0
 800717a:	d007      	beq.n	800718c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f8fd 	bl	8007386 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00c      	beq.n	80071b0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b00      	cmp	r3, #0
 800719e:	d007      	beq.n	80071b0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f06f 0220 	mvn.w	r2, #32
 80071a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa66 	bl	800767c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d101      	bne.n	80071d4 <HAL_TIM_ConfigClockSource+0x1c>
 80071d0:	2302      	movs	r3, #2
 80071d2:	e0b6      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x18a>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80071f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80071fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007210:	d03e      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0xd8>
 8007212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007216:	f200 8087 	bhi.w	8007328 <HAL_TIM_ConfigClockSource+0x170>
 800721a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800721e:	f000 8086 	beq.w	800732e <HAL_TIM_ConfigClockSource+0x176>
 8007222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007226:	d87f      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x170>
 8007228:	2b70      	cmp	r3, #112	@ 0x70
 800722a:	d01a      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0xaa>
 800722c:	2b70      	cmp	r3, #112	@ 0x70
 800722e:	d87b      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x170>
 8007230:	2b60      	cmp	r3, #96	@ 0x60
 8007232:	d050      	beq.n	80072d6 <HAL_TIM_ConfigClockSource+0x11e>
 8007234:	2b60      	cmp	r3, #96	@ 0x60
 8007236:	d877      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x170>
 8007238:	2b50      	cmp	r3, #80	@ 0x50
 800723a:	d03c      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0xfe>
 800723c:	2b50      	cmp	r3, #80	@ 0x50
 800723e:	d873      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x170>
 8007240:	2b40      	cmp	r3, #64	@ 0x40
 8007242:	d058      	beq.n	80072f6 <HAL_TIM_ConfigClockSource+0x13e>
 8007244:	2b40      	cmp	r3, #64	@ 0x40
 8007246:	d86f      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x170>
 8007248:	2b30      	cmp	r3, #48	@ 0x30
 800724a:	d064      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x15e>
 800724c:	2b30      	cmp	r3, #48	@ 0x30
 800724e:	d86b      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x170>
 8007250:	2b20      	cmp	r3, #32
 8007252:	d060      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x15e>
 8007254:	2b20      	cmp	r3, #32
 8007256:	d867      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x170>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d05c      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x15e>
 800725c:	2b10      	cmp	r3, #16
 800725e:	d05a      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x15e>
 8007260:	e062      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007272:	f000 f97d 	bl	8007570 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	609a      	str	r2, [r3, #8]
      break;
 800728e:	e04f      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072a0:	f000 f966 	bl	8007570 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072b2:	609a      	str	r2, [r3, #8]
      break;
 80072b4:	e03c      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072c2:	461a      	mov	r2, r3
 80072c4:	f000 f8da 	bl	800747c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2150      	movs	r1, #80	@ 0x50
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 f933 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 80072d4:	e02c      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072e2:	461a      	mov	r2, r3
 80072e4:	f000 f8f9 	bl	80074da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2160      	movs	r1, #96	@ 0x60
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 f923 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 80072f4:	e01c      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007302:	461a      	mov	r2, r3
 8007304:	f000 f8ba 	bl	800747c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2140      	movs	r1, #64	@ 0x40
 800730e:	4618      	mov	r0, r3
 8007310:	f000 f913 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 8007314:	e00c      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4619      	mov	r1, r3
 8007320:	4610      	mov	r0, r2
 8007322:	f000 f90a 	bl	800753a <TIM_ITRx_SetConfig>
      break;
 8007326:	e003      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
      break;
 800732c:	e000      	b.n	8007330 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800732e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007340:	7bfb      	ldrb	r3, [r7, #15]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3710      	adds	r7, #16
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800735e:	b480      	push	{r7}
 8007360:	b083      	sub	sp, #12
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007366:	bf00      	nop
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800737a:	bf00      	nop
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007386:	b480      	push	{r7}
 8007388:	b083      	sub	sp, #12
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
	...

0800739c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a30      	ldr	r2, [pc, #192]	@ (8007470 <TIM_Base_SetConfig+0xd4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_Base_SetConfig+0x20>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073ba:	d108      	bne.n	80073ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a27      	ldr	r2, [pc, #156]	@ (8007470 <TIM_Base_SetConfig+0xd4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00b      	beq.n	80073ee <TIM_Base_SetConfig+0x52>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073dc:	d007      	beq.n	80073ee <TIM_Base_SetConfig+0x52>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a24      	ldr	r2, [pc, #144]	@ (8007474 <TIM_Base_SetConfig+0xd8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d003      	beq.n	80073ee <TIM_Base_SetConfig+0x52>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a23      	ldr	r2, [pc, #140]	@ (8007478 <TIM_Base_SetConfig+0xdc>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d108      	bne.n	8007400 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a12      	ldr	r2, [pc, #72]	@ (8007470 <TIM_Base_SetConfig+0xd4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d007      	beq.n	800743c <TIM_Base_SetConfig+0xa0>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a11      	ldr	r2, [pc, #68]	@ (8007474 <TIM_Base_SetConfig+0xd8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_Base_SetConfig+0xa0>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a10      	ldr	r2, [pc, #64]	@ (8007478 <TIM_Base_SetConfig+0xdc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d103      	bne.n	8007444 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b01      	cmp	r3, #1
 8007454:	d105      	bne.n	8007462 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	f023 0201 	bic.w	r2, r3, #1
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	611a      	str	r2, [r3, #16]
  }
}
 8007462:	bf00      	nop
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	40012c00 	.word	0x40012c00
 8007474:	40014000 	.word	0x40014000
 8007478:	40014400 	.word	0x40014400

0800747c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	f023 0201 	bic.w	r2, r3, #1
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f023 030a 	bic.w	r3, r3, #10
 80074b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	621a      	str	r2, [r3, #32]
}
 80074ce:	bf00      	nop
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074da:	b480      	push	{r7}
 80074dc:	b087      	sub	sp, #28
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	f023 0210 	bic.w	r2, r3, #16
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007504:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	031b      	lsls	r3, r3, #12
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007516:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	011b      	lsls	r3, r3, #4
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	4313      	orrs	r3, r2
 8007520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	621a      	str	r2, [r3, #32]
}
 800752e:	bf00      	nop
 8007530:	371c      	adds	r7, #28
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800753a:	b480      	push	{r7}
 800753c:	b085      	sub	sp, #20
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4313      	orrs	r3, r2
 8007558:	f043 0307 	orr.w	r3, r3, #7
 800755c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	609a      	str	r2, [r3, #8]
}
 8007564:	bf00      	nop
 8007566:	3714      	adds	r7, #20
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800758a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	021a      	lsls	r2, r3, #8
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	431a      	orrs	r2, r3
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4313      	orrs	r3, r2
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	609a      	str	r2, [r3, #8]
}
 80075a4:	bf00      	nop
 80075a6:	371c      	adds	r7, #28
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d101      	bne.n	80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075c4:	2302      	movs	r3, #2
 80075c6:	e04f      	b.n	8007668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2202      	movs	r2, #2
 80075d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a21      	ldr	r2, [pc, #132]	@ (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d108      	bne.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075f8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4313      	orrs	r3, r2
 8007602:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800760a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a14      	ldr	r2, [pc, #80]	@ (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d009      	beq.n	800763c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007630:	d004      	beq.n	800763c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a10      	ldr	r2, [pc, #64]	@ (8007678 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d10c      	bne.n	8007656 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007642:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	4313      	orrs	r3, r2
 800764c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	40012c00 	.word	0x40012c00
 8007678:	40014000 	.word	0x40014000

0800767c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b082      	sub	sp, #8
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e040      	b.n	800774c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d106      	bne.n	80076e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f7fc fe36 	bl	800434c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2224      	movs	r2, #36	@ 0x24
 80076e4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f022 0201 	bic.w	r2, r2, #1
 80076f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa54 	bl	8007bac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f825 	bl	8007754 <UART_SetConfig>
 800770a:	4603      	mov	r3, r0
 800770c:	2b01      	cmp	r3, #1
 800770e:	d101      	bne.n	8007714 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e01b      	b.n	800774c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007722:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007732:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fad3 	bl	8007cf0 <UART_CheckIdleState>
 800774a:	4603      	mov	r3, r0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007758:	b08a      	sub	sp, #40	@ 0x28
 800775a:	af00      	add	r7, sp, #0
 800775c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	689a      	ldr	r2, [r3, #8]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	431a      	orrs	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	695b      	ldr	r3, [r3, #20]
 8007772:	431a      	orrs	r2, r3
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	4313      	orrs	r3, r2
 800777a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	4bb4      	ldr	r3, [pc, #720]	@ (8007a54 <UART_SetConfig+0x300>)
 8007784:	4013      	ands	r3, r2
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	6812      	ldr	r2, [r2, #0]
 800778a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800778c:	430b      	orrs	r3, r1
 800778e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	68da      	ldr	r2, [r3, #12]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	699b      	ldr	r3, [r3, #24]
 80077aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4aa9      	ldr	r2, [pc, #676]	@ (8007a58 <UART_SetConfig+0x304>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d004      	beq.n	80077c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077bc:	4313      	orrs	r3, r2
 80077be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077d0:	430a      	orrs	r2, r1
 80077d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4aa0      	ldr	r2, [pc, #640]	@ (8007a5c <UART_SetConfig+0x308>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d126      	bne.n	800782c <UART_SetConfig+0xd8>
 80077de:	4ba0      	ldr	r3, [pc, #640]	@ (8007a60 <UART_SetConfig+0x30c>)
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077e4:	f003 0303 	and.w	r3, r3, #3
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d81b      	bhi.n	8007824 <UART_SetConfig+0xd0>
 80077ec:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <UART_SetConfig+0xa0>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007805 	.word	0x08007805
 80077f8:	08007815 	.word	0x08007815
 80077fc:	0800780d 	.word	0x0800780d
 8007800:	0800781d 	.word	0x0800781d
 8007804:	2301      	movs	r3, #1
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780a:	e080      	b.n	800790e <UART_SetConfig+0x1ba>
 800780c:	2302      	movs	r3, #2
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007812:	e07c      	b.n	800790e <UART_SetConfig+0x1ba>
 8007814:	2304      	movs	r3, #4
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800781a:	e078      	b.n	800790e <UART_SetConfig+0x1ba>
 800781c:	2308      	movs	r3, #8
 800781e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007822:	e074      	b.n	800790e <UART_SetConfig+0x1ba>
 8007824:	2310      	movs	r3, #16
 8007826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800782a:	e070      	b.n	800790e <UART_SetConfig+0x1ba>
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a8c      	ldr	r2, [pc, #560]	@ (8007a64 <UART_SetConfig+0x310>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d138      	bne.n	80078a8 <UART_SetConfig+0x154>
 8007836:	4b8a      	ldr	r3, [pc, #552]	@ (8007a60 <UART_SetConfig+0x30c>)
 8007838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800783c:	f003 030c 	and.w	r3, r3, #12
 8007840:	2b0c      	cmp	r3, #12
 8007842:	d82d      	bhi.n	80078a0 <UART_SetConfig+0x14c>
 8007844:	a201      	add	r2, pc, #4	@ (adr r2, 800784c <UART_SetConfig+0xf8>)
 8007846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784a:	bf00      	nop
 800784c:	08007881 	.word	0x08007881
 8007850:	080078a1 	.word	0x080078a1
 8007854:	080078a1 	.word	0x080078a1
 8007858:	080078a1 	.word	0x080078a1
 800785c:	08007891 	.word	0x08007891
 8007860:	080078a1 	.word	0x080078a1
 8007864:	080078a1 	.word	0x080078a1
 8007868:	080078a1 	.word	0x080078a1
 800786c:	08007889 	.word	0x08007889
 8007870:	080078a1 	.word	0x080078a1
 8007874:	080078a1 	.word	0x080078a1
 8007878:	080078a1 	.word	0x080078a1
 800787c:	08007899 	.word	0x08007899
 8007880:	2300      	movs	r3, #0
 8007882:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007886:	e042      	b.n	800790e <UART_SetConfig+0x1ba>
 8007888:	2302      	movs	r3, #2
 800788a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800788e:	e03e      	b.n	800790e <UART_SetConfig+0x1ba>
 8007890:	2304      	movs	r3, #4
 8007892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007896:	e03a      	b.n	800790e <UART_SetConfig+0x1ba>
 8007898:	2308      	movs	r3, #8
 800789a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800789e:	e036      	b.n	800790e <UART_SetConfig+0x1ba>
 80078a0:	2310      	movs	r3, #16
 80078a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078a6:	e032      	b.n	800790e <UART_SetConfig+0x1ba>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a6a      	ldr	r2, [pc, #424]	@ (8007a58 <UART_SetConfig+0x304>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d12a      	bne.n	8007908 <UART_SetConfig+0x1b4>
 80078b2:	4b6b      	ldr	r3, [pc, #428]	@ (8007a60 <UART_SetConfig+0x30c>)
 80078b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078c0:	d01a      	beq.n	80078f8 <UART_SetConfig+0x1a4>
 80078c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078c6:	d81b      	bhi.n	8007900 <UART_SetConfig+0x1ac>
 80078c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078cc:	d00c      	beq.n	80078e8 <UART_SetConfig+0x194>
 80078ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078d2:	d815      	bhi.n	8007900 <UART_SetConfig+0x1ac>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <UART_SetConfig+0x18c>
 80078d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078dc:	d008      	beq.n	80078f0 <UART_SetConfig+0x19c>
 80078de:	e00f      	b.n	8007900 <UART_SetConfig+0x1ac>
 80078e0:	2300      	movs	r3, #0
 80078e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078e6:	e012      	b.n	800790e <UART_SetConfig+0x1ba>
 80078e8:	2302      	movs	r3, #2
 80078ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ee:	e00e      	b.n	800790e <UART_SetConfig+0x1ba>
 80078f0:	2304      	movs	r3, #4
 80078f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078f6:	e00a      	b.n	800790e <UART_SetConfig+0x1ba>
 80078f8:	2308      	movs	r3, #8
 80078fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078fe:	e006      	b.n	800790e <UART_SetConfig+0x1ba>
 8007900:	2310      	movs	r3, #16
 8007902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007906:	e002      	b.n	800790e <UART_SetConfig+0x1ba>
 8007908:	2310      	movs	r3, #16
 800790a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a51      	ldr	r2, [pc, #324]	@ (8007a58 <UART_SetConfig+0x304>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d17a      	bne.n	8007a0e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007918:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800791c:	2b08      	cmp	r3, #8
 800791e:	d824      	bhi.n	800796a <UART_SetConfig+0x216>
 8007920:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <UART_SetConfig+0x1d4>)
 8007922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007926:	bf00      	nop
 8007928:	0800794d 	.word	0x0800794d
 800792c:	0800796b 	.word	0x0800796b
 8007930:	08007955 	.word	0x08007955
 8007934:	0800796b 	.word	0x0800796b
 8007938:	0800795b 	.word	0x0800795b
 800793c:	0800796b 	.word	0x0800796b
 8007940:	0800796b 	.word	0x0800796b
 8007944:	0800796b 	.word	0x0800796b
 8007948:	08007963 	.word	0x08007963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800794c:	f7fe fece 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8007950:	61f8      	str	r0, [r7, #28]
        break;
 8007952:	e010      	b.n	8007976 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007954:	4b44      	ldr	r3, [pc, #272]	@ (8007a68 <UART_SetConfig+0x314>)
 8007956:	61fb      	str	r3, [r7, #28]
        break;
 8007958:	e00d      	b.n	8007976 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800795a:	f7fe fe2f 	bl	80065bc <HAL_RCC_GetSysClockFreq>
 800795e:	61f8      	str	r0, [r7, #28]
        break;
 8007960:	e009      	b.n	8007976 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007966:	61fb      	str	r3, [r7, #28]
        break;
 8007968:	e005      	b.n	8007976 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007974:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8107 	beq.w	8007b8c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	685a      	ldr	r2, [r3, #4]
 8007982:	4613      	mov	r3, r2
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	4413      	add	r3, r2
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	429a      	cmp	r2, r3
 800798c:	d305      	bcc.n	800799a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007994:	69fa      	ldr	r2, [r7, #28]
 8007996:	429a      	cmp	r2, r3
 8007998:	d903      	bls.n	80079a2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80079a0:	e0f4      	b.n	8007b8c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	2200      	movs	r2, #0
 80079a6:	461c      	mov	r4, r3
 80079a8:	4615      	mov	r5, r2
 80079aa:	f04f 0200 	mov.w	r2, #0
 80079ae:	f04f 0300 	mov.w	r3, #0
 80079b2:	022b      	lsls	r3, r5, #8
 80079b4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80079b8:	0222      	lsls	r2, r4, #8
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	6849      	ldr	r1, [r1, #4]
 80079be:	0849      	lsrs	r1, r1, #1
 80079c0:	2000      	movs	r0, #0
 80079c2:	4688      	mov	r8, r1
 80079c4:	4681      	mov	r9, r0
 80079c6:	eb12 0a08 	adds.w	sl, r2, r8
 80079ca:	eb43 0b09 	adc.w	fp, r3, r9
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	603b      	str	r3, [r7, #0]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079dc:	4650      	mov	r0, sl
 80079de:	4659      	mov	r1, fp
 80079e0:	f7f8 fc96 	bl	8000310 <__aeabi_uldivmod>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4613      	mov	r3, r2
 80079ea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079f2:	d308      	bcc.n	8007a06 <UART_SetConfig+0x2b2>
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079fa:	d204      	bcs.n	8007a06 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	60da      	str	r2, [r3, #12]
 8007a04:	e0c2      	b.n	8007b8c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a0c:	e0be      	b.n	8007b8c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a16:	d16a      	bne.n	8007aee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007a18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a1c:	2b08      	cmp	r3, #8
 8007a1e:	d834      	bhi.n	8007a8a <UART_SetConfig+0x336>
 8007a20:	a201      	add	r2, pc, #4	@ (adr r2, 8007a28 <UART_SetConfig+0x2d4>)
 8007a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a26:	bf00      	nop
 8007a28:	08007a4d 	.word	0x08007a4d
 8007a2c:	08007a6d 	.word	0x08007a6d
 8007a30:	08007a75 	.word	0x08007a75
 8007a34:	08007a8b 	.word	0x08007a8b
 8007a38:	08007a7b 	.word	0x08007a7b
 8007a3c:	08007a8b 	.word	0x08007a8b
 8007a40:	08007a8b 	.word	0x08007a8b
 8007a44:	08007a8b 	.word	0x08007a8b
 8007a48:	08007a83 	.word	0x08007a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a4c:	f7fe fe4e 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8007a50:	61f8      	str	r0, [r7, #28]
        break;
 8007a52:	e020      	b.n	8007a96 <UART_SetConfig+0x342>
 8007a54:	efff69f3 	.word	0xefff69f3
 8007a58:	40008000 	.word	0x40008000
 8007a5c:	40013800 	.word	0x40013800
 8007a60:	40021000 	.word	0x40021000
 8007a64:	40004400 	.word	0x40004400
 8007a68:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a6c:	f7fe fe54 	bl	8006718 <HAL_RCC_GetPCLK2Freq>
 8007a70:	61f8      	str	r0, [r7, #28]
        break;
 8007a72:	e010      	b.n	8007a96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a74:	4b4c      	ldr	r3, [pc, #304]	@ (8007ba8 <UART_SetConfig+0x454>)
 8007a76:	61fb      	str	r3, [r7, #28]
        break;
 8007a78:	e00d      	b.n	8007a96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a7a:	f7fe fd9f 	bl	80065bc <HAL_RCC_GetSysClockFreq>
 8007a7e:	61f8      	str	r0, [r7, #28]
        break;
 8007a80:	e009      	b.n	8007a96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a86:	61fb      	str	r3, [r7, #28]
        break;
 8007a88:	e005      	b.n	8007a96 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d077      	beq.n	8007b8c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	005a      	lsls	r2, r3, #1
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	085b      	lsrs	r3, r3, #1
 8007aa6:	441a      	add	r2, r3
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	2b0f      	cmp	r3, #15
 8007ab6:	d916      	bls.n	8007ae6 <UART_SetConfig+0x392>
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007abe:	d212      	bcs.n	8007ae6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f023 030f 	bic.w	r3, r3, #15
 8007ac8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	085b      	lsrs	r3, r3, #1
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	f003 0307 	and.w	r3, r3, #7
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	8afb      	ldrh	r3, [r7, #22]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	8afa      	ldrh	r2, [r7, #22]
 8007ae2:	60da      	str	r2, [r3, #12]
 8007ae4:	e052      	b.n	8007b8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007aec:	e04e      	b.n	8007b8c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007aee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007af2:	2b08      	cmp	r3, #8
 8007af4:	d827      	bhi.n	8007b46 <UART_SetConfig+0x3f2>
 8007af6:	a201      	add	r2, pc, #4	@ (adr r2, 8007afc <UART_SetConfig+0x3a8>)
 8007af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afc:	08007b21 	.word	0x08007b21
 8007b00:	08007b29 	.word	0x08007b29
 8007b04:	08007b31 	.word	0x08007b31
 8007b08:	08007b47 	.word	0x08007b47
 8007b0c:	08007b37 	.word	0x08007b37
 8007b10:	08007b47 	.word	0x08007b47
 8007b14:	08007b47 	.word	0x08007b47
 8007b18:	08007b47 	.word	0x08007b47
 8007b1c:	08007b3f 	.word	0x08007b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b20:	f7fe fde4 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8007b24:	61f8      	str	r0, [r7, #28]
        break;
 8007b26:	e014      	b.n	8007b52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b28:	f7fe fdf6 	bl	8006718 <HAL_RCC_GetPCLK2Freq>
 8007b2c:	61f8      	str	r0, [r7, #28]
        break;
 8007b2e:	e010      	b.n	8007b52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b30:	4b1d      	ldr	r3, [pc, #116]	@ (8007ba8 <UART_SetConfig+0x454>)
 8007b32:	61fb      	str	r3, [r7, #28]
        break;
 8007b34:	e00d      	b.n	8007b52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b36:	f7fe fd41 	bl	80065bc <HAL_RCC_GetSysClockFreq>
 8007b3a:	61f8      	str	r0, [r7, #28]
        break;
 8007b3c:	e009      	b.n	8007b52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b42:	61fb      	str	r3, [r7, #28]
        break;
 8007b44:	e005      	b.n	8007b52 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b50:	bf00      	nop
    }

    if (pclk != 0U)
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d019      	beq.n	8007b8c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	085a      	lsrs	r2, r3, #1
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	441a      	add	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	2b0f      	cmp	r3, #15
 8007b70:	d909      	bls.n	8007b86 <UART_SetConfig+0x432>
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b78:	d205      	bcs.n	8007b86 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60da      	str	r2, [r3, #12]
 8007b84:	e002      	b.n	8007b8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007b98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3728      	adds	r7, #40	@ 0x28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ba6:	bf00      	nop
 8007ba8:	00f42400 	.word	0x00f42400

08007bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bb8:	f003 0308 	and.w	r3, r3, #8
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00a      	beq.n	8007bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bda:	f003 0301 	and.w	r3, r3, #1
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	430a      	orrs	r2, r1
 8007bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1e:	f003 0304 	and.w	r3, r3, #4
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d00a      	beq.n	8007c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c62:	f003 0320 	and.w	r3, r3, #32
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00a      	beq.n	8007c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01a      	beq.n	8007cc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007caa:	d10a      	bne.n	8007cc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	605a      	str	r2, [r3, #4]
  }
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b098      	sub	sp, #96	@ 0x60
 8007cf4:	af02      	add	r7, sp, #8
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d00:	f7fc fc20 	bl	8004544 <HAL_GetTick>
 8007d04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0308 	and.w	r3, r3, #8
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d12e      	bne.n	8007d72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f88c 	bl	8007e40 <UART_WaitOnFlagUntilTimeout>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d021      	beq.n	8007d72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d36:	e853 3f00 	ldrex	r3, [r3]
 8007d3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d4e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d54:	e841 2300 	strex	r3, r2, [r1]
 8007d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d1e6      	bne.n	8007d2e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2220      	movs	r2, #32
 8007d64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e062      	b.n	8007e38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d149      	bne.n	8007e14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f856 	bl	8007e40 <UART_WaitOnFlagUntilTimeout>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d03c      	beq.n	8007e14 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da2:	e853 3f00 	ldrex	r3, [r3]
 8007da6:	623b      	str	r3, [r7, #32]
   return(result);
 8007da8:	6a3b      	ldr	r3, [r7, #32]
 8007daa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	461a      	mov	r2, r3
 8007db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007db8:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007dbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e6      	bne.n	8007d9a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0301 	bic.w	r3, r3, #1
 8007de2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007dec:	61fa      	str	r2, [r7, #28]
 8007dee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	69b9      	ldr	r1, [r7, #24]
 8007df2:	69fa      	ldr	r2, [r7, #28]
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	617b      	str	r3, [r7, #20]
   return(result);
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e5      	bne.n	8007dcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e011      	b.n	8007e38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2220      	movs	r2, #32
 8007e18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2220      	movs	r2, #32
 8007e1e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3758      	adds	r7, #88	@ 0x58
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e50:	e04f      	b.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e58:	d04b      	beq.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e5a:	f7fc fb73 	bl	8004544 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	69ba      	ldr	r2, [r7, #24]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d302      	bcc.n	8007e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d101      	bne.n	8007e74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e04e      	b.n	8007f12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0304 	and.w	r3, r3, #4
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d037      	beq.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b80      	cmp	r3, #128	@ 0x80
 8007e86:	d034      	beq.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2b40      	cmp	r3, #64	@ 0x40
 8007e8c:	d031      	beq.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d110      	bne.n	8007ebe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f000 f838 	bl	8007f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2208      	movs	r2, #8
 8007eae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e029      	b.n	8007f12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ecc:	d111      	bne.n	8007ef2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 f81e 	bl	8007f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2220      	movs	r2, #32
 8007ee2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e00f      	b.n	8007f12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	4013      	ands	r3, r2
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	bf0c      	ite	eq
 8007f02:	2301      	moveq	r3, #1
 8007f04:	2300      	movne	r3, #0
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	461a      	mov	r2, r3
 8007f0a:	79fb      	ldrb	r3, [r7, #7]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d0a0      	beq.n	8007e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b095      	sub	sp, #84	@ 0x54
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f2a:	e853 3f00 	ldrex	r3, [r3]
 8007f2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007f46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007f48:	e841 2300 	strex	r3, r2, [r1]
 8007f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007f4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1e6      	bne.n	8007f22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3308      	adds	r3, #8
 8007f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	e853 3f00 	ldrex	r3, [r3]
 8007f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	f023 0301 	bic.w	r3, r3, #1
 8007f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3308      	adds	r3, #8
 8007f72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f7c:	e841 2300 	strex	r3, r2, [r1]
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e5      	bne.n	8007f54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d118      	bne.n	8007fc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	e853 3f00 	ldrex	r3, [r3]
 8007f9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f023 0310 	bic.w	r3, r3, #16
 8007fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	461a      	mov	r2, r3
 8007fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb2:	6979      	ldr	r1, [r7, #20]
 8007fb4:	69ba      	ldr	r2, [r7, #24]
 8007fb6:	e841 2300 	strex	r3, r2, [r1]
 8007fba:	613b      	str	r3, [r7, #16]
   return(result);
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1e6      	bne.n	8007f90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007fd6:	bf00      	nop
 8007fd8:	3754      	adds	r7, #84	@ 0x54
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
	...

08007fe4 <sniprintf>:
 8007fe4:	b40c      	push	{r2, r3}
 8007fe6:	b530      	push	{r4, r5, lr}
 8007fe8:	4b17      	ldr	r3, [pc, #92]	@ (8008048 <sniprintf+0x64>)
 8007fea:	1e0c      	subs	r4, r1, #0
 8007fec:	681d      	ldr	r5, [r3, #0]
 8007fee:	b09d      	sub	sp, #116	@ 0x74
 8007ff0:	da08      	bge.n	8008004 <sniprintf+0x20>
 8007ff2:	238b      	movs	r3, #139	@ 0x8b
 8007ff4:	602b      	str	r3, [r5, #0]
 8007ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffa:	b01d      	add	sp, #116	@ 0x74
 8007ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008000:	b002      	add	sp, #8
 8008002:	4770      	bx	lr
 8008004:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008008:	f8ad 3014 	strh.w	r3, [sp, #20]
 800800c:	bf14      	ite	ne
 800800e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008012:	4623      	moveq	r3, r4
 8008014:	9304      	str	r3, [sp, #16]
 8008016:	9307      	str	r3, [sp, #28]
 8008018:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800801c:	9002      	str	r0, [sp, #8]
 800801e:	9006      	str	r0, [sp, #24]
 8008020:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008024:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008026:	ab21      	add	r3, sp, #132	@ 0x84
 8008028:	a902      	add	r1, sp, #8
 800802a:	4628      	mov	r0, r5
 800802c:	9301      	str	r3, [sp, #4]
 800802e:	f000 f995 	bl	800835c <_svfiprintf_r>
 8008032:	1c43      	adds	r3, r0, #1
 8008034:	bfbc      	itt	lt
 8008036:	238b      	movlt	r3, #139	@ 0x8b
 8008038:	602b      	strlt	r3, [r5, #0]
 800803a:	2c00      	cmp	r4, #0
 800803c:	d0dd      	beq.n	8007ffa <sniprintf+0x16>
 800803e:	9b02      	ldr	r3, [sp, #8]
 8008040:	2200      	movs	r2, #0
 8008042:	701a      	strb	r2, [r3, #0]
 8008044:	e7d9      	b.n	8007ffa <sniprintf+0x16>
 8008046:	bf00      	nop
 8008048:	20000038 	.word	0x20000038

0800804c <memset>:
 800804c:	4402      	add	r2, r0
 800804e:	4603      	mov	r3, r0
 8008050:	4293      	cmp	r3, r2
 8008052:	d100      	bne.n	8008056 <memset+0xa>
 8008054:	4770      	bx	lr
 8008056:	f803 1b01 	strb.w	r1, [r3], #1
 800805a:	e7f9      	b.n	8008050 <memset+0x4>

0800805c <__errno>:
 800805c:	4b01      	ldr	r3, [pc, #4]	@ (8008064 <__errno+0x8>)
 800805e:	6818      	ldr	r0, [r3, #0]
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20000038 	.word	0x20000038

08008068 <__libc_init_array>:
 8008068:	b570      	push	{r4, r5, r6, lr}
 800806a:	4d0d      	ldr	r5, [pc, #52]	@ (80080a0 <__libc_init_array+0x38>)
 800806c:	4c0d      	ldr	r4, [pc, #52]	@ (80080a4 <__libc_init_array+0x3c>)
 800806e:	1b64      	subs	r4, r4, r5
 8008070:	10a4      	asrs	r4, r4, #2
 8008072:	2600      	movs	r6, #0
 8008074:	42a6      	cmp	r6, r4
 8008076:	d109      	bne.n	800808c <__libc_init_array+0x24>
 8008078:	4d0b      	ldr	r5, [pc, #44]	@ (80080a8 <__libc_init_array+0x40>)
 800807a:	4c0c      	ldr	r4, [pc, #48]	@ (80080ac <__libc_init_array+0x44>)
 800807c:	f000 fc66 	bl	800894c <_init>
 8008080:	1b64      	subs	r4, r4, r5
 8008082:	10a4      	asrs	r4, r4, #2
 8008084:	2600      	movs	r6, #0
 8008086:	42a6      	cmp	r6, r4
 8008088:	d105      	bne.n	8008096 <__libc_init_array+0x2e>
 800808a:	bd70      	pop	{r4, r5, r6, pc}
 800808c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008090:	4798      	blx	r3
 8008092:	3601      	adds	r6, #1
 8008094:	e7ee      	b.n	8008074 <__libc_init_array+0xc>
 8008096:	f855 3b04 	ldr.w	r3, [r5], #4
 800809a:	4798      	blx	r3
 800809c:	3601      	adds	r6, #1
 800809e:	e7f2      	b.n	8008086 <__libc_init_array+0x1e>
 80080a0:	08008b00 	.word	0x08008b00
 80080a4:	08008b00 	.word	0x08008b00
 80080a8:	08008b00 	.word	0x08008b00
 80080ac:	08008b04 	.word	0x08008b04

080080b0 <__retarget_lock_acquire_recursive>:
 80080b0:	4770      	bx	lr

080080b2 <__retarget_lock_release_recursive>:
 80080b2:	4770      	bx	lr

080080b4 <_free_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4605      	mov	r5, r0
 80080b8:	2900      	cmp	r1, #0
 80080ba:	d041      	beq.n	8008140 <_free_r+0x8c>
 80080bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080c0:	1f0c      	subs	r4, r1, #4
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	bfb8      	it	lt
 80080c6:	18e4      	addlt	r4, r4, r3
 80080c8:	f000 f8e0 	bl	800828c <__malloc_lock>
 80080cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008144 <_free_r+0x90>)
 80080ce:	6813      	ldr	r3, [r2, #0]
 80080d0:	b933      	cbnz	r3, 80080e0 <_free_r+0x2c>
 80080d2:	6063      	str	r3, [r4, #4]
 80080d4:	6014      	str	r4, [r2, #0]
 80080d6:	4628      	mov	r0, r5
 80080d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080dc:	f000 b8dc 	b.w	8008298 <__malloc_unlock>
 80080e0:	42a3      	cmp	r3, r4
 80080e2:	d908      	bls.n	80080f6 <_free_r+0x42>
 80080e4:	6820      	ldr	r0, [r4, #0]
 80080e6:	1821      	adds	r1, r4, r0
 80080e8:	428b      	cmp	r3, r1
 80080ea:	bf01      	itttt	eq
 80080ec:	6819      	ldreq	r1, [r3, #0]
 80080ee:	685b      	ldreq	r3, [r3, #4]
 80080f0:	1809      	addeq	r1, r1, r0
 80080f2:	6021      	streq	r1, [r4, #0]
 80080f4:	e7ed      	b.n	80080d2 <_free_r+0x1e>
 80080f6:	461a      	mov	r2, r3
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	b10b      	cbz	r3, 8008100 <_free_r+0x4c>
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	d9fa      	bls.n	80080f6 <_free_r+0x42>
 8008100:	6811      	ldr	r1, [r2, #0]
 8008102:	1850      	adds	r0, r2, r1
 8008104:	42a0      	cmp	r0, r4
 8008106:	d10b      	bne.n	8008120 <_free_r+0x6c>
 8008108:	6820      	ldr	r0, [r4, #0]
 800810a:	4401      	add	r1, r0
 800810c:	1850      	adds	r0, r2, r1
 800810e:	4283      	cmp	r3, r0
 8008110:	6011      	str	r1, [r2, #0]
 8008112:	d1e0      	bne.n	80080d6 <_free_r+0x22>
 8008114:	6818      	ldr	r0, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	6053      	str	r3, [r2, #4]
 800811a:	4408      	add	r0, r1
 800811c:	6010      	str	r0, [r2, #0]
 800811e:	e7da      	b.n	80080d6 <_free_r+0x22>
 8008120:	d902      	bls.n	8008128 <_free_r+0x74>
 8008122:	230c      	movs	r3, #12
 8008124:	602b      	str	r3, [r5, #0]
 8008126:	e7d6      	b.n	80080d6 <_free_r+0x22>
 8008128:	6820      	ldr	r0, [r4, #0]
 800812a:	1821      	adds	r1, r4, r0
 800812c:	428b      	cmp	r3, r1
 800812e:	bf04      	itt	eq
 8008130:	6819      	ldreq	r1, [r3, #0]
 8008132:	685b      	ldreq	r3, [r3, #4]
 8008134:	6063      	str	r3, [r4, #4]
 8008136:	bf04      	itt	eq
 8008138:	1809      	addeq	r1, r1, r0
 800813a:	6021      	streq	r1, [r4, #0]
 800813c:	6054      	str	r4, [r2, #4]
 800813e:	e7ca      	b.n	80080d6 <_free_r+0x22>
 8008140:	bd38      	pop	{r3, r4, r5, pc}
 8008142:	bf00      	nop
 8008144:	2000041c 	.word	0x2000041c

08008148 <sbrk_aligned>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	4e0f      	ldr	r6, [pc, #60]	@ (8008188 <sbrk_aligned+0x40>)
 800814c:	460c      	mov	r4, r1
 800814e:	6831      	ldr	r1, [r6, #0]
 8008150:	4605      	mov	r5, r0
 8008152:	b911      	cbnz	r1, 800815a <sbrk_aligned+0x12>
 8008154:	f000 fba6 	bl	80088a4 <_sbrk_r>
 8008158:	6030      	str	r0, [r6, #0]
 800815a:	4621      	mov	r1, r4
 800815c:	4628      	mov	r0, r5
 800815e:	f000 fba1 	bl	80088a4 <_sbrk_r>
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	d103      	bne.n	800816e <sbrk_aligned+0x26>
 8008166:	f04f 34ff 	mov.w	r4, #4294967295
 800816a:	4620      	mov	r0, r4
 800816c:	bd70      	pop	{r4, r5, r6, pc}
 800816e:	1cc4      	adds	r4, r0, #3
 8008170:	f024 0403 	bic.w	r4, r4, #3
 8008174:	42a0      	cmp	r0, r4
 8008176:	d0f8      	beq.n	800816a <sbrk_aligned+0x22>
 8008178:	1a21      	subs	r1, r4, r0
 800817a:	4628      	mov	r0, r5
 800817c:	f000 fb92 	bl	80088a4 <_sbrk_r>
 8008180:	3001      	adds	r0, #1
 8008182:	d1f2      	bne.n	800816a <sbrk_aligned+0x22>
 8008184:	e7ef      	b.n	8008166 <sbrk_aligned+0x1e>
 8008186:	bf00      	nop
 8008188:	20000418 	.word	0x20000418

0800818c <_malloc_r>:
 800818c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008190:	1ccd      	adds	r5, r1, #3
 8008192:	f025 0503 	bic.w	r5, r5, #3
 8008196:	3508      	adds	r5, #8
 8008198:	2d0c      	cmp	r5, #12
 800819a:	bf38      	it	cc
 800819c:	250c      	movcc	r5, #12
 800819e:	2d00      	cmp	r5, #0
 80081a0:	4606      	mov	r6, r0
 80081a2:	db01      	blt.n	80081a8 <_malloc_r+0x1c>
 80081a4:	42a9      	cmp	r1, r5
 80081a6:	d904      	bls.n	80081b2 <_malloc_r+0x26>
 80081a8:	230c      	movs	r3, #12
 80081aa:	6033      	str	r3, [r6, #0]
 80081ac:	2000      	movs	r0, #0
 80081ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008288 <_malloc_r+0xfc>
 80081b6:	f000 f869 	bl	800828c <__malloc_lock>
 80081ba:	f8d8 3000 	ldr.w	r3, [r8]
 80081be:	461c      	mov	r4, r3
 80081c0:	bb44      	cbnz	r4, 8008214 <_malloc_r+0x88>
 80081c2:	4629      	mov	r1, r5
 80081c4:	4630      	mov	r0, r6
 80081c6:	f7ff ffbf 	bl	8008148 <sbrk_aligned>
 80081ca:	1c43      	adds	r3, r0, #1
 80081cc:	4604      	mov	r4, r0
 80081ce:	d158      	bne.n	8008282 <_malloc_r+0xf6>
 80081d0:	f8d8 4000 	ldr.w	r4, [r8]
 80081d4:	4627      	mov	r7, r4
 80081d6:	2f00      	cmp	r7, #0
 80081d8:	d143      	bne.n	8008262 <_malloc_r+0xd6>
 80081da:	2c00      	cmp	r4, #0
 80081dc:	d04b      	beq.n	8008276 <_malloc_r+0xea>
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	4639      	mov	r1, r7
 80081e2:	4630      	mov	r0, r6
 80081e4:	eb04 0903 	add.w	r9, r4, r3
 80081e8:	f000 fb5c 	bl	80088a4 <_sbrk_r>
 80081ec:	4581      	cmp	r9, r0
 80081ee:	d142      	bne.n	8008276 <_malloc_r+0xea>
 80081f0:	6821      	ldr	r1, [r4, #0]
 80081f2:	1a6d      	subs	r5, r5, r1
 80081f4:	4629      	mov	r1, r5
 80081f6:	4630      	mov	r0, r6
 80081f8:	f7ff ffa6 	bl	8008148 <sbrk_aligned>
 80081fc:	3001      	adds	r0, #1
 80081fe:	d03a      	beq.n	8008276 <_malloc_r+0xea>
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	442b      	add	r3, r5
 8008204:	6023      	str	r3, [r4, #0]
 8008206:	f8d8 3000 	ldr.w	r3, [r8]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	bb62      	cbnz	r2, 8008268 <_malloc_r+0xdc>
 800820e:	f8c8 7000 	str.w	r7, [r8]
 8008212:	e00f      	b.n	8008234 <_malloc_r+0xa8>
 8008214:	6822      	ldr	r2, [r4, #0]
 8008216:	1b52      	subs	r2, r2, r5
 8008218:	d420      	bmi.n	800825c <_malloc_r+0xd0>
 800821a:	2a0b      	cmp	r2, #11
 800821c:	d917      	bls.n	800824e <_malloc_r+0xc2>
 800821e:	1961      	adds	r1, r4, r5
 8008220:	42a3      	cmp	r3, r4
 8008222:	6025      	str	r5, [r4, #0]
 8008224:	bf18      	it	ne
 8008226:	6059      	strne	r1, [r3, #4]
 8008228:	6863      	ldr	r3, [r4, #4]
 800822a:	bf08      	it	eq
 800822c:	f8c8 1000 	streq.w	r1, [r8]
 8008230:	5162      	str	r2, [r4, r5]
 8008232:	604b      	str	r3, [r1, #4]
 8008234:	4630      	mov	r0, r6
 8008236:	f000 f82f 	bl	8008298 <__malloc_unlock>
 800823a:	f104 000b 	add.w	r0, r4, #11
 800823e:	1d23      	adds	r3, r4, #4
 8008240:	f020 0007 	bic.w	r0, r0, #7
 8008244:	1ac2      	subs	r2, r0, r3
 8008246:	bf1c      	itt	ne
 8008248:	1a1b      	subne	r3, r3, r0
 800824a:	50a3      	strne	r3, [r4, r2]
 800824c:	e7af      	b.n	80081ae <_malloc_r+0x22>
 800824e:	6862      	ldr	r2, [r4, #4]
 8008250:	42a3      	cmp	r3, r4
 8008252:	bf0c      	ite	eq
 8008254:	f8c8 2000 	streq.w	r2, [r8]
 8008258:	605a      	strne	r2, [r3, #4]
 800825a:	e7eb      	b.n	8008234 <_malloc_r+0xa8>
 800825c:	4623      	mov	r3, r4
 800825e:	6864      	ldr	r4, [r4, #4]
 8008260:	e7ae      	b.n	80081c0 <_malloc_r+0x34>
 8008262:	463c      	mov	r4, r7
 8008264:	687f      	ldr	r7, [r7, #4]
 8008266:	e7b6      	b.n	80081d6 <_malloc_r+0x4a>
 8008268:	461a      	mov	r2, r3
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	42a3      	cmp	r3, r4
 800826e:	d1fb      	bne.n	8008268 <_malloc_r+0xdc>
 8008270:	2300      	movs	r3, #0
 8008272:	6053      	str	r3, [r2, #4]
 8008274:	e7de      	b.n	8008234 <_malloc_r+0xa8>
 8008276:	230c      	movs	r3, #12
 8008278:	6033      	str	r3, [r6, #0]
 800827a:	4630      	mov	r0, r6
 800827c:	f000 f80c 	bl	8008298 <__malloc_unlock>
 8008280:	e794      	b.n	80081ac <_malloc_r+0x20>
 8008282:	6005      	str	r5, [r0, #0]
 8008284:	e7d6      	b.n	8008234 <_malloc_r+0xa8>
 8008286:	bf00      	nop
 8008288:	2000041c 	.word	0x2000041c

0800828c <__malloc_lock>:
 800828c:	4801      	ldr	r0, [pc, #4]	@ (8008294 <__malloc_lock+0x8>)
 800828e:	f7ff bf0f 	b.w	80080b0 <__retarget_lock_acquire_recursive>
 8008292:	bf00      	nop
 8008294:	20000414 	.word	0x20000414

08008298 <__malloc_unlock>:
 8008298:	4801      	ldr	r0, [pc, #4]	@ (80082a0 <__malloc_unlock+0x8>)
 800829a:	f7ff bf0a 	b.w	80080b2 <__retarget_lock_release_recursive>
 800829e:	bf00      	nop
 80082a0:	20000414 	.word	0x20000414

080082a4 <__ssputs_r>:
 80082a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	688e      	ldr	r6, [r1, #8]
 80082aa:	461f      	mov	r7, r3
 80082ac:	42be      	cmp	r6, r7
 80082ae:	680b      	ldr	r3, [r1, #0]
 80082b0:	4682      	mov	sl, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	4690      	mov	r8, r2
 80082b6:	d82d      	bhi.n	8008314 <__ssputs_r+0x70>
 80082b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082c0:	d026      	beq.n	8008310 <__ssputs_r+0x6c>
 80082c2:	6965      	ldr	r5, [r4, #20]
 80082c4:	6909      	ldr	r1, [r1, #16]
 80082c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082ca:	eba3 0901 	sub.w	r9, r3, r1
 80082ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082d2:	1c7b      	adds	r3, r7, #1
 80082d4:	444b      	add	r3, r9
 80082d6:	106d      	asrs	r5, r5, #1
 80082d8:	429d      	cmp	r5, r3
 80082da:	bf38      	it	cc
 80082dc:	461d      	movcc	r5, r3
 80082de:	0553      	lsls	r3, r2, #21
 80082e0:	d527      	bpl.n	8008332 <__ssputs_r+0x8e>
 80082e2:	4629      	mov	r1, r5
 80082e4:	f7ff ff52 	bl	800818c <_malloc_r>
 80082e8:	4606      	mov	r6, r0
 80082ea:	b360      	cbz	r0, 8008346 <__ssputs_r+0xa2>
 80082ec:	6921      	ldr	r1, [r4, #16]
 80082ee:	464a      	mov	r2, r9
 80082f0:	f000 fae8 	bl	80088c4 <memcpy>
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fe:	81a3      	strh	r3, [r4, #12]
 8008300:	6126      	str	r6, [r4, #16]
 8008302:	6165      	str	r5, [r4, #20]
 8008304:	444e      	add	r6, r9
 8008306:	eba5 0509 	sub.w	r5, r5, r9
 800830a:	6026      	str	r6, [r4, #0]
 800830c:	60a5      	str	r5, [r4, #8]
 800830e:	463e      	mov	r6, r7
 8008310:	42be      	cmp	r6, r7
 8008312:	d900      	bls.n	8008316 <__ssputs_r+0x72>
 8008314:	463e      	mov	r6, r7
 8008316:	6820      	ldr	r0, [r4, #0]
 8008318:	4632      	mov	r2, r6
 800831a:	4641      	mov	r1, r8
 800831c:	f000 faa8 	bl	8008870 <memmove>
 8008320:	68a3      	ldr	r3, [r4, #8]
 8008322:	1b9b      	subs	r3, r3, r6
 8008324:	60a3      	str	r3, [r4, #8]
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	4433      	add	r3, r6
 800832a:	6023      	str	r3, [r4, #0]
 800832c:	2000      	movs	r0, #0
 800832e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008332:	462a      	mov	r2, r5
 8008334:	f000 fad4 	bl	80088e0 <_realloc_r>
 8008338:	4606      	mov	r6, r0
 800833a:	2800      	cmp	r0, #0
 800833c:	d1e0      	bne.n	8008300 <__ssputs_r+0x5c>
 800833e:	6921      	ldr	r1, [r4, #16]
 8008340:	4650      	mov	r0, sl
 8008342:	f7ff feb7 	bl	80080b4 <_free_r>
 8008346:	230c      	movs	r3, #12
 8008348:	f8ca 3000 	str.w	r3, [sl]
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	f04f 30ff 	mov.w	r0, #4294967295
 8008358:	e7e9      	b.n	800832e <__ssputs_r+0x8a>
	...

0800835c <_svfiprintf_r>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	4698      	mov	r8, r3
 8008362:	898b      	ldrh	r3, [r1, #12]
 8008364:	061b      	lsls	r3, r3, #24
 8008366:	b09d      	sub	sp, #116	@ 0x74
 8008368:	4607      	mov	r7, r0
 800836a:	460d      	mov	r5, r1
 800836c:	4614      	mov	r4, r2
 800836e:	d510      	bpl.n	8008392 <_svfiprintf_r+0x36>
 8008370:	690b      	ldr	r3, [r1, #16]
 8008372:	b973      	cbnz	r3, 8008392 <_svfiprintf_r+0x36>
 8008374:	2140      	movs	r1, #64	@ 0x40
 8008376:	f7ff ff09 	bl	800818c <_malloc_r>
 800837a:	6028      	str	r0, [r5, #0]
 800837c:	6128      	str	r0, [r5, #16]
 800837e:	b930      	cbnz	r0, 800838e <_svfiprintf_r+0x32>
 8008380:	230c      	movs	r3, #12
 8008382:	603b      	str	r3, [r7, #0]
 8008384:	f04f 30ff 	mov.w	r0, #4294967295
 8008388:	b01d      	add	sp, #116	@ 0x74
 800838a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838e:	2340      	movs	r3, #64	@ 0x40
 8008390:	616b      	str	r3, [r5, #20]
 8008392:	2300      	movs	r3, #0
 8008394:	9309      	str	r3, [sp, #36]	@ 0x24
 8008396:	2320      	movs	r3, #32
 8008398:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800839c:	f8cd 800c 	str.w	r8, [sp, #12]
 80083a0:	2330      	movs	r3, #48	@ 0x30
 80083a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008540 <_svfiprintf_r+0x1e4>
 80083a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083aa:	f04f 0901 	mov.w	r9, #1
 80083ae:	4623      	mov	r3, r4
 80083b0:	469a      	mov	sl, r3
 80083b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083b6:	b10a      	cbz	r2, 80083bc <_svfiprintf_r+0x60>
 80083b8:	2a25      	cmp	r2, #37	@ 0x25
 80083ba:	d1f9      	bne.n	80083b0 <_svfiprintf_r+0x54>
 80083bc:	ebba 0b04 	subs.w	fp, sl, r4
 80083c0:	d00b      	beq.n	80083da <_svfiprintf_r+0x7e>
 80083c2:	465b      	mov	r3, fp
 80083c4:	4622      	mov	r2, r4
 80083c6:	4629      	mov	r1, r5
 80083c8:	4638      	mov	r0, r7
 80083ca:	f7ff ff6b 	bl	80082a4 <__ssputs_r>
 80083ce:	3001      	adds	r0, #1
 80083d0:	f000 80a7 	beq.w	8008522 <_svfiprintf_r+0x1c6>
 80083d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083d6:	445a      	add	r2, fp
 80083d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80083da:	f89a 3000 	ldrb.w	r3, [sl]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f000 809f 	beq.w	8008522 <_svfiprintf_r+0x1c6>
 80083e4:	2300      	movs	r3, #0
 80083e6:	f04f 32ff 	mov.w	r2, #4294967295
 80083ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ee:	f10a 0a01 	add.w	sl, sl, #1
 80083f2:	9304      	str	r3, [sp, #16]
 80083f4:	9307      	str	r3, [sp, #28]
 80083f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80083fc:	4654      	mov	r4, sl
 80083fe:	2205      	movs	r2, #5
 8008400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008404:	484e      	ldr	r0, [pc, #312]	@ (8008540 <_svfiprintf_r+0x1e4>)
 8008406:	f7f7 fee3 	bl	80001d0 <memchr>
 800840a:	9a04      	ldr	r2, [sp, #16]
 800840c:	b9d8      	cbnz	r0, 8008446 <_svfiprintf_r+0xea>
 800840e:	06d0      	lsls	r0, r2, #27
 8008410:	bf44      	itt	mi
 8008412:	2320      	movmi	r3, #32
 8008414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008418:	0711      	lsls	r1, r2, #28
 800841a:	bf44      	itt	mi
 800841c:	232b      	movmi	r3, #43	@ 0x2b
 800841e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008422:	f89a 3000 	ldrb.w	r3, [sl]
 8008426:	2b2a      	cmp	r3, #42	@ 0x2a
 8008428:	d015      	beq.n	8008456 <_svfiprintf_r+0xfa>
 800842a:	9a07      	ldr	r2, [sp, #28]
 800842c:	4654      	mov	r4, sl
 800842e:	2000      	movs	r0, #0
 8008430:	f04f 0c0a 	mov.w	ip, #10
 8008434:	4621      	mov	r1, r4
 8008436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800843a:	3b30      	subs	r3, #48	@ 0x30
 800843c:	2b09      	cmp	r3, #9
 800843e:	d94b      	bls.n	80084d8 <_svfiprintf_r+0x17c>
 8008440:	b1b0      	cbz	r0, 8008470 <_svfiprintf_r+0x114>
 8008442:	9207      	str	r2, [sp, #28]
 8008444:	e014      	b.n	8008470 <_svfiprintf_r+0x114>
 8008446:	eba0 0308 	sub.w	r3, r0, r8
 800844a:	fa09 f303 	lsl.w	r3, r9, r3
 800844e:	4313      	orrs	r3, r2
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	46a2      	mov	sl, r4
 8008454:	e7d2      	b.n	80083fc <_svfiprintf_r+0xa0>
 8008456:	9b03      	ldr	r3, [sp, #12]
 8008458:	1d19      	adds	r1, r3, #4
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	9103      	str	r1, [sp, #12]
 800845e:	2b00      	cmp	r3, #0
 8008460:	bfbb      	ittet	lt
 8008462:	425b      	neglt	r3, r3
 8008464:	f042 0202 	orrlt.w	r2, r2, #2
 8008468:	9307      	strge	r3, [sp, #28]
 800846a:	9307      	strlt	r3, [sp, #28]
 800846c:	bfb8      	it	lt
 800846e:	9204      	strlt	r2, [sp, #16]
 8008470:	7823      	ldrb	r3, [r4, #0]
 8008472:	2b2e      	cmp	r3, #46	@ 0x2e
 8008474:	d10a      	bne.n	800848c <_svfiprintf_r+0x130>
 8008476:	7863      	ldrb	r3, [r4, #1]
 8008478:	2b2a      	cmp	r3, #42	@ 0x2a
 800847a:	d132      	bne.n	80084e2 <_svfiprintf_r+0x186>
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	1d1a      	adds	r2, r3, #4
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	9203      	str	r2, [sp, #12]
 8008484:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008488:	3402      	adds	r4, #2
 800848a:	9305      	str	r3, [sp, #20]
 800848c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008550 <_svfiprintf_r+0x1f4>
 8008490:	7821      	ldrb	r1, [r4, #0]
 8008492:	2203      	movs	r2, #3
 8008494:	4650      	mov	r0, sl
 8008496:	f7f7 fe9b 	bl	80001d0 <memchr>
 800849a:	b138      	cbz	r0, 80084ac <_svfiprintf_r+0x150>
 800849c:	9b04      	ldr	r3, [sp, #16]
 800849e:	eba0 000a 	sub.w	r0, r0, sl
 80084a2:	2240      	movs	r2, #64	@ 0x40
 80084a4:	4082      	lsls	r2, r0
 80084a6:	4313      	orrs	r3, r2
 80084a8:	3401      	adds	r4, #1
 80084aa:	9304      	str	r3, [sp, #16]
 80084ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b0:	4824      	ldr	r0, [pc, #144]	@ (8008544 <_svfiprintf_r+0x1e8>)
 80084b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084b6:	2206      	movs	r2, #6
 80084b8:	f7f7 fe8a 	bl	80001d0 <memchr>
 80084bc:	2800      	cmp	r0, #0
 80084be:	d036      	beq.n	800852e <_svfiprintf_r+0x1d2>
 80084c0:	4b21      	ldr	r3, [pc, #132]	@ (8008548 <_svfiprintf_r+0x1ec>)
 80084c2:	bb1b      	cbnz	r3, 800850c <_svfiprintf_r+0x1b0>
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	3307      	adds	r3, #7
 80084c8:	f023 0307 	bic.w	r3, r3, #7
 80084cc:	3308      	adds	r3, #8
 80084ce:	9303      	str	r3, [sp, #12]
 80084d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d2:	4433      	add	r3, r6
 80084d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084d6:	e76a      	b.n	80083ae <_svfiprintf_r+0x52>
 80084d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80084dc:	460c      	mov	r4, r1
 80084de:	2001      	movs	r0, #1
 80084e0:	e7a8      	b.n	8008434 <_svfiprintf_r+0xd8>
 80084e2:	2300      	movs	r3, #0
 80084e4:	3401      	adds	r4, #1
 80084e6:	9305      	str	r3, [sp, #20]
 80084e8:	4619      	mov	r1, r3
 80084ea:	f04f 0c0a 	mov.w	ip, #10
 80084ee:	4620      	mov	r0, r4
 80084f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084f4:	3a30      	subs	r2, #48	@ 0x30
 80084f6:	2a09      	cmp	r2, #9
 80084f8:	d903      	bls.n	8008502 <_svfiprintf_r+0x1a6>
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d0c6      	beq.n	800848c <_svfiprintf_r+0x130>
 80084fe:	9105      	str	r1, [sp, #20]
 8008500:	e7c4      	b.n	800848c <_svfiprintf_r+0x130>
 8008502:	fb0c 2101 	mla	r1, ip, r1, r2
 8008506:	4604      	mov	r4, r0
 8008508:	2301      	movs	r3, #1
 800850a:	e7f0      	b.n	80084ee <_svfiprintf_r+0x192>
 800850c:	ab03      	add	r3, sp, #12
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	462a      	mov	r2, r5
 8008512:	4b0e      	ldr	r3, [pc, #56]	@ (800854c <_svfiprintf_r+0x1f0>)
 8008514:	a904      	add	r1, sp, #16
 8008516:	4638      	mov	r0, r7
 8008518:	f3af 8000 	nop.w
 800851c:	1c42      	adds	r2, r0, #1
 800851e:	4606      	mov	r6, r0
 8008520:	d1d6      	bne.n	80084d0 <_svfiprintf_r+0x174>
 8008522:	89ab      	ldrh	r3, [r5, #12]
 8008524:	065b      	lsls	r3, r3, #25
 8008526:	f53f af2d 	bmi.w	8008384 <_svfiprintf_r+0x28>
 800852a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800852c:	e72c      	b.n	8008388 <_svfiprintf_r+0x2c>
 800852e:	ab03      	add	r3, sp, #12
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	462a      	mov	r2, r5
 8008534:	4b05      	ldr	r3, [pc, #20]	@ (800854c <_svfiprintf_r+0x1f0>)
 8008536:	a904      	add	r1, sp, #16
 8008538:	4638      	mov	r0, r7
 800853a:	f000 f879 	bl	8008630 <_printf_i>
 800853e:	e7ed      	b.n	800851c <_svfiprintf_r+0x1c0>
 8008540:	08008ac4 	.word	0x08008ac4
 8008544:	08008ace 	.word	0x08008ace
 8008548:	00000000 	.word	0x00000000
 800854c:	080082a5 	.word	0x080082a5
 8008550:	08008aca 	.word	0x08008aca

08008554 <_printf_common>:
 8008554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008558:	4616      	mov	r6, r2
 800855a:	4698      	mov	r8, r3
 800855c:	688a      	ldr	r2, [r1, #8]
 800855e:	690b      	ldr	r3, [r1, #16]
 8008560:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008564:	4293      	cmp	r3, r2
 8008566:	bfb8      	it	lt
 8008568:	4613      	movlt	r3, r2
 800856a:	6033      	str	r3, [r6, #0]
 800856c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008570:	4607      	mov	r7, r0
 8008572:	460c      	mov	r4, r1
 8008574:	b10a      	cbz	r2, 800857a <_printf_common+0x26>
 8008576:	3301      	adds	r3, #1
 8008578:	6033      	str	r3, [r6, #0]
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	0699      	lsls	r1, r3, #26
 800857e:	bf42      	ittt	mi
 8008580:	6833      	ldrmi	r3, [r6, #0]
 8008582:	3302      	addmi	r3, #2
 8008584:	6033      	strmi	r3, [r6, #0]
 8008586:	6825      	ldr	r5, [r4, #0]
 8008588:	f015 0506 	ands.w	r5, r5, #6
 800858c:	d106      	bne.n	800859c <_printf_common+0x48>
 800858e:	f104 0a19 	add.w	sl, r4, #25
 8008592:	68e3      	ldr	r3, [r4, #12]
 8008594:	6832      	ldr	r2, [r6, #0]
 8008596:	1a9b      	subs	r3, r3, r2
 8008598:	42ab      	cmp	r3, r5
 800859a:	dc26      	bgt.n	80085ea <_printf_common+0x96>
 800859c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085a0:	6822      	ldr	r2, [r4, #0]
 80085a2:	3b00      	subs	r3, #0
 80085a4:	bf18      	it	ne
 80085a6:	2301      	movne	r3, #1
 80085a8:	0692      	lsls	r2, r2, #26
 80085aa:	d42b      	bmi.n	8008604 <_printf_common+0xb0>
 80085ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085b0:	4641      	mov	r1, r8
 80085b2:	4638      	mov	r0, r7
 80085b4:	47c8      	blx	r9
 80085b6:	3001      	adds	r0, #1
 80085b8:	d01e      	beq.n	80085f8 <_printf_common+0xa4>
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	6922      	ldr	r2, [r4, #16]
 80085be:	f003 0306 	and.w	r3, r3, #6
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	bf02      	ittt	eq
 80085c6:	68e5      	ldreq	r5, [r4, #12]
 80085c8:	6833      	ldreq	r3, [r6, #0]
 80085ca:	1aed      	subeq	r5, r5, r3
 80085cc:	68a3      	ldr	r3, [r4, #8]
 80085ce:	bf0c      	ite	eq
 80085d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085d4:	2500      	movne	r5, #0
 80085d6:	4293      	cmp	r3, r2
 80085d8:	bfc4      	itt	gt
 80085da:	1a9b      	subgt	r3, r3, r2
 80085dc:	18ed      	addgt	r5, r5, r3
 80085de:	2600      	movs	r6, #0
 80085e0:	341a      	adds	r4, #26
 80085e2:	42b5      	cmp	r5, r6
 80085e4:	d11a      	bne.n	800861c <_printf_common+0xc8>
 80085e6:	2000      	movs	r0, #0
 80085e8:	e008      	b.n	80085fc <_printf_common+0xa8>
 80085ea:	2301      	movs	r3, #1
 80085ec:	4652      	mov	r2, sl
 80085ee:	4641      	mov	r1, r8
 80085f0:	4638      	mov	r0, r7
 80085f2:	47c8      	blx	r9
 80085f4:	3001      	adds	r0, #1
 80085f6:	d103      	bne.n	8008600 <_printf_common+0xac>
 80085f8:	f04f 30ff 	mov.w	r0, #4294967295
 80085fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008600:	3501      	adds	r5, #1
 8008602:	e7c6      	b.n	8008592 <_printf_common+0x3e>
 8008604:	18e1      	adds	r1, r4, r3
 8008606:	1c5a      	adds	r2, r3, #1
 8008608:	2030      	movs	r0, #48	@ 0x30
 800860a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800860e:	4422      	add	r2, r4
 8008610:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008614:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008618:	3302      	adds	r3, #2
 800861a:	e7c7      	b.n	80085ac <_printf_common+0x58>
 800861c:	2301      	movs	r3, #1
 800861e:	4622      	mov	r2, r4
 8008620:	4641      	mov	r1, r8
 8008622:	4638      	mov	r0, r7
 8008624:	47c8      	blx	r9
 8008626:	3001      	adds	r0, #1
 8008628:	d0e6      	beq.n	80085f8 <_printf_common+0xa4>
 800862a:	3601      	adds	r6, #1
 800862c:	e7d9      	b.n	80085e2 <_printf_common+0x8e>
	...

08008630 <_printf_i>:
 8008630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008634:	7e0f      	ldrb	r7, [r1, #24]
 8008636:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008638:	2f78      	cmp	r7, #120	@ 0x78
 800863a:	4691      	mov	r9, r2
 800863c:	4680      	mov	r8, r0
 800863e:	460c      	mov	r4, r1
 8008640:	469a      	mov	sl, r3
 8008642:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008646:	d807      	bhi.n	8008658 <_printf_i+0x28>
 8008648:	2f62      	cmp	r7, #98	@ 0x62
 800864a:	d80a      	bhi.n	8008662 <_printf_i+0x32>
 800864c:	2f00      	cmp	r7, #0
 800864e:	f000 80d2 	beq.w	80087f6 <_printf_i+0x1c6>
 8008652:	2f58      	cmp	r7, #88	@ 0x58
 8008654:	f000 80b9 	beq.w	80087ca <_printf_i+0x19a>
 8008658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800865c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008660:	e03a      	b.n	80086d8 <_printf_i+0xa8>
 8008662:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008666:	2b15      	cmp	r3, #21
 8008668:	d8f6      	bhi.n	8008658 <_printf_i+0x28>
 800866a:	a101      	add	r1, pc, #4	@ (adr r1, 8008670 <_printf_i+0x40>)
 800866c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008670:	080086c9 	.word	0x080086c9
 8008674:	080086dd 	.word	0x080086dd
 8008678:	08008659 	.word	0x08008659
 800867c:	08008659 	.word	0x08008659
 8008680:	08008659 	.word	0x08008659
 8008684:	08008659 	.word	0x08008659
 8008688:	080086dd 	.word	0x080086dd
 800868c:	08008659 	.word	0x08008659
 8008690:	08008659 	.word	0x08008659
 8008694:	08008659 	.word	0x08008659
 8008698:	08008659 	.word	0x08008659
 800869c:	080087dd 	.word	0x080087dd
 80086a0:	08008707 	.word	0x08008707
 80086a4:	08008797 	.word	0x08008797
 80086a8:	08008659 	.word	0x08008659
 80086ac:	08008659 	.word	0x08008659
 80086b0:	080087ff 	.word	0x080087ff
 80086b4:	08008659 	.word	0x08008659
 80086b8:	08008707 	.word	0x08008707
 80086bc:	08008659 	.word	0x08008659
 80086c0:	08008659 	.word	0x08008659
 80086c4:	0800879f 	.word	0x0800879f
 80086c8:	6833      	ldr	r3, [r6, #0]
 80086ca:	1d1a      	adds	r2, r3, #4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6032      	str	r2, [r6, #0]
 80086d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086d8:	2301      	movs	r3, #1
 80086da:	e09d      	b.n	8008818 <_printf_i+0x1e8>
 80086dc:	6833      	ldr	r3, [r6, #0]
 80086de:	6820      	ldr	r0, [r4, #0]
 80086e0:	1d19      	adds	r1, r3, #4
 80086e2:	6031      	str	r1, [r6, #0]
 80086e4:	0606      	lsls	r6, r0, #24
 80086e6:	d501      	bpl.n	80086ec <_printf_i+0xbc>
 80086e8:	681d      	ldr	r5, [r3, #0]
 80086ea:	e003      	b.n	80086f4 <_printf_i+0xc4>
 80086ec:	0645      	lsls	r5, r0, #25
 80086ee:	d5fb      	bpl.n	80086e8 <_printf_i+0xb8>
 80086f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086f4:	2d00      	cmp	r5, #0
 80086f6:	da03      	bge.n	8008700 <_printf_i+0xd0>
 80086f8:	232d      	movs	r3, #45	@ 0x2d
 80086fa:	426d      	negs	r5, r5
 80086fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008700:	4859      	ldr	r0, [pc, #356]	@ (8008868 <_printf_i+0x238>)
 8008702:	230a      	movs	r3, #10
 8008704:	e011      	b.n	800872a <_printf_i+0xfa>
 8008706:	6821      	ldr	r1, [r4, #0]
 8008708:	6833      	ldr	r3, [r6, #0]
 800870a:	0608      	lsls	r0, r1, #24
 800870c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008710:	d402      	bmi.n	8008718 <_printf_i+0xe8>
 8008712:	0649      	lsls	r1, r1, #25
 8008714:	bf48      	it	mi
 8008716:	b2ad      	uxthmi	r5, r5
 8008718:	2f6f      	cmp	r7, #111	@ 0x6f
 800871a:	4853      	ldr	r0, [pc, #332]	@ (8008868 <_printf_i+0x238>)
 800871c:	6033      	str	r3, [r6, #0]
 800871e:	bf14      	ite	ne
 8008720:	230a      	movne	r3, #10
 8008722:	2308      	moveq	r3, #8
 8008724:	2100      	movs	r1, #0
 8008726:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800872a:	6866      	ldr	r6, [r4, #4]
 800872c:	60a6      	str	r6, [r4, #8]
 800872e:	2e00      	cmp	r6, #0
 8008730:	bfa2      	ittt	ge
 8008732:	6821      	ldrge	r1, [r4, #0]
 8008734:	f021 0104 	bicge.w	r1, r1, #4
 8008738:	6021      	strge	r1, [r4, #0]
 800873a:	b90d      	cbnz	r5, 8008740 <_printf_i+0x110>
 800873c:	2e00      	cmp	r6, #0
 800873e:	d04b      	beq.n	80087d8 <_printf_i+0x1a8>
 8008740:	4616      	mov	r6, r2
 8008742:	fbb5 f1f3 	udiv	r1, r5, r3
 8008746:	fb03 5711 	mls	r7, r3, r1, r5
 800874a:	5dc7      	ldrb	r7, [r0, r7]
 800874c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008750:	462f      	mov	r7, r5
 8008752:	42bb      	cmp	r3, r7
 8008754:	460d      	mov	r5, r1
 8008756:	d9f4      	bls.n	8008742 <_printf_i+0x112>
 8008758:	2b08      	cmp	r3, #8
 800875a:	d10b      	bne.n	8008774 <_printf_i+0x144>
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	07df      	lsls	r7, r3, #31
 8008760:	d508      	bpl.n	8008774 <_printf_i+0x144>
 8008762:	6923      	ldr	r3, [r4, #16]
 8008764:	6861      	ldr	r1, [r4, #4]
 8008766:	4299      	cmp	r1, r3
 8008768:	bfde      	ittt	le
 800876a:	2330      	movle	r3, #48	@ 0x30
 800876c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008770:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008774:	1b92      	subs	r2, r2, r6
 8008776:	6122      	str	r2, [r4, #16]
 8008778:	f8cd a000 	str.w	sl, [sp]
 800877c:	464b      	mov	r3, r9
 800877e:	aa03      	add	r2, sp, #12
 8008780:	4621      	mov	r1, r4
 8008782:	4640      	mov	r0, r8
 8008784:	f7ff fee6 	bl	8008554 <_printf_common>
 8008788:	3001      	adds	r0, #1
 800878a:	d14a      	bne.n	8008822 <_printf_i+0x1f2>
 800878c:	f04f 30ff 	mov.w	r0, #4294967295
 8008790:	b004      	add	sp, #16
 8008792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	f043 0320 	orr.w	r3, r3, #32
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	4833      	ldr	r0, [pc, #204]	@ (800886c <_printf_i+0x23c>)
 80087a0:	2778      	movs	r7, #120	@ 0x78
 80087a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	6831      	ldr	r1, [r6, #0]
 80087aa:	061f      	lsls	r7, r3, #24
 80087ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80087b0:	d402      	bmi.n	80087b8 <_printf_i+0x188>
 80087b2:	065f      	lsls	r7, r3, #25
 80087b4:	bf48      	it	mi
 80087b6:	b2ad      	uxthmi	r5, r5
 80087b8:	6031      	str	r1, [r6, #0]
 80087ba:	07d9      	lsls	r1, r3, #31
 80087bc:	bf44      	itt	mi
 80087be:	f043 0320 	orrmi.w	r3, r3, #32
 80087c2:	6023      	strmi	r3, [r4, #0]
 80087c4:	b11d      	cbz	r5, 80087ce <_printf_i+0x19e>
 80087c6:	2310      	movs	r3, #16
 80087c8:	e7ac      	b.n	8008724 <_printf_i+0xf4>
 80087ca:	4827      	ldr	r0, [pc, #156]	@ (8008868 <_printf_i+0x238>)
 80087cc:	e7e9      	b.n	80087a2 <_printf_i+0x172>
 80087ce:	6823      	ldr	r3, [r4, #0]
 80087d0:	f023 0320 	bic.w	r3, r3, #32
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	e7f6      	b.n	80087c6 <_printf_i+0x196>
 80087d8:	4616      	mov	r6, r2
 80087da:	e7bd      	b.n	8008758 <_printf_i+0x128>
 80087dc:	6833      	ldr	r3, [r6, #0]
 80087de:	6825      	ldr	r5, [r4, #0]
 80087e0:	6961      	ldr	r1, [r4, #20]
 80087e2:	1d18      	adds	r0, r3, #4
 80087e4:	6030      	str	r0, [r6, #0]
 80087e6:	062e      	lsls	r6, r5, #24
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	d501      	bpl.n	80087f0 <_printf_i+0x1c0>
 80087ec:	6019      	str	r1, [r3, #0]
 80087ee:	e002      	b.n	80087f6 <_printf_i+0x1c6>
 80087f0:	0668      	lsls	r0, r5, #25
 80087f2:	d5fb      	bpl.n	80087ec <_printf_i+0x1bc>
 80087f4:	8019      	strh	r1, [r3, #0]
 80087f6:	2300      	movs	r3, #0
 80087f8:	6123      	str	r3, [r4, #16]
 80087fa:	4616      	mov	r6, r2
 80087fc:	e7bc      	b.n	8008778 <_printf_i+0x148>
 80087fe:	6833      	ldr	r3, [r6, #0]
 8008800:	1d1a      	adds	r2, r3, #4
 8008802:	6032      	str	r2, [r6, #0]
 8008804:	681e      	ldr	r6, [r3, #0]
 8008806:	6862      	ldr	r2, [r4, #4]
 8008808:	2100      	movs	r1, #0
 800880a:	4630      	mov	r0, r6
 800880c:	f7f7 fce0 	bl	80001d0 <memchr>
 8008810:	b108      	cbz	r0, 8008816 <_printf_i+0x1e6>
 8008812:	1b80      	subs	r0, r0, r6
 8008814:	6060      	str	r0, [r4, #4]
 8008816:	6863      	ldr	r3, [r4, #4]
 8008818:	6123      	str	r3, [r4, #16]
 800881a:	2300      	movs	r3, #0
 800881c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008820:	e7aa      	b.n	8008778 <_printf_i+0x148>
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	4632      	mov	r2, r6
 8008826:	4649      	mov	r1, r9
 8008828:	4640      	mov	r0, r8
 800882a:	47d0      	blx	sl
 800882c:	3001      	adds	r0, #1
 800882e:	d0ad      	beq.n	800878c <_printf_i+0x15c>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	079b      	lsls	r3, r3, #30
 8008834:	d413      	bmi.n	800885e <_printf_i+0x22e>
 8008836:	68e0      	ldr	r0, [r4, #12]
 8008838:	9b03      	ldr	r3, [sp, #12]
 800883a:	4298      	cmp	r0, r3
 800883c:	bfb8      	it	lt
 800883e:	4618      	movlt	r0, r3
 8008840:	e7a6      	b.n	8008790 <_printf_i+0x160>
 8008842:	2301      	movs	r3, #1
 8008844:	4632      	mov	r2, r6
 8008846:	4649      	mov	r1, r9
 8008848:	4640      	mov	r0, r8
 800884a:	47d0      	blx	sl
 800884c:	3001      	adds	r0, #1
 800884e:	d09d      	beq.n	800878c <_printf_i+0x15c>
 8008850:	3501      	adds	r5, #1
 8008852:	68e3      	ldr	r3, [r4, #12]
 8008854:	9903      	ldr	r1, [sp, #12]
 8008856:	1a5b      	subs	r3, r3, r1
 8008858:	42ab      	cmp	r3, r5
 800885a:	dcf2      	bgt.n	8008842 <_printf_i+0x212>
 800885c:	e7eb      	b.n	8008836 <_printf_i+0x206>
 800885e:	2500      	movs	r5, #0
 8008860:	f104 0619 	add.w	r6, r4, #25
 8008864:	e7f5      	b.n	8008852 <_printf_i+0x222>
 8008866:	bf00      	nop
 8008868:	08008ad5 	.word	0x08008ad5
 800886c:	08008ae6 	.word	0x08008ae6

08008870 <memmove>:
 8008870:	4288      	cmp	r0, r1
 8008872:	b510      	push	{r4, lr}
 8008874:	eb01 0402 	add.w	r4, r1, r2
 8008878:	d902      	bls.n	8008880 <memmove+0x10>
 800887a:	4284      	cmp	r4, r0
 800887c:	4623      	mov	r3, r4
 800887e:	d807      	bhi.n	8008890 <memmove+0x20>
 8008880:	1e43      	subs	r3, r0, #1
 8008882:	42a1      	cmp	r1, r4
 8008884:	d008      	beq.n	8008898 <memmove+0x28>
 8008886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800888a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800888e:	e7f8      	b.n	8008882 <memmove+0x12>
 8008890:	4402      	add	r2, r0
 8008892:	4601      	mov	r1, r0
 8008894:	428a      	cmp	r2, r1
 8008896:	d100      	bne.n	800889a <memmove+0x2a>
 8008898:	bd10      	pop	{r4, pc}
 800889a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800889e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088a2:	e7f7      	b.n	8008894 <memmove+0x24>

080088a4 <_sbrk_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	4d06      	ldr	r5, [pc, #24]	@ (80088c0 <_sbrk_r+0x1c>)
 80088a8:	2300      	movs	r3, #0
 80088aa:	4604      	mov	r4, r0
 80088ac:	4608      	mov	r0, r1
 80088ae:	602b      	str	r3, [r5, #0]
 80088b0:	f7fb fb84 	bl	8003fbc <_sbrk>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_sbrk_r+0x1a>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	b103      	cbz	r3, 80088be <_sbrk_r+0x1a>
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	20000410 	.word	0x20000410

080088c4 <memcpy>:
 80088c4:	440a      	add	r2, r1
 80088c6:	4291      	cmp	r1, r2
 80088c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80088cc:	d100      	bne.n	80088d0 <memcpy+0xc>
 80088ce:	4770      	bx	lr
 80088d0:	b510      	push	{r4, lr}
 80088d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088da:	4291      	cmp	r1, r2
 80088dc:	d1f9      	bne.n	80088d2 <memcpy+0xe>
 80088de:	bd10      	pop	{r4, pc}

080088e0 <_realloc_r>:
 80088e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e4:	4680      	mov	r8, r0
 80088e6:	4615      	mov	r5, r2
 80088e8:	460c      	mov	r4, r1
 80088ea:	b921      	cbnz	r1, 80088f6 <_realloc_r+0x16>
 80088ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f0:	4611      	mov	r1, r2
 80088f2:	f7ff bc4b 	b.w	800818c <_malloc_r>
 80088f6:	b92a      	cbnz	r2, 8008904 <_realloc_r+0x24>
 80088f8:	f7ff fbdc 	bl	80080b4 <_free_r>
 80088fc:	2400      	movs	r4, #0
 80088fe:	4620      	mov	r0, r4
 8008900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008904:	f000 f81a 	bl	800893c <_malloc_usable_size_r>
 8008908:	4285      	cmp	r5, r0
 800890a:	4606      	mov	r6, r0
 800890c:	d802      	bhi.n	8008914 <_realloc_r+0x34>
 800890e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008912:	d8f4      	bhi.n	80088fe <_realloc_r+0x1e>
 8008914:	4629      	mov	r1, r5
 8008916:	4640      	mov	r0, r8
 8008918:	f7ff fc38 	bl	800818c <_malloc_r>
 800891c:	4607      	mov	r7, r0
 800891e:	2800      	cmp	r0, #0
 8008920:	d0ec      	beq.n	80088fc <_realloc_r+0x1c>
 8008922:	42b5      	cmp	r5, r6
 8008924:	462a      	mov	r2, r5
 8008926:	4621      	mov	r1, r4
 8008928:	bf28      	it	cs
 800892a:	4632      	movcs	r2, r6
 800892c:	f7ff ffca 	bl	80088c4 <memcpy>
 8008930:	4621      	mov	r1, r4
 8008932:	4640      	mov	r0, r8
 8008934:	f7ff fbbe 	bl	80080b4 <_free_r>
 8008938:	463c      	mov	r4, r7
 800893a:	e7e0      	b.n	80088fe <_realloc_r+0x1e>

0800893c <_malloc_usable_size_r>:
 800893c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008940:	1f18      	subs	r0, r3, #4
 8008942:	2b00      	cmp	r3, #0
 8008944:	bfbc      	itt	lt
 8008946:	580b      	ldrlt	r3, [r1, r0]
 8008948:	18c0      	addlt	r0, r0, r3
 800894a:	4770      	bx	lr

0800894c <_init>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr

08008958 <_fini>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr
