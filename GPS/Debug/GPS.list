
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004a64  08004a64  00005a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b18  08004b18  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b18  08004b18  00005b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b20  08004b20  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b20  08004b20  00005b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b24  08004b24  00005b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004b28  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000005c  08004b84  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08004b84  000062e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff9f  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f8  00000000  00000000  0001602b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00018828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c8a  00000000  00000000  00019868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021539  00000000  00000000  0001a4f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f61  00000000  00000000  0003ba2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c85f0  00000000  00000000  0004f98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117f7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048bc  00000000  00000000  00117fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0011c87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a4c 	.word	0x08004a4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004a4c 	.word	0x08004a4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <LCD_Set_Cursor>:

#define LCD_I2C_ADDRESS 0x4E  // I2C address for the LCD in arduino is 7-bit, 0x27, and in stm32 is 8-bit


// Set cursor to specific row and column
void LCD_Set_Cursor(uint8_t row, uint8_t col) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	460a      	mov	r2, r1
 8000886:	71fb      	strb	r3, [r7, #7]
 8000888:	4613      	mov	r3, r2
 800088a:	71bb      	strb	r3, [r7, #6]
	// for 16*2 lcd screen
    switch (row)
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d002      	beq.n	8000898 <LCD_Set_Cursor+0x1c>
 8000892:	2b01      	cmp	r3, #1
 8000894:	d005      	beq.n	80008a2 <LCD_Set_Cursor+0x26>
 8000896:	e009      	b.n	80008ac <LCD_Set_Cursor+0x30>
        {
            case 0:
                col |= 0x80;
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800089e:	71bb      	strb	r3, [r7, #6]
                break;
 80008a0:	e004      	b.n	80008ac <LCD_Set_Cursor+0x30>
            case 1:
                col |= 0xC0;
 80008a2:	79bb      	ldrb	r3, [r7, #6]
 80008a4:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80008a8:	71bb      	strb	r3, [r7, #6]
                break;
 80008aa:	bf00      	nop
        }
    LCD_Send_Command(col);
 80008ac:	79bb      	ldrb	r3, [r7, #6]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f804 	bl	80008bc <LCD_Send_Command>
//               break;
//           default:
//               return;  // Invalid row, do nothing
//        }
//    LCD_Send_Command(col);
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <LCD_Send_Command>:

// Send a command to the LCD
void LCD_Send_Command(uint8_t cmd) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b086      	sub	sp, #24
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = (cmd & 0xF0);
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f023 030f 	bic.w	r3, r3, #15
 80008cc:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = ((cmd << 4) & 0xF0);
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	011b      	lsls	r3, r3, #4
 80008d2:	73bb      	strb	r3, [r7, #14]

    uint8_t data[4] = {
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	f043 030c 	orr.w	r3, r3, #12
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	723b      	strb	r3, [r7, #8]
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	727b      	strb	r3, [r7, #9]
 80008e8:	7bbb      	ldrb	r3, [r7, #14]
 80008ea:	f043 030c 	orr.w	r3, r3, #12
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	72bb      	strb	r3, [r7, #10]
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	72fb      	strb	r3, [r7, #11]
        upper_nibble | 0x0C,   // Enable high
        upper_nibble | 0x08,   // Enable low
        lower_nibble | 0x0C,   // Enable high
        lower_nibble | 0x08    // Enable low
    };
    HAL_I2C_Master_Transmit(&hi2c3, LCD_I2C_ADDRESS, data, sizeof(data), HAL_MAX_DELAY);
 80008fc:	f107 0208 	add.w	r2, r7, #8
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2304      	movs	r3, #4
 8000908:	214e      	movs	r1, #78	@ 0x4e
 800090a:	4803      	ldr	r0, [pc, #12]	@ (8000918 <LCD_Send_Command+0x5c>)
 800090c:	f001 fa82 	bl	8001e14 <HAL_I2C_Master_Transmit>
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000078 	.word	0x20000078

0800091c <LCD_Send_Data>:

// Send data (character) to the LCD
void LCD_Send_Data(uint8_t data) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af02      	add	r7, sp, #8
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
    uint8_t upper_nibble = (data & 0xF0);
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	f023 030f 	bic.w	r3, r3, #15
 800092c:	73fb      	strb	r3, [r7, #15]
    uint8_t lower_nibble = ((data << 4) & 0xF0);
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	011b      	lsls	r3, r3, #4
 8000932:	73bb      	strb	r3, [r7, #14]

    uint8_t data_array[4] = {
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	f043 030d 	orr.w	r3, r3, #13
 800093a:	b2db      	uxtb	r3, r3
 800093c:	723b      	strb	r3, [r7, #8]
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	f043 0309 	orr.w	r3, r3, #9
 8000944:	b2db      	uxtb	r3, r3
 8000946:	727b      	strb	r3, [r7, #9]
 8000948:	7bbb      	ldrb	r3, [r7, #14]
 800094a:	f043 030d 	orr.w	r3, r3, #13
 800094e:	b2db      	uxtb	r3, r3
 8000950:	72bb      	strb	r3, [r7, #10]
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	f043 0309 	orr.w	r3, r3, #9
 8000958:	b2db      	uxtb	r3, r3
 800095a:	72fb      	strb	r3, [r7, #11]
        upper_nibble | 0x0D,   // Enable high, RS = 1
        upper_nibble | 0x09,   // Enable low, RS = 1
        lower_nibble | 0x0D,   // Enable high, RS = 1
        lower_nibble | 0x09    // Enable low, RS = 1
    };
    HAL_I2C_Master_Transmit(&hi2c3, LCD_I2C_ADDRESS, data_array, sizeof(data_array), HAL_MAX_DELAY);
 800095c:	f107 0208 	add.w	r2, r7, #8
 8000960:	f04f 33ff 	mov.w	r3, #4294967295
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2304      	movs	r3, #4
 8000968:	214e      	movs	r1, #78	@ 0x4e
 800096a:	4803      	ldr	r0, [pc, #12]	@ (8000978 <LCD_Send_Data+0x5c>)
 800096c:	f001 fa52 	bl	8001e14 <HAL_I2C_Master_Transmit>
}
 8000970:	bf00      	nop
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000078 	.word	0x20000078

0800097c <LCD_Send_String>:

// Send a string to the LCD
void LCD_Send_String(char *str) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000984:	e007      	b.n	8000996 <LCD_Send_String+0x1a>
        LCD_Send_Data((uint8_t)(*str));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffc6 	bl	800091c <LCD_Send_Data>
        str++;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3301      	adds	r3, #1
 8000994:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1f3      	bne.n	8000986 <LCD_Send_String+0xa>
    }
}
 800099e:	bf00      	nop
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <LCD_Init>:

void LCD_Init(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    // Initialization sequence for the LCD
    HAL_Delay(50);                // Wait for LCD to power up
 80009ac:	2032      	movs	r0, #50	@ 0x32
 80009ae:	f000 fec5 	bl	800173c <HAL_Delay>
    LCD_Send_Command(0x30);       // Wake up
 80009b2:	2030      	movs	r0, #48	@ 0x30
 80009b4:	f7ff ff82 	bl	80008bc <LCD_Send_Command>
    HAL_Delay(5);
 80009b8:	2005      	movs	r0, #5
 80009ba:	f000 febf 	bl	800173c <HAL_Delay>
    LCD_Send_Command(0x30);       // Wake up
 80009be:	2030      	movs	r0, #48	@ 0x30
 80009c0:	f7ff ff7c 	bl	80008bc <LCD_Send_Command>
    HAL_Delay(1);
 80009c4:	2001      	movs	r0, #1
 80009c6:	f000 feb9 	bl	800173c <HAL_Delay>
    LCD_Send_Command(0x30);       // Wake up
 80009ca:	2030      	movs	r0, #48	@ 0x30
 80009cc:	f7ff ff76 	bl	80008bc <LCD_Send_Command>
    LCD_Send_Command(0x20);       // 4-bit mode
 80009d0:	2020      	movs	r0, #32
 80009d2:	f7ff ff73 	bl	80008bc <LCD_Send_Command>

    // Configure display
    LCD_Send_Command(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80009d6:	2028      	movs	r0, #40	@ 0x28
 80009d8:	f7ff ff70 	bl	80008bc <LCD_Send_Command>
    HAL_Delay(1);
 80009dc:	2001      	movs	r0, #1
 80009de:	f000 fead 	bl	800173c <HAL_Delay>
    LCD_Send_Command(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80009e2:	2008      	movs	r0, #8
 80009e4:	f7ff ff6a 	bl	80008bc <LCD_Send_Command>
    HAL_Delay(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f000 fea7 	bl	800173c <HAL_Delay>
    LCD_Send_Command(0x01);  // clear display
 80009ee:	2001      	movs	r0, #1
 80009f0:	f7ff ff64 	bl	80008bc <LCD_Send_Command>
    HAL_Delay(2);
 80009f4:	2002      	movs	r0, #2
 80009f6:	f000 fea1 	bl	800173c <HAL_Delay>
    LCD_Send_Command(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80009fa:	2006      	movs	r0, #6
 80009fc:	f7ff ff5e 	bl	80008bc <LCD_Send_Command>
    HAL_Delay(1);
 8000a00:	2001      	movs	r0, #1
 8000a02:	f000 fe9b 	bl	800173c <HAL_Delay>
    LCD_Send_Command(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000a06:	200c      	movs	r0, #12
 8000a08:	f7ff ff58 	bl	80008bc <LCD_Send_Command>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 030c 	add.w	r3, r7, #12
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b3b      	ldr	r3, [pc, #236]	@ (8000b14 <MX_GPIO_Init+0x104>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a3a      	ldr	r2, [pc, #232]	@ (8000b14 <MX_GPIO_Init+0x104>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b38      	ldr	r3, [pc, #224]	@ (8000b14 <MX_GPIO_Init+0x104>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b35      	ldr	r3, [pc, #212]	@ (8000b14 <MX_GPIO_Init+0x104>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	4a34      	ldr	r2, [pc, #208]	@ (8000b14 <MX_GPIO_Init+0x104>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4a:	4b32      	ldr	r3, [pc, #200]	@ (8000b14 <MX_GPIO_Init+0x104>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b2f      	ldr	r3, [pc, #188]	@ (8000b14 <MX_GPIO_Init+0x104>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	4a2e      	ldr	r2, [pc, #184]	@ (8000b14 <MX_GPIO_Init+0x104>)
 8000a5c:	f043 0302 	orr.w	r3, r3, #2
 8000a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a62:	4b2c      	ldr	r3, [pc, #176]	@ (8000b14 <MX_GPIO_Init+0x104>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	f003 0302 	and.w	r3, r3, #2
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LED_TCXO_Pin, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2150      	movs	r1, #80	@ 0x50
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a76:	f001 f901 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	4826      	ldr	r0, [pc, #152]	@ (8000b18 <MX_GPIO_Init+0x108>)
 8000a80:	f001 f8fc 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PPS_Pin;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PPS_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a9c:	f000 ff84 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ab0:	2307      	movs	r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000abe:	f000 ff73 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|LED_TCXO_Pin;
 8000ac2:	2350      	movs	r3, #80	@ 0x50
 8000ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 030c 	add.w	r3, r7, #12
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000adc:	f000 ff64 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	4808      	ldr	r0, [pc, #32]	@ (8000b18 <MX_GPIO_Init+0x108>)
 8000af8:	f000 ff56 	bl	80019a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2101      	movs	r1, #1
 8000b00:	2007      	movs	r0, #7
 8000b02:	f000 ff1a 	bl	800193a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b06:	2007      	movs	r0, #7
 8000b08:	f000 ff33 	bl	8001972 <HAL_NVIC_EnableIRQ>

}
 8000b0c:	bf00      	nop
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40021000 	.word	0x40021000
 8000b18:	48000400 	.word	0x48000400

08000b1c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	@ (8000b94 <MX_I2C3_Init+0x78>)
 8000b24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00B07CB4;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b28:	4a1b      	ldr	r2, [pc, #108]	@ (8000b98 <MX_I2C3_Init+0x7c>)
 8000b2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b32:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b56:	480e      	ldr	r0, [pc, #56]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b58:	f001 f8c0 	bl	8001cdc <HAL_I2C_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b62:	f000 fb51 	bl	8001208 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4809      	ldr	r0, [pc, #36]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b6a:	f001 fc85 	bl	8002478 <HAL_I2CEx_ConfigAnalogFilter>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b74:	f000 fb48 	bl	8001208 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_I2C3_Init+0x74>)
 8000b7c:	f001 fcc7 	bl	800250e <HAL_I2CEx_ConfigDigitalFilter>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 fb3f 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000078 	.word	0x20000078
 8000b94:	40005c00 	.word	0x40005c00
 8000b98:	00b07cb4 	.word	0x00b07cb4

08000b9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0a0      	sub	sp, #128	@ 0x80
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	f107 0318 	add.w	r3, r7, #24
 8000bb8:	2254      	movs	r2, #84	@ 0x54
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f003 fac5 	bl	800414c <memset>
  if(i2cHandle->Instance==I2C3)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8000c7c <HAL_I2C_MspInit+0xe0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d153      	bne.n	8000c74 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000bcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd6:	f107 0318 	add.w	r3, r7, #24
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f002 fb58 	bl	8003290 <HAL_RCCEx_PeriphCLKConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000be6:	f000 fb0f 	bl	8001208 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b25      	ldr	r3, [pc, #148]	@ (8000c80 <HAL_I2C_MspInit+0xe4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bee:	4a24      	ldr	r2, [pc, #144]	@ (8000c80 <HAL_I2C_MspInit+0xe4>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf6:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <HAL_I2C_MspInit+0xe4>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b1f      	ldr	r3, [pc, #124]	@ (8000c80 <HAL_I2C_MspInit+0xe4>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c06:	4a1e      	ldr	r2, [pc, #120]	@ (8000c80 <HAL_I2C_MspInit+0xe4>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c80 <HAL_I2C_MspInit+0xe4>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c1a:	2380      	movs	r3, #128	@ 0x80
 8000c1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c1e:	2312      	movs	r3, #18
 8000c20:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c38:	f000 feb6 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c40:	2312      	movs	r3, #18
 8000c42:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000c54:	4619      	mov	r1, r3
 8000c56:	480b      	ldr	r0, [pc, #44]	@ (8000c84 <HAL_I2C_MspInit+0xe8>)
 8000c58:	f000 fea6 	bl	80019a8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <HAL_I2C_MspInit+0xe4>)
 8000c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c60:	4a07      	ldr	r2, [pc, #28]	@ (8000c80 <HAL_I2C_MspInit+0xe4>)
 8000c62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c66:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c68:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_I2C_MspInit+0xe4>)
 8000c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c74:	bf00      	nop
 8000c76:	3780      	adds	r7, #128	@ 0x80
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40005c00 	.word	0x40005c00
 8000c80:	40021000 	.word	0x40021000
 8000c84:	48000400 	.word	0x48000400

08000c88 <HAL_TIM_PeriodElapsedCallback>:
//        HAL_UART_Receive_IT(&huart2, gps_buffer, sizeof(gps_buffer));
//    }
//}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) { // internal clock 10Hz
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a34      	ldr	r2, [pc, #208]	@ (8000d68 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d125      	bne.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x5e>
//    	uint32_t currentTick = HAL_GetTick();
//    	system_clock += (currentTick - previousTick)/1000; // system_clock in ms
//    	previousTick = currentTick;
    	sys_counter += 1;
 8000c9a:	4b34      	ldr	r3, [pc, #208]	@ (8000d6c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	4b32      	ldr	r3, [pc, #200]	@ (8000d6c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000ca4:	701a      	strb	r2, [r3, #0]
    	system_clock += 1;
 8000ca6:	4b32      	ldr	r3, [pc, #200]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	4a30      	ldr	r2, [pc, #192]	@ (8000d70 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000cae:	6013      	str	r3, [r2, #0]
    	if (sys_counter >= 999){
    		sys_counter = 0;
    	}
    	response_time = HAL_GetTick() - gps_time;
 8000cb0:	f000 fd38 	bl	8001724 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d74 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	4a2e      	ldr	r2, [pc, #184]	@ (8000d78 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000cbe:	6013      	str	r3, [r2, #0]
    	if(response_time < 1001){
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000cc8:	d803      	bhi.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x4a>
    		PPS_flag = 1;
 8000cca:	4b2c      	ldr	r3, [pc, #176]	@ (8000d7c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	e009      	b.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x5e>
    	}
    	else{
    		PPS_flag = 0;
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d7c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	701a      	strb	r2, [r3, #0]
    		PrevTime = 0;
 8000cd8:	4b29      	ldr	r3, [pc, #164]	@ (8000d80 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
    		TCXO_PPM = 0.0;
 8000cde:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ce0:	f04f 0200 	mov.w	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
    	}
	}
	if (htim->Instance == TIM2) {
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cee:	d136      	bne.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0xd6>
		tcxo_counter += 1; // 100k Hz TCXO
 8000cf0:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	4a24      	ldr	r2, [pc, #144]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000cf8:	6013      	str	r3, [r2, #0]
		tcxo_clock += 1;
 8000cfa:	4b24      	ldr	r3, [pc, #144]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a22      	ldr	r2, [pc, #136]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d02:	6013      	str	r3, [r2, #0]
		if(tcxo_counter >= 99999){
 8000d04:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a21      	ldr	r2, [pc, #132]	@ (8000d90 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d927      	bls.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0xd6>
			tcxo_counter = 0;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
			if (LED_flag2 == 0){
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d110      	bne.n	8000d3e <HAL_TIM_PeriodElapsedCallback+0xb6>
				HAL_GPIO_WritePin(LED_TCXO_GPIO_Port, LED_TCXO_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2140      	movs	r1, #64	@ 0x40
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d24:	f000 ffaa 	bl	8001c7c <HAL_GPIO_WritePin>
				LED_flag2 = !LED_flag2;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf0c      	ite	eq
 8000d30:	2301      	moveq	r3, #1
 8000d32:	2300      	movne	r3, #0
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d3a:	701a      	strb	r2, [r3, #0]
//		if (tcxo_flag == 1 && tcxo_clock > 1){ // compensate the error observed in tcxo
//			tcxo_clock -= 1;
//			tcxo_flag = 0;
//		}
	}
}
 8000d3c:	e00f      	b.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0xd6>
				HAL_GPIO_WritePin(LED_TCXO_GPIO_Port, LED_TCXO_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2140      	movs	r1, #64	@ 0x40
 8000d42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d46:	f000 ff99 	bl	8001c7c <HAL_GPIO_WritePin>
				LED_flag2 = !LED_flag2;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bf0c      	ite	eq
 8000d52:	2301      	moveq	r3, #1
 8000d54:	2300      	movne	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d5c:	701a      	strb	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40012c00 	.word	0x40012c00
 8000d6c:	200000fb 	.word	0x200000fb
 8000d70:	200000cc 	.word	0x200000cc
 8000d74:	200000dc 	.word	0x200000dc
 8000d78:	200000e0 	.word	0x200000e0
 8000d7c:	200000fa 	.word	0x200000fa
 8000d80:	200000d8 	.word	0x200000d8
 8000d84:	200000e4 	.word	0x200000e4
 8000d88:	200000d4 	.word	0x200000d4
 8000d8c:	200000d0 	.word	0x200000d0
 8000d90:	0001869e 	.word	0x0001869e
 8000d94:	200000f9 	.word	0x200000f9

08000d98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == PPS_Pin) {
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	f040 8082 	bne.w	8000eae <HAL_GPIO_EXTI_Callback+0x116>
		if (PPS_flag == 1){
 8000daa:	4b43      	ldr	r3, [pc, #268]	@ (8000eb8 <HAL_GPIO_EXTI_Callback+0x120>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d178      	bne.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x10c>
			if(PrevTime == 0){
 8000db2:	4b42      	ldr	r3, [pc, #264]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x124>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d104      	bne.n	8000dc4 <HAL_GPIO_EXTI_Callback+0x2c>
				PrevTime = tcxo_counter;
 8000dba:	4b41      	ldr	r3, [pc, #260]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x124>)
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e04a      	b.n	8000e5a <HAL_GPIO_EXTI_Callback+0xc2>
			}
			else{
				if(pps_counter >= 99){ // every 100 seconds, 10M count will be collected to calculate PPM with 0.1 precision
 8000dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b62      	cmp	r3, #98	@ 0x62
 8000dca:	d92f      	bls.n	8000e2c <HAL_GPIO_EXTI_Callback+0x94>
//					tcxo_counter -= accumulated_time; // use the accumulated_time in the previous 100 seconds to correct the next cycle
//					TCXO_PPM = (float)(((int64_t)accumulated_time * 1000000LL) / (float)10000000);
					disciplined_time += accumulated_time;
 8000dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x130>)
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b3e      	ldr	r3, [pc, #248]	@ (8000ecc <HAL_GPIO_EXTI_Callback+0x134>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a3c      	ldr	r2, [pc, #240]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x130>)
 8000dd8:	6013      	str	r3, [r2, #0]
					TCXO_PPM = (float)accumulated_time / 10.0;
 8000dda:	4b3c      	ldr	r3, [pc, #240]	@ (8000ecc <HAL_GPIO_EXTI_Callback+0x134>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000de6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8000dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dee:	4b38      	ldr	r3, [pc, #224]	@ (8000ed0 <HAL_GPIO_EXTI_Callback+0x138>)
 8000df0:	edc3 7a00 	vstr	s15, [r3]
					pps_counter = 0;
 8000df4:	4b33      	ldr	r3, [pc, #204]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
					int32_t temp = tcxo_counter - disciplined_time;
 8000dfa:	4b31      	ldr	r3, [pc, #196]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a32      	ldr	r2, [pc, #200]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x130>)
 8000e00:	6812      	ldr	r2, [r2, #0]
 8000e02:	1a9b      	subs	r3, r3, r2
 8000e04:	60bb      	str	r3, [r7, #8]
					accumulated_time = temp - (int32_t)PrevTime - 1;
 8000e06:	4b2d      	ldr	r3, [pc, #180]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x124>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	1a9b      	subs	r3, r3, r2
 8000e10:	3b01      	subs	r3, #1
 8000e12:	4a2e      	ldr	r2, [pc, #184]	@ (8000ecc <HAL_GPIO_EXTI_Callback+0x134>)
 8000e14:	6013      	str	r3, [r2, #0]
					PrevTime = temp;
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	4a28      	ldr	r2, [pc, #160]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x124>)
 8000e1a:	6013      	str	r3, [r2, #0]
					tcxo_counter -= disciplined_time; // process of disciplining
 8000e1c:	4b28      	ldr	r3, [pc, #160]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a29      	ldr	r2, [pc, #164]	@ (8000ec8 <HAL_GPIO_EXTI_Callback+0x130>)
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	1a9b      	subs	r3, r3, r2
 8000e26:	4a26      	ldr	r2, [pc, #152]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e016      	b.n	8000e5a <HAL_GPIO_EXTI_Callback+0xc2>
				}
				else{
					pps_counter += 1;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b23      	ldr	r3, [pc, #140]	@ (8000ec4 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000e36:	701a      	strb	r2, [r3, #0]
					int32_t temp = tcxo_counter;
 8000e38:	4b21      	ldr	r3, [pc, #132]	@ (8000ec0 <HAL_GPIO_EXTI_Callback+0x128>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
					accumulated_time += temp - (int32_t)PrevTime - 1 ;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x124>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	1a9b      	subs	r3, r3, r2
 8000e48:	1e5a      	subs	r2, r3, #1
 8000e4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <HAL_GPIO_EXTI_Callback+0x134>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a1e      	ldr	r2, [pc, #120]	@ (8000ecc <HAL_GPIO_EXTI_Callback+0x134>)
 8000e52:	6013      	str	r3, [r2, #0]
					PrevTime = temp;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4a19      	ldr	r2, [pc, #100]	@ (8000ebc <HAL_GPIO_EXTI_Callback+0x124>)
 8000e58:	6013      	str	r3, [r2, #0]
				}
			}
			if (LED_flag == 0){
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d110      	bne.n	8000e84 <HAL_GPIO_EXTI_Callback+0xec>
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2110      	movs	r1, #16
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e6a:	f000 ff07 	bl	8001c7c <HAL_GPIO_WritePin>
				LED_flag = !LED_flag;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	bf0c      	ite	eq
 8000e76:	2301      	moveq	r3, #1
 8000e78:	2300      	movne	r3, #0
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000e80:	701a      	strb	r2, [r3, #0]
 8000e82:	e00f      	b.n	8000ea4 <HAL_GPIO_EXTI_Callback+0x10c>
			}
			else{
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e8c:	f000 fef6 	bl	8001c7c <HAL_GPIO_WritePin>
				LED_flag = !LED_flag;
 8000e90:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf0c      	ite	eq
 8000e98:	2301      	moveq	r3, #1
 8000e9a:	2300      	movne	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <HAL_GPIO_EXTI_Callback+0x13c>)
 8000ea2:	701a      	strb	r2, [r3, #0]
//		}
//		else{
//			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
//			LED_flag = !LED_flag;
//		}
		gps_time = HAL_GetTick();
 8000ea4:	f000 fc3e 	bl	8001724 <HAL_GetTick>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed8 <HAL_GPIO_EXTI_Callback+0x140>)
 8000eac:	6013      	str	r3, [r2, #0]
    }
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	200000fa 	.word	0x200000fa
 8000ebc:	200000d8 	.word	0x200000d8
 8000ec0:	200000d4 	.word	0x200000d4
 8000ec4:	200000fc 	.word	0x200000fc
 8000ec8:	200000f4 	.word	0x200000f4
 8000ecc:	200000f0 	.word	0x200000f0
 8000ed0:	200000e4 	.word	0x200000e4
 8000ed4:	200000f8 	.word	0x200000f8
 8000ed8:	200000dc 	.word	0x200000dc

08000edc <print_PPM>:

void print_PPM(float TCXO_PPM, float SYS_PPM) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b090      	sub	sp, #64	@ 0x40
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ee6:	edc7 0a00 	vstr	s1, [r7]
    int int_TCXO_PPM = (int)TCXO_PPM;   // Extract integer part
 8000eea:	edd7 7a01 	vldr	s15, [r7, #4]
 8000eee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ef2:	ee17 3a90 	vmov	r3, s15
 8000ef6:	637b      	str	r3, [r7, #52]	@ 0x34
    unsigned int decimal_TCXO_PPM = (unsigned int)(fabs(TCXO_PPM - int_TCXO_PPM) * 10);  // Extract first decimal digit
 8000ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000efa:	ee07 3a90 	vmov	s15, r3
 8000efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f02:	ed97 7a01 	vldr	s14, [r7, #4]
 8000f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f0a:	eef0 7ae7 	vabs.f32	s15, s15
 8000f0e:	ee17 0a90 	vmov	r0, s15
 8000f12:	f7ff fc3b 	bl	800078c <__aeabi_f2d>
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd4 <print_PPM+0xf8>)
 8000f1c:	f7ff f9a8 	bl	8000270 <__aeabi_dmul>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	4610      	mov	r0, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	f7ff fc88 	bl	800083c <__aeabi_d2uiz>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    int int_SYS_PPM = (int)SYS_PPM;   // Extract integer part
 8000f30:	edd7 7a00 	vldr	s15, [r7]
 8000f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f38:	ee17 3a90 	vmov	r3, s15
 8000f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    unsigned int decimal_SYS_PPM = (unsigned int)(fabs(SYS_PPM - int_SYS_PPM) * 10);  // Extract first decimal digit
 8000f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f48:	ed97 7a00 	vldr	s14, [r7]
 8000f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f50:	eef0 7ae7 	vabs.f32	s15, s15
 8000f54:	ee17 0a90 	vmov	r0, s15
 8000f58:	f7ff fc18 	bl	800078c <__aeabi_f2d>
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <print_PPM+0xf8>)
 8000f62:	f7ff f985 	bl	8000270 <__aeabi_dmul>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fc65 	bl	800083c <__aeabi_d2uiz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	62bb      	str	r3, [r7, #40]	@ 0x28

	char tcxoPPM[15];
	char sysPPM[15];

    snprintf(tcxoPPM, sizeof(tcxoPPM), "P=%+d.%u", int_TCXO_PPM, decimal_TCXO_PPM);
 8000f76:	f107 0018 	add.w	r0, r7, #24
 8000f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f80:	4a15      	ldr	r2, [pc, #84]	@ (8000fd8 <print_PPM+0xfc>)
 8000f82:	210f      	movs	r1, #15
 8000f84:	f003 f8ae 	bl	80040e4 <sniprintf>
    snprintf(sysPPM, sizeof(sysPPM), "P=%+d.%u", int_SYS_PPM, decimal_SYS_PPM);
 8000f88:	f107 0008 	add.w	r0, r7, #8
 8000f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f92:	4a11      	ldr	r2, [pc, #68]	@ (8000fd8 <print_PPM+0xfc>)
 8000f94:	210f      	movs	r1, #15
 8000f96:	f003 f8a5 	bl	80040e4 <sniprintf>
	LCD_Set_Cursor(1,0);
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff fc6d 	bl	800087c <LCD_Set_Cursor>
	LCD_Send_String("                ");
 8000fa2:	480e      	ldr	r0, [pc, #56]	@ (8000fdc <print_PPM+0x100>)
 8000fa4:	f7ff fcea 	bl	800097c <LCD_Send_String>
	LCD_Set_Cursor(1,0);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2001      	movs	r0, #1
 8000fac:	f7ff fc66 	bl	800087c <LCD_Set_Cursor>
	LCD_Send_String(sysPPM);
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fce1 	bl	800097c <LCD_Send_String>
	LCD_Set_Cursor(1,10);
 8000fba:	210a      	movs	r1, #10
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f7ff fc5d 	bl	800087c <LCD_Set_Cursor>
	LCD_Send_String(tcxoPPM);
 8000fc2:	f107 0318 	add.w	r3, r7, #24
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fcd8 	bl	800097c <LCD_Send_String>
}
 8000fcc:	bf00      	nop
 8000fce:	3738      	adds	r7, #56	@ 0x38
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40240000 	.word	0x40240000
 8000fd8:	08004a64 	.word	0x08004a64
 8000fdc:	08004a70 	.word	0x08004a70

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	@ 0x38
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fb34 	bl	8001652 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f8ab 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f7ff fd0f 	bl	8000a10 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000ff2:	f7ff fd93 	bl	8000b1c <MX_I2C3_Init>
  MX_TIM2_Init();
 8000ff6:	f000 fa35 	bl	8001464 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ffa:	f000 f9df 	bl	80013bc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8000ffe:	f7ff fcd3 	bl	80009a8 <LCD_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001002:	483e      	ldr	r0, [pc, #248]	@ (80010fc <main+0x11c>)
 8001004:	f002 fc94 	bl	8003930 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8001008:	483d      	ldr	r0, [pc, #244]	@ (8001100 <main+0x120>)
 800100a:	f002 fc91 	bl	8003930 <HAL_TIM_Base_Start_IT>
//	LCD_Set_Cursor(1,0);
//	LCD_Send_String(gpsDiff);
//	LCD_Set_Cursor(1,9);
//	LCD_Send_String(gpsPPM);

	if(sys_counter == 1){
 800100e:	4b3d      	ldr	r3, [pc, #244]	@ (8001104 <main+0x124>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d1fb      	bne.n	800100e <main+0x2e>
		uint32_t tcxo = tcxo_clock / 100;
 8001016:	4b3c      	ldr	r3, [pc, #240]	@ (8001108 <main+0x128>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a3c      	ldr	r2, [pc, #240]	@ (800110c <main+0x12c>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	095b      	lsrs	r3, r3, #5
 8001022:	637b      	str	r3, [r7, #52]	@ 0x34
		sys_diff = (int32_t)(system_clock - tcxo);
 8001024:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <main+0x130>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	461a      	mov	r2, r3
 800102e:	4b39      	ldr	r3, [pc, #228]	@ (8001114 <main+0x134>)
 8001030:	601a      	str	r2, [r3, #0]
//		SYS_PPM = (float)((int64_t)sys_diff * 1000000LL) / (float)tcxo;
		SYS_PPM = ((float)sys_diff / (float)tcxo) * 1000000.0f;
 8001032:	4b38      	ldr	r3, [pc, #224]	@ (8001114 <main+0x134>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	ee07 3a90 	vmov	s15, r3
 800103a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800103e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800104c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001118 <main+0x138>
 8001050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001054:	4b31      	ldr	r3, [pc, #196]	@ (800111c <main+0x13c>)
 8001056:	edc3 7a00 	vstr	s15, [r3]
		char accTime[10];
//		char tcxoPPM[15];
//		char sysPPM[15];
		// Format the signed PPM value with snprintf
//		snprintf(systemClock, sizeof(systemClock), "S=%lu", system_clock);
		snprintf(tcxoClock, sizeof(tcxoClock), "T=%lu", (tcxo/1000));
 800105a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800105c:	4a30      	ldr	r2, [pc, #192]	@ (8001120 <main+0x140>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	099b      	lsrs	r3, r3, #6
 8001064:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8001068:	4a2e      	ldr	r2, [pc, #184]	@ (8001124 <main+0x144>)
 800106a:	210a      	movs	r1, #10
 800106c:	f003 f83a 	bl	80040e4 <sniprintf>
		snprintf(GPSClock, sizeof(GPSClock), "G=%u", pps_counter);
 8001070:	4b2d      	ldr	r3, [pc, #180]	@ (8001128 <main+0x148>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	f107 001c 	add.w	r0, r7, #28
 8001078:	4a2c      	ldr	r2, [pc, #176]	@ (800112c <main+0x14c>)
 800107a:	210a      	movs	r1, #10
 800107c:	f003 f832 	bl	80040e4 <sniprintf>
		snprintf(sysDiff, sizeof(sysDiff), "D=%+d", (int)sys_diff);
 8001080:	4b24      	ldr	r3, [pc, #144]	@ (8001114 <main+0x134>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f107 0010 	add.w	r0, r7, #16
 8001088:	4a29      	ldr	r2, [pc, #164]	@ (8001130 <main+0x150>)
 800108a:	210a      	movs	r1, #10
 800108c:	f003 f82a 	bl	80040e4 <sniprintf>
		snprintf(accTime, sizeof(accTime), "A=%+d", (int)accumulated_time);
 8001090:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <main+0x154>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	1d38      	adds	r0, r7, #4
 8001096:	4a28      	ldr	r2, [pc, #160]	@ (8001138 <main+0x158>)
 8001098:	210a      	movs	r1, #10
 800109a:	f003 f823 	bl	80040e4 <sniprintf>
//		snprintf(tcxoPPM, sizeof(tcxoPPM), "P=%+d", (int)TCXO_PPM); // %+d includes the sign
//		snprintf(sysPPM, sizeof(sysPPM), "P=%+d", (int)SYS_PPM);
		// Send the formatted string to the LCD
//		LCD_Set_Cursor(0,0);
//		LCD_Send_String(systemClock);
		LCD_Set_Cursor(0,0);
 800109e:	2100      	movs	r1, #0
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fbeb 	bl	800087c <LCD_Set_Cursor>
		LCD_Send_String("                ");
 80010a6:	4825      	ldr	r0, [pc, #148]	@ (800113c <main+0x15c>)
 80010a8:	f7ff fc68 	bl	800097c <LCD_Send_String>
		LCD_Set_Cursor(0,0);
 80010ac:	2100      	movs	r1, #0
 80010ae:	2000      	movs	r0, #0
 80010b0:	f7ff fbe4 	bl	800087c <LCD_Set_Cursor>
		LCD_Send_String(tcxoClock);
 80010b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fc5f 	bl	800097c <LCD_Send_String>
		LCD_Set_Cursor(0,6);
 80010be:	2106      	movs	r1, #6
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fbdb 	bl	800087c <LCD_Set_Cursor>
//		LCD_Send_String(sysDiff);
		LCD_Send_String(accTime);
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fc57 	bl	800097c <LCD_Send_String>
		LCD_Set_Cursor(0,12);
 80010ce:	210c      	movs	r1, #12
 80010d0:	2000      	movs	r0, #0
 80010d2:	f7ff fbd3 	bl	800087c <LCD_Set_Cursor>
		LCD_Send_String(GPSClock);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fc4e 	bl	800097c <LCD_Send_String>

		print_PPM(TCXO_PPM, SYS_PPM);
 80010e0:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <main+0x160>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <main+0x13c>)
 80010e8:	ed93 7a00 	vldr	s14, [r3]
 80010ec:	eef0 0a47 	vmov.f32	s1, s14
 80010f0:	eeb0 0a67 	vmov.f32	s0, s15
 80010f4:	f7ff fef2 	bl	8000edc <print_PPM>
	if(sys_counter == 1){
 80010f8:	e789      	b.n	800100e <main+0x2e>
 80010fa:	bf00      	nop
 80010fc:	20000150 	.word	0x20000150
 8001100:	20000104 	.word	0x20000104
 8001104:	200000fb 	.word	0x200000fb
 8001108:	200000d0 	.word	0x200000d0
 800110c:	51eb851f 	.word	0x51eb851f
 8001110:	200000cc 	.word	0x200000cc
 8001114:	200000ec 	.word	0x200000ec
 8001118:	49742400 	.word	0x49742400
 800111c:	200000e8 	.word	0x200000e8
 8001120:	10624dd3 	.word	0x10624dd3
 8001124:	08004a84 	.word	0x08004a84
 8001128:	200000fc 	.word	0x200000fc
 800112c:	08004a8c 	.word	0x08004a8c
 8001130:	08004a94 	.word	0x08004a94
 8001134:	200000f0 	.word	0x200000f0
 8001138:	08004a9c 	.word	0x08004a9c
 800113c:	08004a70 	.word	0x08004a70
 8001140:	200000e4 	.word	0x200000e4

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b096      	sub	sp, #88	@ 0x58
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2244      	movs	r2, #68	@ 0x44
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f002 fffa 	bl	800414c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	463b      	mov	r3, r7
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001166:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800116a:	f001 fa3b 	bl	80025e4 <HAL_PWREx_ControlVoltageScaling>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001174:	f000 f848 	bl	8001208 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001178:	f001 fa16 	bl	80025a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800117c:	4b21      	ldr	r3, [pc, #132]	@ (8001204 <SystemClock_Config+0xc0>)
 800117e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001182:	4a20      	ldr	r2, [pc, #128]	@ (8001204 <SystemClock_Config+0xc0>)
 8001184:	f023 0318 	bic.w	r3, r3, #24
 8001188:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800118c:	2314      	movs	r3, #20
 800118e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800119c:	2360      	movs	r3, #96	@ 0x60
 800119e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a0:	2302      	movs	r3, #2
 80011a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011a4:	2301      	movs	r3, #1
 80011a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011ac:	2310      	movs	r3, #16
 80011ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011b0:	2307      	movs	r3, #7
 80011b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 fa65 	bl	8002690 <HAL_RCC_OscConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011cc:	f000 f81c 	bl	8001208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	230f      	movs	r3, #15
 80011d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d4:	2303      	movs	r3, #3
 80011d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	2101      	movs	r1, #1
 80011e8:	4618      	mov	r0, r3
 80011ea:	f001 fe65 	bl	8002eb8 <HAL_RCC_ClockConfig>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011f4:	f000 f808 	bl	8001208 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011f8:	f002 fa40 	bl	800367c <HAL_RCCEx_EnableMSIPLLMode>
}
 80011fc:	bf00      	nop
 80011fe:	3758      	adds	r7, #88	@ 0x58
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40021000 	.word	0x40021000

08001208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800120c:	b672      	cpsid	i
}
 800120e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <Error_Handler+0x8>

08001214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <HAL_MspInit+0x44>)
 800121c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121e:	4a0e      	ldr	r2, [pc, #56]	@ (8001258 <HAL_MspInit+0x44>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6613      	str	r3, [r2, #96]	@ 0x60
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <HAL_MspInit+0x44>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <HAL_MspInit+0x44>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001236:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <HAL_MspInit+0x44>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123c:	6593      	str	r3, [r2, #88]	@ 0x58
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_MspInit+0x44>)
 8001240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <NMI_Handler+0x4>

08001264 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <MemManage_Handler+0x4>

08001274 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <UsageFault_Handler+0x4>

08001284 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b2:	f000 fa23 	bl	80016fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}

080012ba <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PPS_Pin);
 80012be:	2002      	movs	r0, #2
 80012c0:	f000 fcf4 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012cc:	4802      	ldr	r0, [pc, #8]	@ (80012d8 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80012ce:	f002 fb83 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000104 	.word	0x20000104

080012dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80012e2:	f002 fb79 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000104 	.word	0x20000104

080012f0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f4:	4802      	ldr	r0, [pc, #8]	@ (8001300 <TIM1_TRG_COM_IRQHandler+0x10>)
 80012f6:	f002 fb6f 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000104 	.word	0x20000104

08001304 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001308:	4802      	ldr	r0, [pc, #8]	@ (8001314 <TIM1_CC_IRQHandler+0x10>)
 800130a:	f002 fb65 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000104 	.word	0x20000104

08001318 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800131c:	4802      	ldr	r0, [pc, #8]	@ (8001328 <TIM2_IRQHandler+0x10>)
 800131e:	f002 fb5b 	bl	80039d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000150 	.word	0x20000150

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	@ (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	@ (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	@ (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	@ (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f002 fefe 	bl	800415c <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	@ (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20010000 	.word	0x20010000
 800138c:	00000400 	.word	0x00000400
 8001390:	20000100 	.word	0x20000100
 8001394:	200002e8 	.word	0x200002e8

08001398 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <SystemInit+0x20>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013a2:	4a05      	ldr	r2, [pc, #20]	@ (80013b8 <SystemInit+0x20>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <MX_TIM1_Init+0xa0>)
 80013dc:	4a20      	ldr	r2, [pc, #128]	@ (8001460 <MX_TIM1_Init+0xa4>)
 80013de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32-1;
 80013e0:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <MX_TIM1_Init+0xa0>)
 80013e2:	221f      	movs	r2, #31
 80013e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <MX_TIM1_Init+0xa0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <MX_TIM1_Init+0xa0>)
 80013ee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <MX_TIM1_Init+0xa0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <MX_TIM1_Init+0xa0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <MX_TIM1_Init+0xa0>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001406:	4815      	ldr	r0, [pc, #84]	@ (800145c <MX_TIM1_Init+0xa0>)
 8001408:	f002 fa3a 	bl	8003880 <HAL_TIM_Base_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001412:	f7ff fef9 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001416:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800141a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4619      	mov	r1, r3
 8001422:	480e      	ldr	r0, [pc, #56]	@ (800145c <MX_TIM1_Init+0xa0>)
 8001424:	f002 fbdf 	bl	8003be6 <HAL_TIM_ConfigClockSource>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800142e:	f7ff feeb 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	@ (800145c <MX_TIM1_Init+0xa0>)
 8001444:	f002 fdca 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800144e:	f7ff fedb 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000104 	.word	0x20000104
 8001460:	40012c00 	.word	0x40012c00

08001464 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <MX_TIM2_Init+0xa0>)
 8001484:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001488:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800148a:	4b1e      	ldr	r3, [pc, #120]	@ (8001504 <MX_TIM2_Init+0xa0>)
 800148c:	2200      	movs	r2, #0
 800148e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b1c      	ldr	r3, [pc, #112]	@ (8001504 <MX_TIM2_Init+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001496:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <MX_TIM2_Init+0xa0>)
 8001498:	2263      	movs	r2, #99	@ 0x63
 800149a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <MX_TIM2_Init+0xa0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a2:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <MX_TIM2_Init+0xa0>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a8:	4816      	ldr	r0, [pc, #88]	@ (8001504 <MX_TIM2_Init+0xa0>)
 80014aa:	f002 f9e9 	bl	8003880 <HAL_TIM_Base_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014b4:	f7ff fea8 	bl	8001208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80014b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014bc:	613b      	str	r3, [r7, #16]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  sClockSourceConfig.ClockFilter = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	4619      	mov	r1, r3
 80014d0:	480c      	ldr	r0, [pc, #48]	@ (8001504 <MX_TIM2_Init+0xa0>)
 80014d2:	f002 fb88 	bl	8003be6 <HAL_TIM_ConfigClockSource>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80014dc:	f7ff fe94 	bl	8001208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	@ (8001504 <MX_TIM2_Init+0xa0>)
 80014ee:	f002 fd75 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80014f8:	f7ff fe86 	bl	8001208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000150 	.word	0x20000150

08001508 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	@ 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a34      	ldr	r2, [pc, #208]	@ (80015f8 <HAL_TIM_Base_MspInit+0xf0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d12c      	bne.n	8001584 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800152a:	4b34      	ldr	r3, [pc, #208]	@ (80015fc <HAL_TIM_Base_MspInit+0xf4>)
 800152c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800152e:	4a33      	ldr	r2, [pc, #204]	@ (80015fc <HAL_TIM_Base_MspInit+0xf4>)
 8001530:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001534:	6613      	str	r3, [r2, #96]	@ 0x60
 8001536:	4b31      	ldr	r3, [pc, #196]	@ (80015fc <HAL_TIM_Base_MspInit+0xf4>)
 8001538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800153e:	613b      	str	r3, [r7, #16]
 8001540:	693b      	ldr	r3, [r7, #16]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 1, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2101      	movs	r1, #1
 8001546:	2018      	movs	r0, #24
 8001548:	f000 f9f7 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800154c:	2018      	movs	r0, #24
 800154e:	f000 fa10 	bl	8001972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2101      	movs	r1, #1
 8001556:	2019      	movs	r0, #25
 8001558:	f000 f9ef 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800155c:	2019      	movs	r0, #25
 800155e:	f000 fa08 	bl	8001972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 1, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2101      	movs	r1, #1
 8001566:	201a      	movs	r0, #26
 8001568:	f000 f9e7 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800156c:	201a      	movs	r0, #26
 800156e:	f000 fa00 	bl	8001972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2101      	movs	r1, #1
 8001576:	201b      	movs	r0, #27
 8001578:	f000 f9df 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800157c:	201b      	movs	r0, #27
 800157e:	f000 f9f8 	bl	8001972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001582:	e035      	b.n	80015f0 <HAL_TIM_Base_MspInit+0xe8>
  else if(tim_baseHandle->Instance==TIM2)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800158c:	d130      	bne.n	80015f0 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800158e:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <HAL_TIM_Base_MspInit+0xf4>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001592:	4a1a      	ldr	r2, [pc, #104]	@ (80015fc <HAL_TIM_Base_MspInit+0xf4>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6593      	str	r3, [r2, #88]	@ 0x58
 800159a:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <HAL_TIM_Base_MspInit+0xf4>)
 800159c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_TIM_Base_MspInit+0xf4>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	4a14      	ldr	r2, [pc, #80]	@ (80015fc <HAL_TIM_Base_MspInit+0xf4>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b2:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_TIM_Base_MspInit+0xf4>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015be:	2320      	movs	r3, #32
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015dc:	f000 f9e4 	bl	80019a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	201c      	movs	r0, #28
 80015e6:	f000 f9a8 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ea:	201c      	movs	r0, #28
 80015ec:	f000 f9c1 	bl	8001972 <HAL_NVIC_EnableIRQ>
}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	@ 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40012c00 	.word	0x40012c00
 80015fc:	40021000 	.word	0x40021000

08001600 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001638 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001604:	f7ff fec8 	bl	8001398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <LoopForever+0x6>)
  ldr r1, =_edata
 800160a:	490d      	ldr	r1, [pc, #52]	@ (8001640 <LoopForever+0xa>)
  ldr r2, =_sidata
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LoopForever+0xe>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001620:	4c0a      	ldr	r4, [pc, #40]	@ (800164c <LoopForever+0x16>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162e:	f002 fd9b 	bl	8004168 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001632:	f7ff fcd5 	bl	8000fe0 <main>

08001636 <LoopForever>:

LoopForever:
    b LoopForever
 8001636:	e7fe      	b.n	8001636 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001638:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001644:	08004b28 	.word	0x08004b28
  ldr r2, =_sbss
 8001648:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800164c:	200002e8 	.word	0x200002e8

08001650 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC1_IRQHandler>

08001652 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 f961 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001662:	2000      	movs	r0, #0
 8001664:	f000 f80e 	bl	8001684 <HAL_InitTick>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d002      	beq.n	8001674 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	e001      	b.n	8001678 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001674:	f7ff fdce 	bl	8001214 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001678:	79fb      	ldrb	r3, [r7, #7]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001690:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <HAL_InitTick+0x6c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d023      	beq.n	80016e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001698:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <HAL_InitTick+0x70>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b14      	ldr	r3, [pc, #80]	@ (80016f0 <HAL_InitTick+0x6c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f96d 	bl	800198e <HAL_SYSTICK_Config>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d10f      	bne.n	80016da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b0f      	cmp	r3, #15
 80016be:	d809      	bhi.n	80016d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c0:	2200      	movs	r2, #0
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f000 f937 	bl	800193a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016cc:	4a0a      	ldr	r2, [pc, #40]	@ (80016f8 <HAL_InitTick+0x74>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e007      	b.n	80016e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e004      	b.n	80016e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e001      	b.n	80016e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000004 	.word	0x20000004

080016fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_IncTick+0x20>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	461a      	mov	r2, r3
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_IncTick+0x24>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4413      	add	r3, r2
 800170c:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <HAL_IncTick+0x24>)
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000008 	.word	0x20000008
 8001720:	2000019c 	.word	0x2000019c

08001724 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return uwTick;
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <HAL_GetTick+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	2000019c 	.word	0x2000019c

0800173c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001744:	f7ff ffee 	bl	8001724 <HAL_GetTick>
 8001748:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001754:	d005      	beq.n	8001762 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001756:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <HAL_Delay+0x44>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	461a      	mov	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4413      	add	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001762:	bf00      	nop
 8001764:	f7ff ffde 	bl	8001724 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	429a      	cmp	r2, r3
 8001772:	d8f7      	bhi.n	8001764 <HAL_Delay+0x28>
  {
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000008 	.word	0x20000008

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	@ (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	@ (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	@ (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	@ (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	@ 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	f7ff ff8e 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	@ (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff29 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff3e 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff8e 	bl	8001878 <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5d 	bl	8001824 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff31 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	e148      	b.n	8001c4a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 813a 	beq.w	8001c44 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d005      	beq.n	80019e8 <HAL_GPIO_Init+0x40>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d130      	bne.n	8001a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a1e:	2201      	movs	r2, #1
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 0201 	and.w	r2, r3, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d017      	beq.n	8001a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	689a      	ldr	r2, [r3, #8]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d123      	bne.n	8001ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	08da      	lsrs	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3208      	adds	r2, #8
 8001a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	6939      	ldr	r1, [r7, #16]
 8001ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0203 	and.w	r2, r3, #3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8094 	beq.w	8001c44 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1c:	4b52      	ldr	r3, [pc, #328]	@ (8001c68 <HAL_GPIO_Init+0x2c0>)
 8001b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b20:	4a51      	ldr	r2, [pc, #324]	@ (8001c68 <HAL_GPIO_Init+0x2c0>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b28:	4b4f      	ldr	r3, [pc, #316]	@ (8001c68 <HAL_GPIO_Init+0x2c0>)
 8001b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b34:	4a4d      	ldr	r2, [pc, #308]	@ (8001c6c <HAL_GPIO_Init+0x2c4>)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b5e:	d00d      	beq.n	8001b7c <HAL_GPIO_Init+0x1d4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a43      	ldr	r2, [pc, #268]	@ (8001c70 <HAL_GPIO_Init+0x2c8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d007      	beq.n	8001b78 <HAL_GPIO_Init+0x1d0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a42      	ldr	r2, [pc, #264]	@ (8001c74 <HAL_GPIO_Init+0x2cc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <HAL_GPIO_Init+0x1cc>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e004      	b.n	8001b7e <HAL_GPIO_Init+0x1d6>
 8001b74:	2307      	movs	r3, #7
 8001b76:	e002      	b.n	8001b7e <HAL_GPIO_Init+0x1d6>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_GPIO_Init+0x1d6>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	f002 0203 	and.w	r2, r2, #3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4093      	lsls	r3, r2
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b8e:	4937      	ldr	r1, [pc, #220]	@ (8001c6c <HAL_GPIO_Init+0x2c4>)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b9c:	4b36      	ldr	r3, [pc, #216]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bc0:	4a2d      	ldr	r2, [pc, #180]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bea:	4a23      	ldr	r2, [pc, #140]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bf0:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c14:	4a18      	ldr	r2, [pc, #96]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f47f aeaf 	bne.w	80019b8 <HAL_GPIO_Init+0x10>
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	48000400 	.word	0x48000400
 8001c74:	48000800 	.word	0x48000800
 8001c78:	40010400 	.word	0x40010400

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cb6:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc2:	4a05      	ldr	r2, [pc, #20]	@ (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f864 	bl	8000d98 <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40010400 	.word	0x40010400

08001cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e08d      	b.n	8001e0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7fe ff4a 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2224      	movs	r2, #36	@ 0x24
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0201 	bic.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d107      	bne.n	8001d56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	e006      	b.n	8001d64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d108      	bne.n	8001d7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	e007      	b.n	8001d8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001da0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001db0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	69d9      	ldr	r1, [r3, #28]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a1a      	ldr	r2, [r3, #32]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0201 	orr.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2220      	movs	r2, #32
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	460b      	mov	r3, r1
 8001e22:	817b      	strh	r3, [r7, #10]
 8001e24:	4613      	mov	r3, r2
 8001e26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	f040 80fd 	bne.w	8002030 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d101      	bne.n	8001e44 <HAL_I2C_Master_Transmit+0x30>
 8001e40:	2302      	movs	r3, #2
 8001e42:	e0f6      	b.n	8002032 <HAL_I2C_Master_Transmit+0x21e>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e4c:	f7ff fc6a 	bl	8001724 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2319      	movs	r3, #25
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f914 	bl	800208c <I2C_WaitOnFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0e1      	b.n	8002032 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2221      	movs	r2, #33	@ 0x21
 8001e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2210      	movs	r2, #16
 8001e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2200      	movs	r2, #0
 8001e82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	893a      	ldrh	r2, [r7, #8]
 8001e8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	2bff      	cmp	r3, #255	@ 0xff
 8001e9e:	d906      	bls.n	8001eae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	22ff      	movs	r2, #255	@ 0xff
 8001ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001ea6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e007      	b.n	8001ebe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001eb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ebc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d024      	beq.n	8001f10 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	3301      	adds	r3, #1
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	8979      	ldrh	r1, [r7, #10]
 8001f02:	4b4e      	ldr	r3, [pc, #312]	@ (800203c <HAL_I2C_Master_Transmit+0x228>)
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fa83 	bl	8002414 <I2C_TransferConfig>
 8001f0e:	e066      	b.n	8001fde <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	8979      	ldrh	r1, [r7, #10]
 8001f18:	4b48      	ldr	r3, [pc, #288]	@ (800203c <HAL_I2C_Master_Transmit+0x228>)
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 fa78 	bl	8002414 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f24:	e05b      	b.n	8001fde <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	6a39      	ldr	r1, [r7, #32]
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 f907 	bl	800213e <I2C_WaitOnTXISFlagUntilTimeout>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07b      	b.n	8002032 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	781a      	ldrb	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d034      	beq.n	8001fde <HAL_I2C_Master_Transmit+0x1ca>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d130      	bne.n	8001fde <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	2200      	movs	r2, #0
 8001f84:	2180      	movs	r1, #128	@ 0x80
 8001f86:	68f8      	ldr	r0, [r7, #12]
 8001f88:	f000 f880 	bl	800208c <I2C_WaitOnFlagUntilTimeout>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e04d      	b.n	8002032 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	2bff      	cmp	r3, #255	@ 0xff
 8001f9e:	d90e      	bls.n	8001fbe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	22ff      	movs	r2, #255	@ 0xff
 8001fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	8979      	ldrh	r1, [r7, #10]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fb6:	68f8      	ldr	r0, [r7, #12]
 8001fb8:	f000 fa2c 	bl	8002414 <I2C_TransferConfig>
 8001fbc:	e00f      	b.n	8001fde <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	8979      	ldrh	r1, [r7, #10]
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 fa1b 	bl	8002414 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d19e      	bne.n	8001f26 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	6a39      	ldr	r1, [r7, #32]
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f8ed 	bl	80021cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e01a      	b.n	8002032 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2220      	movs	r2, #32
 8002002:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6859      	ldr	r1, [r3, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	4b0c      	ldr	r3, [pc, #48]	@ (8002040 <HAL_I2C_Master_Transmit+0x22c>)
 8002010:	400b      	ands	r3, r1
 8002012:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	80002000 	.word	0x80002000
 8002040:	fe00e800 	.word	0xfe00e800

08002044 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b02      	cmp	r3, #2
 8002058:	d103      	bne.n	8002062 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2200      	movs	r2, #0
 8002060:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d007      	beq.n	8002080 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0201 	orr.w	r2, r2, #1
 800207e:	619a      	str	r2, [r3, #24]
  }
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800209c:	e03b      	b.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	6839      	ldr	r1, [r7, #0]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f8d6 	bl	8002254 <I2C_IsErrorOccurred>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e041      	b.n	8002136 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d02d      	beq.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ba:	f7ff fb33 	bl	8001724 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d302      	bcc.n	80020d0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d122      	bne.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699a      	ldr	r2, [r3, #24]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4013      	ands	r3, r2
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	429a      	cmp	r2, r3
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d113      	bne.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	f043 0220 	orr.w	r2, r3, #32
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699a      	ldr	r2, [r3, #24]
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4013      	ands	r3, r2
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	429a      	cmp	r2, r3
 8002132:	d0b4      	beq.n	800209e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800214a:	e033      	b.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68b9      	ldr	r1, [r7, #8]
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f87f 	bl	8002254 <I2C_IsErrorOccurred>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e031      	b.n	80021c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002166:	d025      	beq.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002168:	f7ff fadc 	bl	8001724 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	429a      	cmp	r2, r3
 8002176:	d302      	bcc.n	800217e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d11a      	bne.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b02      	cmp	r3, #2
 800218a:	d013      	beq.n	80021b4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002190:	f043 0220 	orr.w	r2, r3, #32
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e007      	b.n	80021c4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d1c4      	bne.n	800214c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021d8:	e02f      	b.n	800223a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 f838 	bl	8002254 <I2C_IsErrorOccurred>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e02d      	b.n	800224a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ee:	f7ff fa99 	bl	8001724 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d302      	bcc.n	8002204 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d11a      	bne.n	800223a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b20      	cmp	r3, #32
 8002210:	d013      	beq.n	800223a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	f043 0220 	orr.w	r2, r3, #32
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2220      	movs	r2, #32
 8002222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e007      	b.n	800224a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b20      	cmp	r3, #32
 8002246:	d1c8      	bne.n	80021da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	f003 0310 	and.w	r3, r3, #16
 800227c:	2b00      	cmp	r3, #0
 800227e:	d068      	beq.n	8002352 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2210      	movs	r2, #16
 8002286:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002288:	e049      	b.n	800231e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002290:	d045      	beq.n	800231e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002292:	f7ff fa47 	bl	8001724 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d302      	bcc.n	80022a8 <I2C_IsErrorOccurred+0x54>
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d13a      	bne.n	800231e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022ca:	d121      	bne.n	8002310 <I2C_IsErrorOccurred+0xbc>
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80022d2:	d01d      	beq.n	8002310 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d01a      	beq.n	8002310 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022ea:	f7ff fa1b 	bl	8001724 <HAL_GetTick>
 80022ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022f0:	e00e      	b.n	8002310 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022f2:	f7ff fa17 	bl	8001724 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b19      	cmp	r3, #25
 80022fe:	d907      	bls.n	8002310 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	f043 0320 	orr.w	r3, r3, #32
 8002306:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800230e:	e006      	b.n	800231e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b20      	cmp	r3, #32
 800231c:	d1e9      	bne.n	80022f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0320 	and.w	r3, r3, #32
 8002328:	2b20      	cmp	r3, #32
 800232a:	d003      	beq.n	8002334 <I2C_IsErrorOccurred+0xe0>
 800232c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0aa      	beq.n	800228a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2220      	movs	r2, #32
 8002342:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	f043 0304 	orr.w	r3, r3, #4
 800234a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00b      	beq.n	800237c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002374:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002396:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00b      	beq.n	80023c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80023c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01c      	beq.n	8002402 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f7ff fe3b 	bl	8002044 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002410 <I2C_IsErrorOccurred+0x1bc>)
 80023da:	400b      	ands	r3, r1
 80023dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	431a      	orrs	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002406:	4618      	mov	r0, r3
 8002408:	3728      	adds	r7, #40	@ 0x28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	fe00e800 	.word	0xfe00e800

08002414 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	817b      	strh	r3, [r7, #10]
 8002422:	4613      	mov	r3, r2
 8002424:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002426:	897b      	ldrh	r3, [r7, #10]
 8002428:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800242c:	7a7b      	ldrb	r3, [r7, #9]
 800242e:	041b      	lsls	r3, r3, #16
 8002430:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002434:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	4313      	orrs	r3, r2
 800243e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002442:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	0d5b      	lsrs	r3, r3, #21
 800244e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002452:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <I2C_TransferConfig+0x60>)
 8002454:	430b      	orrs	r3, r1
 8002456:	43db      	mvns	r3, r3
 8002458:	ea02 0103 	and.w	r1, r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	430a      	orrs	r2, r1
 8002464:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002466:	bf00      	nop
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	03ff63ff 	.word	0x03ff63ff

08002478 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b20      	cmp	r3, #32
 800248c:	d138      	bne.n	8002500 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002494:	2b01      	cmp	r3, #1
 8002496:	d101      	bne.n	800249c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002498:	2302      	movs	r3, #2
 800249a:	e032      	b.n	8002502 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2224      	movs	r2, #36	@ 0x24
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6819      	ldr	r1, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	e000      	b.n	8002502 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002500:	2302      	movs	r3, #2
  }
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b20      	cmp	r3, #32
 8002522:	d139      	bne.n	8002598 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800252e:	2302      	movs	r3, #2
 8002530:	e033      	b.n	800259a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2224      	movs	r2, #36	@ 0x24
 800253e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0201 	bic.w	r2, r2, #1
 8002550:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002560:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	021b      	lsls	r3, r3, #8
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f042 0201 	orr.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e000      	b.n	800259a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002598:	2302      	movs	r3, #2
  }
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
	...

080025a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ac:	4b05      	ldr	r3, [pc, #20]	@ (80025c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a04      	ldr	r2, [pc, #16]	@ (80025c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40007000 	.word	0x40007000

080025c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025cc:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40007000 	.word	0x40007000

080025e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025f2:	d130      	bne.n	8002656 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025f4:	4b23      	ldr	r3, [pc, #140]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002600:	d038      	beq.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002602:	4b20      	ldr	r3, [pc, #128]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800260a:	4a1e      	ldr	r2, [pc, #120]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002610:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002612:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2232      	movs	r2, #50	@ 0x32
 8002618:	fb02 f303 	mul.w	r3, r2, r3
 800261c:	4a1b      	ldr	r2, [pc, #108]	@ (800268c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0c9b      	lsrs	r3, r3, #18
 8002624:	3301      	adds	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002628:	e002      	b.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3b01      	subs	r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002630:	4b14      	ldr	r3, [pc, #80]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800263c:	d102      	bne.n	8002644 <HAL_PWREx_ControlVoltageScaling+0x60>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1f2      	bne.n	800262a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002644:	4b0f      	ldr	r3, [pc, #60]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002650:	d110      	bne.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e00f      	b.n	8002676 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002656:	4b0b      	ldr	r3, [pc, #44]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800265e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002662:	d007      	beq.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002664:	4b07      	ldr	r3, [pc, #28]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800266c:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002672:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40007000 	.word	0x40007000
 8002688:	20000000 	.word	0x20000000
 800268c:	431bde83 	.word	0x431bde83

08002690 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d102      	bne.n	80026a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	f000 bc02 	b.w	8002ea8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a4:	4b96      	ldr	r3, [pc, #600]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ae:	4b94      	ldr	r3, [pc, #592]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 80e4 	beq.w	800288e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <HAL_RCC_OscConfig+0x4c>
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	f040 808b 	bne.w	80027ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	f040 8087 	bne.w	80027ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026dc:	4b88      	ldr	r3, [pc, #544]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_OscConfig+0x64>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e3d9      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	4b81      	ldr	r3, [pc, #516]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b00      	cmp	r3, #0
 8002702:	d004      	beq.n	800270e <HAL_RCC_OscConfig+0x7e>
 8002704:	4b7e      	ldr	r3, [pc, #504]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800270c:	e005      	b.n	800271a <HAL_RCC_OscConfig+0x8a>
 800270e:	4b7c      	ldr	r3, [pc, #496]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002710:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002714:	091b      	lsrs	r3, r3, #4
 8002716:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800271a:	4293      	cmp	r3, r2
 800271c:	d223      	bcs.n	8002766 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fd54 	bl	80031d0 <RCC_SetFlashLatencyFromMSIRange>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e3ba      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002732:	4b73      	ldr	r3, [pc, #460]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a72      	ldr	r2, [pc, #456]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002738:	f043 0308 	orr.w	r3, r3, #8
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	4b70      	ldr	r3, [pc, #448]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	496d      	ldr	r1, [pc, #436]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 800274c:	4313      	orrs	r3, r2
 800274e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002750:	4b6b      	ldr	r3, [pc, #428]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	4968      	ldr	r1, [pc, #416]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
 8002764:	e025      	b.n	80027b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002766:	4b66      	ldr	r3, [pc, #408]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a65      	ldr	r2, [pc, #404]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 800276c:	f043 0308 	orr.w	r3, r3, #8
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b63      	ldr	r3, [pc, #396]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	4960      	ldr	r1, [pc, #384]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002780:	4313      	orrs	r3, r2
 8002782:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002784:	4b5e      	ldr	r3, [pc, #376]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69db      	ldr	r3, [r3, #28]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	495b      	ldr	r1, [pc, #364]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d109      	bne.n	80027b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fd14 	bl	80031d0 <RCC_SetFlashLatencyFromMSIRange>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e37a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027b2:	f000 fc81 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b51      	ldr	r3, [pc, #324]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	4950      	ldr	r1, [pc, #320]	@ (8002904 <HAL_RCC_OscConfig+0x274>)
 80027c4:	5ccb      	ldrb	r3, [r1, r3]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	fa22 f303 	lsr.w	r3, r2, r3
 80027ce:	4a4e      	ldr	r2, [pc, #312]	@ (8002908 <HAL_RCC_OscConfig+0x278>)
 80027d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027d2:	4b4e      	ldr	r3, [pc, #312]	@ (800290c <HAL_RCC_OscConfig+0x27c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ff54 	bl	8001684 <HAL_InitTick>
 80027dc:	4603      	mov	r3, r0
 80027de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d052      	beq.n	800288c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	e35e      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d032      	beq.n	8002858 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027f2:	4b43      	ldr	r3, [pc, #268]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a42      	ldr	r2, [pc, #264]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027fe:	f7fe ff91 	bl	8001724 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002806:	f7fe ff8d 	bl	8001724 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e347      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002818:	4b39      	ldr	r3, [pc, #228]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f0      	beq.n	8002806 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002824:	4b36      	ldr	r3, [pc, #216]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a35      	ldr	r2, [pc, #212]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 800282a:	f043 0308 	orr.w	r3, r3, #8
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b33      	ldr	r3, [pc, #204]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	4930      	ldr	r1, [pc, #192]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002842:	4b2f      	ldr	r3, [pc, #188]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	492b      	ldr	r1, [pc, #172]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
 8002856:	e01a      	b.n	800288e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002858:	4b29      	ldr	r3, [pc, #164]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a28      	ldr	r2, [pc, #160]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002864:	f7fe ff5e 	bl	8001724 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800286c:	f7fe ff5a 	bl	8001724 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e314      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800287e:	4b20      	ldr	r3, [pc, #128]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x1dc>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d073      	beq.n	8002982 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	2b08      	cmp	r3, #8
 800289e:	d005      	beq.n	80028ac <HAL_RCC_OscConfig+0x21c>
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d10e      	bne.n	80028c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d10b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	4b14      	ldr	r3, [pc, #80]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d063      	beq.n	8002980 <HAL_RCC_OscConfig+0x2f0>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d15f      	bne.n	8002980 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e2f1      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028cc:	d106      	bne.n	80028dc <HAL_RCC_OscConfig+0x24c>
 80028ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e025      	b.n	8002928 <HAL_RCC_OscConfig+0x298>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028e4:	d114      	bne.n	8002910 <HAL_RCC_OscConfig+0x280>
 80028e6:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a05      	ldr	r2, [pc, #20]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b03      	ldr	r3, [pc, #12]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a02      	ldr	r2, [pc, #8]	@ (8002900 <HAL_RCC_OscConfig+0x270>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e013      	b.n	8002928 <HAL_RCC_OscConfig+0x298>
 8002900:	40021000 	.word	0x40021000
 8002904:	08004aa4 	.word	0x08004aa4
 8002908:	20000000 	.word	0x20000000
 800290c:	20000004 	.word	0x20000004
 8002910:	4ba0      	ldr	r3, [pc, #640]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a9f      	ldr	r2, [pc, #636]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b9d      	ldr	r3, [pc, #628]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a9c      	ldr	r2, [pc, #624]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002930:	f7fe fef8 	bl	8001724 <HAL_GetTick>
 8002934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002938:	f7fe fef4 	bl	8001724 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b64      	cmp	r3, #100	@ 0x64
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e2ae      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294a:	4b92      	ldr	r3, [pc, #584]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0f0      	beq.n	8002938 <HAL_RCC_OscConfig+0x2a8>
 8002956:	e014      	b.n	8002982 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fee4 	bl	8001724 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7fe fee0 	bl	8001724 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	@ 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e29a      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002972:	4b88      	ldr	r3, [pc, #544]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x2d0>
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d060      	beq.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b04      	cmp	r3, #4
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_OscConfig+0x310>
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b0c      	cmp	r3, #12
 8002998:	d119      	bne.n	80029ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2b02      	cmp	r3, #2
 800299e:	d116      	bne.n	80029ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a0:	4b7c      	ldr	r3, [pc, #496]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_OscConfig+0x328>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e277      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b8:	4b76      	ldr	r3, [pc, #472]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	061b      	lsls	r3, r3, #24
 80029c6:	4973      	ldr	r1, [pc, #460]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029cc:	e040      	b.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d023      	beq.n	8002a1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6e      	ldr	r2, [pc, #440]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e2:	f7fe fe9f 	bl	8001724 <HAL_GetTick>
 80029e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ea:	f7fe fe9b 	bl	8001724 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e255      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029fc:	4b65      	ldr	r3, [pc, #404]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a08:	4b62      	ldr	r3, [pc, #392]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	061b      	lsls	r3, r3, #24
 8002a16:	495f      	ldr	r1, [pc, #380]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
 8002a1c:	e018      	b.n	8002a50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a5c      	ldr	r2, [pc, #368]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fe7b 	bl	8001724 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a32:	f7fe fe77 	bl	8001724 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e231      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a44:	4b53      	ldr	r3, [pc, #332]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f0      	bne.n	8002a32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d03c      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01c      	beq.n	8002a9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a64:	4b4b      	ldr	r3, [pc, #300]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fe56 	bl	8001724 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fe52 	bl	8001724 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e20c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a8e:	4b41      	ldr	r3, [pc, #260]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ef      	beq.n	8002a7c <HAL_RCC_OscConfig+0x3ec>
 8002a9c:	e01b      	b.n	8002ad6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aa4:	4a3b      	ldr	r2, [pc, #236]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aae:	f7fe fe39 	bl	8001724 <HAL_GetTick>
 8002ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fe35 	bl	8001724 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e1ef      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ac8:	4b32      	ldr	r3, [pc, #200]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1ef      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 80a6 	beq.w	8002c30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10d      	bne.n	8002b10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af4:	4b27      	ldr	r3, [pc, #156]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af8:	4a26      	ldr	r2, [pc, #152]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002afa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002afe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b00:	4b24      	ldr	r3, [pc, #144]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b10:	4b21      	ldr	r3, [pc, #132]	@ (8002b98 <HAL_RCC_OscConfig+0x508>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d118      	bne.n	8002b4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <HAL_RCC_OscConfig+0x508>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1d      	ldr	r2, [pc, #116]	@ (8002b98 <HAL_RCC_OscConfig+0x508>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b28:	f7fe fdfc 	bl	8001724 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b30:	f7fe fdf8 	bl	8001724 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e1b2      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b42:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <HAL_RCC_OscConfig+0x508>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d108      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4d8>
 8002b56:	4b0f      	ldr	r3, [pc, #60]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b66:	e029      	b.n	8002bbc <HAL_RCC_OscConfig+0x52c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d115      	bne.n	8002b9c <HAL_RCC_OscConfig+0x50c>
 8002b70:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	4a07      	ldr	r2, [pc, #28]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b80:	4b04      	ldr	r3, [pc, #16]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b86:	4a03      	ldr	r2, [pc, #12]	@ (8002b94 <HAL_RCC_OscConfig+0x504>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b90:	e014      	b.n	8002bbc <HAL_RCC_OscConfig+0x52c>
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40007000 	.word	0x40007000
 8002b9c:	4b9a      	ldr	r3, [pc, #616]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ba2:	4a99      	ldr	r2, [pc, #612]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bac:	4b96      	ldr	r3, [pc, #600]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb2:	4a95      	ldr	r2, [pc, #596]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002bb4:	f023 0304 	bic.w	r3, r3, #4
 8002bb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d016      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fdae 	bl	8001724 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7fe fdaa 	bl	8001724 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e162      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be2:	4b89      	ldr	r3, [pc, #548]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be8:	f003 0302 	and.w	r3, r3, #2
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ed      	beq.n	8002bcc <HAL_RCC_OscConfig+0x53c>
 8002bf0:	e015      	b.n	8002c1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf2:	f7fe fd97 	bl	8001724 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf8:	e00a      	b.n	8002c10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fd93 	bl	8001724 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e14b      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c10:	4b7d      	ldr	r3, [pc, #500]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ed      	bne.n	8002bfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c24:	4b78      	ldr	r3, [pc, #480]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c28:	4a77      	ldr	r2, [pc, #476]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002c2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c2e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d03c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01c      	beq.n	8002c7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c44:	4b70      	ldr	r3, [pc, #448]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c4a:	4a6f      	ldr	r2, [pc, #444]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c54:	f7fe fd66 	bl	8001724 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c5c:	f7fe fd62 	bl	8001724 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e11c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c6e:	4b66      	ldr	r3, [pc, #408]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002c70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0ef      	beq.n	8002c5c <HAL_RCC_OscConfig+0x5cc>
 8002c7c:	e01b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c7e:	4b62      	ldr	r3, [pc, #392]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002c80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c84:	4a60      	ldr	r2, [pc, #384]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fd49 	bl	8001724 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c96:	f7fe fd45 	bl	8001724 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0ff      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ca8:	4b57      	ldr	r3, [pc, #348]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ef      	bne.n	8002c96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 80f3 	beq.w	8002ea6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	f040 80c9 	bne.w	8002e5c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cca:	4b4f      	ldr	r3, [pc, #316]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f003 0203 	and.w	r2, r3, #3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d12c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d123      	bne.n	8002d38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cfa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d11b      	bne.n	8002d38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d113      	bne.n	8002d38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1a:	085b      	lsrs	r3, r3, #1
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d109      	bne.n	8002d38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	085b      	lsrs	r3, r3, #1
 8002d30:	3b01      	subs	r3, #1
 8002d32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d06b      	beq.n	8002e10 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d062      	beq.n	8002e04 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d3e:	4b32      	ldr	r3, [pc, #200]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e0ac      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2d      	ldr	r2, [pc, #180]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002d54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d5a:	f7fe fce3 	bl	8001724 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d60:	e008      	b.n	8002d74 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d62:	f7fe fcdf 	bl	8001724 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e099      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d74:	4b24      	ldr	r3, [pc, #144]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f0      	bne.n	8002d62 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d80:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4b21      	ldr	r3, [pc, #132]	@ (8002e0c <HAL_RCC_OscConfig+0x77c>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d90:	3a01      	subs	r2, #1
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	4311      	orrs	r1, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d9a:	0212      	lsls	r2, r2, #8
 8002d9c:	4311      	orrs	r1, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002da2:	0852      	lsrs	r2, r2, #1
 8002da4:	3a01      	subs	r2, #1
 8002da6:	0552      	lsls	r2, r2, #21
 8002da8:	4311      	orrs	r1, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002dae:	0852      	lsrs	r2, r2, #1
 8002db0:	3a01      	subs	r2, #1
 8002db2:	0652      	lsls	r2, r2, #25
 8002db4:	4311      	orrs	r1, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002dba:	06d2      	lsls	r2, r2, #27
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	4912      	ldr	r1, [pc, #72]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dc4:	4b10      	ldr	r3, [pc, #64]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002dd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ddc:	f7fe fca2 	bl	8001724 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe fc9e 	bl	8001724 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e058      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df6:	4b04      	ldr	r3, [pc, #16]	@ (8002e08 <HAL_RCC_OscConfig+0x778>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e02:	e050      	b.n	8002ea6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e04f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e10:	4b27      	ldr	r3, [pc, #156]	@ (8002eb0 <HAL_RCC_OscConfig+0x820>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d144      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b24      	ldr	r3, [pc, #144]	@ (8002eb0 <HAL_RCC_OscConfig+0x820>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a23      	ldr	r2, [pc, #140]	@ (8002eb0 <HAL_RCC_OscConfig+0x820>)
 8002e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e28:	4b21      	ldr	r3, [pc, #132]	@ (8002eb0 <HAL_RCC_OscConfig+0x820>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a20      	ldr	r2, [pc, #128]	@ (8002eb0 <HAL_RCC_OscConfig+0x820>)
 8002e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e34:	f7fe fc76 	bl	8001724 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3a:	e008      	b.n	8002e4e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3c:	f7fe fc72 	bl	8001724 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d901      	bls.n	8002e4e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e02c      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	4b18      	ldr	r3, [pc, #96]	@ (8002eb0 <HAL_RCC_OscConfig+0x820>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d0f0      	beq.n	8002e3c <HAL_RCC_OscConfig+0x7ac>
 8002e5a:	e024      	b.n	8002ea6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d01f      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <HAL_RCC_OscConfig+0x820>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <HAL_RCC_OscConfig+0x820>)
 8002e68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6e:	f7fe fc59 	bl	8001724 <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe fc55 	bl	8001724 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e00f      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e88:	4b09      	ldr	r3, [pc, #36]	@ (8002eb0 <HAL_RCC_OscConfig+0x820>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e94:	4b06      	ldr	r3, [pc, #24]	@ (8002eb0 <HAL_RCC_OscConfig+0x820>)
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	4905      	ldr	r1, [pc, #20]	@ (8002eb0 <HAL_RCC_OscConfig+0x820>)
 8002e9a:	4b06      	ldr	r3, [pc, #24]	@ (8002eb4 <HAL_RCC_OscConfig+0x824>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60cb      	str	r3, [r1, #12]
 8002ea0:	e001      	b.n	8002ea6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	feeefffc 	.word	0xfeeefffc

08002eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0e7      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b75      	ldr	r3, [pc, #468]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d910      	bls.n	8002efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b72      	ldr	r3, [pc, #456]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 0207 	bic.w	r2, r3, #7
 8002ee2:	4970      	ldr	r1, [pc, #448]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b6e      	ldr	r3, [pc, #440]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0cf      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d010      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	4b66      	ldr	r3, [pc, #408]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d908      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f18:	4b63      	ldr	r3, [pc, #396]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4960      	ldr	r1, [pc, #384]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d04c      	beq.n	8002fd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f3e:	4b5a      	ldr	r3, [pc, #360]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d121      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0a6      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f56:	4b54      	ldr	r3, [pc, #336]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d115      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e09a      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d107      	bne.n	8002f7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d109      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e08e      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f7e:	4b4a      	ldr	r3, [pc, #296]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e086      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f8e:	4b46      	ldr	r3, [pc, #280]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f023 0203 	bic.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4943      	ldr	r1, [pc, #268]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa0:	f7fe fbc0 	bl	8001724 <HAL_GetTick>
 8002fa4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa8:	f7fe fbbc 	bl	8001724 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e06e      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 020c 	and.w	r2, r3, #12
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d1eb      	bne.n	8002fa8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d010      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	4b31      	ldr	r3, [pc, #196]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d208      	bcs.n	8002ffe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fec:	4b2e      	ldr	r3, [pc, #184]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	492b      	ldr	r1, [pc, #172]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffe:	4b29      	ldr	r3, [pc, #164]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d210      	bcs.n	800302e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300c:	4b25      	ldr	r3, [pc, #148]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 0207 	bic.w	r2, r3, #7
 8003014:	4923      	ldr	r1, [pc, #140]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	4313      	orrs	r3, r2
 800301a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301c:	4b21      	ldr	r3, [pc, #132]	@ (80030a4 <HAL_RCC_ClockConfig+0x1ec>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e036      	b.n	800309c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d008      	beq.n	800304c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800303a:	4b1b      	ldr	r3, [pc, #108]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	4918      	ldr	r1, [pc, #96]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003048:	4313      	orrs	r3, r2
 800304a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d009      	beq.n	800306c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003058:	4b13      	ldr	r3, [pc, #76]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4910      	ldr	r1, [pc, #64]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	4313      	orrs	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800306c:	f000 f824 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b0d      	ldr	r3, [pc, #52]	@ (80030a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	490b      	ldr	r1, [pc, #44]	@ (80030ac <HAL_RCC_ClockConfig+0x1f4>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
 8003088:	4a09      	ldr	r2, [pc, #36]	@ (80030b0 <HAL_RCC_ClockConfig+0x1f8>)
 800308a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800308c:	4b09      	ldr	r3, [pc, #36]	@ (80030b4 <HAL_RCC_ClockConfig+0x1fc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fe faf7 	bl	8001684 <HAL_InitTick>
 8003096:	4603      	mov	r3, r0
 8003098:	72fb      	strb	r3, [r7, #11]

  return status;
 800309a:	7afb      	ldrb	r3, [r7, #11]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40022000 	.word	0x40022000
 80030a8:	40021000 	.word	0x40021000
 80030ac:	08004aa4 	.word	0x08004aa4
 80030b0:	20000000 	.word	0x20000000
 80030b4:	20000004 	.word	0x20000004

080030b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b089      	sub	sp, #36	@ 0x24
 80030bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030c6:	4b3e      	ldr	r3, [pc, #248]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d0:	4b3b      	ldr	r3, [pc, #236]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_GetSysClockFreq+0x34>
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d121      	bne.n	800312a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d11e      	bne.n	800312a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030ec:	4b34      	ldr	r3, [pc, #208]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030f8:	4b31      	ldr	r3, [pc, #196]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	61fb      	str	r3, [r7, #28]
 8003106:	e005      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003108:	4b2d      	ldr	r3, [pc, #180]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003114:	4a2b      	ldr	r2, [pc, #172]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10d      	bne.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003128:	e00a      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d102      	bne.n	8003136 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003130:	4b25      	ldr	r3, [pc, #148]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003132:	61bb      	str	r3, [r7, #24]
 8003134:	e004      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d101      	bne.n	8003140 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800313c:	4b23      	ldr	r3, [pc, #140]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x114>)
 800313e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d134      	bne.n	80031b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003146:	4b1e      	ldr	r3, [pc, #120]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d003      	beq.n	800315e <HAL_RCC_GetSysClockFreq+0xa6>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d003      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0xac>
 800315c:	e005      	b.n	800316a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800315e:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003160:	617b      	str	r3, [r7, #20]
      break;
 8003162:	e005      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003164:	4b19      	ldr	r3, [pc, #100]	@ (80031cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003166:	617b      	str	r3, [r7, #20]
      break;
 8003168:	e002      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	617b      	str	r3, [r7, #20]
      break;
 800316e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003170:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	3301      	adds	r3, #1
 800317c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800317e:	4b10      	ldr	r3, [pc, #64]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	0a1b      	lsrs	r3, r3, #8
 8003184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	fb03 f202 	mul.w	r2, r3, r2
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	fbb2 f3f3 	udiv	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003196:	4b0a      	ldr	r3, [pc, #40]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	0e5b      	lsrs	r3, r3, #25
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	3301      	adds	r3, #1
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031b0:	69bb      	ldr	r3, [r7, #24]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3724      	adds	r7, #36	@ 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	08004ab4 	.word	0x08004ab4
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031dc:	4b2a      	ldr	r3, [pc, #168]	@ (8003288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031e8:	f7ff f9ee 	bl	80025c8 <HAL_PWREx_GetVoltageRange>
 80031ec:	6178      	str	r0, [r7, #20]
 80031ee:	e014      	b.n	800321a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031f0:	4b25      	ldr	r3, [pc, #148]	@ (8003288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f4:	4a24      	ldr	r2, [pc, #144]	@ (8003288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80031fc:	4b22      	ldr	r3, [pc, #136]	@ (8003288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003204:	60fb      	str	r3, [r7, #12]
 8003206:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003208:	f7ff f9de 	bl	80025c8 <HAL_PWREx_GetVoltageRange>
 800320c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800320e:	4b1e      	ldr	r3, [pc, #120]	@ (8003288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003212:	4a1d      	ldr	r2, [pc, #116]	@ (8003288 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003218:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003220:	d10b      	bne.n	800323a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b80      	cmp	r3, #128	@ 0x80
 8003226:	d919      	bls.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2ba0      	cmp	r3, #160	@ 0xa0
 800322c:	d902      	bls.n	8003234 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800322e:	2302      	movs	r3, #2
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	e013      	b.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003234:	2301      	movs	r3, #1
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	e010      	b.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b80      	cmp	r3, #128	@ 0x80
 800323e:	d902      	bls.n	8003246 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003240:	2303      	movs	r3, #3
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	e00a      	b.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b80      	cmp	r3, #128	@ 0x80
 800324a:	d102      	bne.n	8003252 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800324c:	2302      	movs	r3, #2
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	e004      	b.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b70      	cmp	r3, #112	@ 0x70
 8003256:	d101      	bne.n	800325c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003258:	2301      	movs	r3, #1
 800325a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f023 0207 	bic.w	r2, r3, #7
 8003264:	4909      	ldr	r1, [pc, #36]	@ (800328c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800326c:	4b07      	ldr	r3, [pc, #28]	@ (800328c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	429a      	cmp	r2, r3
 8003278:	d001      	beq.n	800327e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40021000 	.word	0x40021000
 800328c:	40022000 	.word	0x40022000

08003290 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003298:	2300      	movs	r3, #0
 800329a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800329c:	2300      	movs	r3, #0
 800329e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d031      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032b4:	d01a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032ba:	d814      	bhi.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032c4:	d10f      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80032c6:	4b5d      	ldr	r3, [pc, #372]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a5c      	ldr	r2, [pc, #368]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032d2:	e00c      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3304      	adds	r3, #4
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f9de 	bl	800369c <RCCEx_PLLSAI1_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032e4:	e003      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	74fb      	strb	r3, [r7, #19]
      break;
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80032ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10b      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032f4:	4b51      	ldr	r3, [pc, #324]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003302:	494e      	ldr	r1, [pc, #312]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800330a:	e001      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	7cfb      	ldrb	r3, [r7, #19]
 800330e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 809e 	beq.w	800345a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331e:	2300      	movs	r3, #0
 8003320:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003322:	4b46      	ldr	r3, [pc, #280]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003332:	2300      	movs	r3, #0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00d      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003338:	4b40      	ldr	r3, [pc, #256]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333c:	4a3f      	ldr	r2, [pc, #252]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800333e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003342:	6593      	str	r3, [r2, #88]	@ 0x58
 8003344:	4b3d      	ldr	r3, [pc, #244]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003350:	2301      	movs	r3, #1
 8003352:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003354:	4b3a      	ldr	r3, [pc, #232]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a39      	ldr	r2, [pc, #228]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800335a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800335e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003360:	f7fe f9e0 	bl	8001724 <HAL_GetTick>
 8003364:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003366:	e009      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003368:	f7fe f9dc 	bl	8001724 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d902      	bls.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	74fb      	strb	r3, [r7, #19]
        break;
 800337a:	e005      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800337c:	4b30      	ldr	r3, [pc, #192]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ef      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d15a      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800338e:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003394:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003398:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01e      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d019      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033aa:	4b24      	ldr	r3, [pc, #144]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033b6:	4b21      	ldr	r3, [pc, #132]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033bc:	4a1f      	ldr	r2, [pc, #124]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033c6:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033cc:	4a1b      	ldr	r2, [pc, #108]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033d6:	4a19      	ldr	r2, [pc, #100]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d016      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e8:	f7fe f99c 	bl	8001724 <HAL_GetTick>
 80033ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ee:	e00b      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fe f998 	bl	8001724 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d902      	bls.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	74fb      	strb	r3, [r7, #19]
            break;
 8003406:	e006      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003408:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0ec      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003416:	7cfb      	ldrb	r3, [r7, #19]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10b      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341c:	4b07      	ldr	r3, [pc, #28]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800341e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003422:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342a:	4904      	ldr	r1, [pc, #16]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003432:	e009      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	74bb      	strb	r3, [r7, #18]
 8003438:	e006      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003448:	7c7b      	ldrb	r3, [r7, #17]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d105      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344e:	4b8a      	ldr	r3, [pc, #552]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	4a89      	ldr	r2, [pc, #548]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003458:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003466:	4b84      	ldr	r3, [pc, #528]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346c:	f023 0203 	bic.w	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4980      	ldr	r1, [pc, #512]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003488:	4b7b      	ldr	r3, [pc, #492]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348e:	f023 020c 	bic.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	4978      	ldr	r1, [pc, #480]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034aa:	4b73      	ldr	r3, [pc, #460]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	496f      	ldr	r1, [pc, #444]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034da:	4967      	ldr	r1, [pc, #412]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034ee:	4b62      	ldr	r3, [pc, #392]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	495e      	ldr	r1, [pc, #376]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003510:	4b59      	ldr	r3, [pc, #356]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003516:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	4956      	ldr	r1, [pc, #344]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003532:	4b51      	ldr	r3, [pc, #324]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003538:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	494d      	ldr	r1, [pc, #308]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d028      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003554:	4b48      	ldr	r3, [pc, #288]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	4945      	ldr	r1, [pc, #276]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003572:	d106      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003574:	4b40      	ldr	r3, [pc, #256]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a3f      	ldr	r2, [pc, #252]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800357a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800357e:	60d3      	str	r3, [r2, #12]
 8003580:	e011      	b.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800358a:	d10c      	bne.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	2101      	movs	r1, #1
 8003592:	4618      	mov	r0, r3
 8003594:	f000 f882 	bl	800369c <RCCEx_PLLSAI1_Config>
 8003598:	4603      	mov	r3, r0
 800359a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800359c:	7cfb      	ldrb	r3, [r7, #19]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80035a2:	7cfb      	ldrb	r3, [r7, #19]
 80035a4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d028      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035b2:	4b31      	ldr	r3, [pc, #196]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	492d      	ldr	r1, [pc, #180]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035d0:	d106      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d2:	4b29      	ldr	r3, [pc, #164]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	4a28      	ldr	r2, [pc, #160]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80035d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035dc:	60d3      	str	r3, [r2, #12]
 80035de:	e011      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035e8:	d10c      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3304      	adds	r3, #4
 80035ee:	2101      	movs	r1, #1
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f853 	bl	800369c <RCCEx_PLLSAI1_Config>
 80035f6:	4603      	mov	r3, r0
 80035f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035fa:	7cfb      	ldrb	r3, [r7, #19]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003600:	7cfb      	ldrb	r3, [r7, #19]
 8003602:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01c      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003610:	4b19      	ldr	r3, [pc, #100]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003616:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361e:	4916      	ldr	r1, [pc, #88]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800362e:	d10c      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	2102      	movs	r1, #2
 8003636:	4618      	mov	r0, r3
 8003638:	f000 f830 	bl	800369c <RCCEx_PLLSAI1_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003646:	7cfb      	ldrb	r3, [r7, #19]
 8003648:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003656:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003664:	4904      	ldr	r1, [pc, #16]	@ (8003678 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800366c:	7cbb      	ldrb	r3, [r7, #18]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40021000 	.word	0x40021000

0800367c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003680:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a04      	ldr	r2, [pc, #16]	@ (8003698 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	6013      	str	r3, [r2, #0]
}
 800368c:	bf00      	nop
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40021000 	.word	0x40021000

0800369c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036aa:	4b74      	ldr	r3, [pc, #464]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d018      	beq.n	80036e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036b6:	4b71      	ldr	r3, [pc, #452]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0203 	and.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d10d      	bne.n	80036e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
       ||
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d009      	beq.n	80036e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036ce:	4b6b      	ldr	r3, [pc, #428]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	091b      	lsrs	r3, r3, #4
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
       ||
 80036de:	429a      	cmp	r2, r3
 80036e0:	d047      	beq.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	e044      	b.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d018      	beq.n	8003722 <RCCEx_PLLSAI1_Config+0x86>
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d825      	bhi.n	8003740 <RCCEx_PLLSAI1_Config+0xa4>
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d002      	beq.n	80036fe <RCCEx_PLLSAI1_Config+0x62>
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d009      	beq.n	8003710 <RCCEx_PLLSAI1_Config+0x74>
 80036fc:	e020      	b.n	8003740 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036fe:	4b5f      	ldr	r3, [pc, #380]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11d      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370e:	e01a      	b.n	8003746 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003710:	4b5a      	ldr	r3, [pc, #360]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d116      	bne.n	800374a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003720:	e013      	b.n	800374a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003722:	4b56      	ldr	r3, [pc, #344]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800372e:	4b53      	ldr	r3, [pc, #332]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800373e:	e006      	b.n	800374e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	73fb      	strb	r3, [r7, #15]
      break;
 8003744:	e004      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003746:	bf00      	nop
 8003748:	e002      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003756:	4b49      	ldr	r3, [pc, #292]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	3b01      	subs	r3, #1
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	430b      	orrs	r3, r1
 800376c:	4943      	ldr	r1, [pc, #268]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 800376e:	4313      	orrs	r3, r2
 8003770:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d17c      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003778:	4b40      	ldr	r3, [pc, #256]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a3f      	ldr	r2, [pc, #252]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 800377e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003784:	f7fd ffce 	bl	8001724 <HAL_GetTick>
 8003788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800378a:	e009      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800378c:	f7fd ffca 	bl	8001724 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d902      	bls.n	80037a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	73fb      	strb	r3, [r7, #15]
        break;
 800379e:	e005      	b.n	80037ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037a0:	4b36      	ldr	r3, [pc, #216]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1ef      	bne.n	800378c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d15f      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d110      	bne.n	80037da <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b8:	4b30      	ldr	r3, [pc, #192]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80037c0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6892      	ldr	r2, [r2, #8]
 80037c8:	0211      	lsls	r1, r2, #8
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68d2      	ldr	r2, [r2, #12]
 80037ce:	06d2      	lsls	r2, r2, #27
 80037d0:	430a      	orrs	r2, r1
 80037d2:	492a      	ldr	r1, [pc, #168]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	610b      	str	r3, [r1, #16]
 80037d8:	e027      	b.n	800382a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d112      	bne.n	8003806 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037e0:	4b26      	ldr	r3, [pc, #152]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80037e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6892      	ldr	r2, [r2, #8]
 80037f0:	0211      	lsls	r1, r2, #8
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6912      	ldr	r2, [r2, #16]
 80037f6:	0852      	lsrs	r2, r2, #1
 80037f8:	3a01      	subs	r2, #1
 80037fa:	0552      	lsls	r2, r2, #21
 80037fc:	430a      	orrs	r2, r1
 80037fe:	491f      	ldr	r1, [pc, #124]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	610b      	str	r3, [r1, #16]
 8003804:	e011      	b.n	800382a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003806:	4b1d      	ldr	r3, [pc, #116]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800380e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6892      	ldr	r2, [r2, #8]
 8003816:	0211      	lsls	r1, r2, #8
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6952      	ldr	r2, [r2, #20]
 800381c:	0852      	lsrs	r2, r2, #1
 800381e:	3a01      	subs	r2, #1
 8003820:	0652      	lsls	r2, r2, #25
 8003822:	430a      	orrs	r2, r1
 8003824:	4915      	ldr	r1, [pc, #84]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003826:	4313      	orrs	r3, r2
 8003828:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800382a:	4b14      	ldr	r3, [pc, #80]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a13      	ldr	r2, [pc, #76]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003830:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003834:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003836:	f7fd ff75 	bl	8001724 <HAL_GetTick>
 800383a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800383c:	e009      	b.n	8003852 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800383e:	f7fd ff71 	bl	8001724 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d902      	bls.n	8003852 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	73fb      	strb	r3, [r7, #15]
          break;
 8003850:	e005      	b.n	800385e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003852:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0ef      	beq.n	800383e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d106      	bne.n	8003872 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003864:	4b05      	ldr	r3, [pc, #20]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	4903      	ldr	r1, [pc, #12]	@ (800387c <RCCEx_PLLSAI1_Config+0x1e0>)
 800386e:	4313      	orrs	r3, r2
 8003870:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3710      	adds	r7, #16
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	40021000 	.word	0x40021000

08003880 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e049      	b.n	8003926 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d106      	bne.n	80038ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7fd fe2e 	bl	8001508 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4619      	mov	r1, r3
 80038be:	4610      	mov	r0, r2
 80038c0:	f000 fa82 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	d001      	beq.n	8003948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e03b      	b.n	80039c0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a19      	ldr	r2, [pc, #100]	@ (80039cc <HAL_TIM_Base_Start_IT+0x9c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d009      	beq.n	800397e <HAL_TIM_Base_Start_IT+0x4e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003972:	d004      	beq.n	800397e <HAL_TIM_Base_Start_IT+0x4e>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a15      	ldr	r2, [pc, #84]	@ (80039d0 <HAL_TIM_Base_Start_IT+0xa0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d115      	bne.n	80039aa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	4b13      	ldr	r3, [pc, #76]	@ (80039d4 <HAL_TIM_Base_Start_IT+0xa4>)
 8003986:	4013      	ands	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b06      	cmp	r3, #6
 800398e:	d015      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x8c>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003996:	d011      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a8:	e008      	b.n	80039bc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0201 	orr.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	e000      	b.n	80039be <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40014000 	.word	0x40014000
 80039d4:	00010007 	.word	0x00010007

080039d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d020      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01b      	beq.n	8003a3c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f06f 0202 	mvn.w	r2, #2
 8003a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d003      	beq.n	8003a2a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f9b2 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003a28:	e005      	b.n	8003a36 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f9a4 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f9b5 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d020      	beq.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01b      	beq.n	8003a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0204 	mvn.w	r2, #4
 8003a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f98c 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f97e 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f98f 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d020      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01b      	beq.n	8003ad4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0208 	mvn.w	r2, #8
 8003aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f966 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003ac0:	e005      	b.n	8003ace <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f958 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f969 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d020      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 0310 	and.w	r3, r3, #16
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01b      	beq.n	8003b20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0210 	mvn.w	r2, #16
 8003af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2208      	movs	r2, #8
 8003af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f940 	bl	8003d8c <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f932 	bl	8003d78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f943 	bl	8003da0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00c      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d007      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0201 	mvn.w	r2, #1
 8003b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd f8a2 	bl	8000c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00c      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003b6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 faa5 	bl	80040bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00c      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d007      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fa9d 	bl	80040d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00c      	beq.n	8003bba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f8fd 	bl	8003db4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00c      	beq.n	8003bde <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d007      	beq.n	8003bde <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f06f 0220 	mvn.w	r2, #32
 8003bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fa65 	bl	80040a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_TIM_ConfigClockSource+0x1c>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e0b6      	b.n	8003d70 <HAL_TIM_ConfigClockSource+0x18a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c20:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c24:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c2c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c3e:	d03e      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0xd8>
 8003c40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c44:	f200 8087 	bhi.w	8003d56 <HAL_TIM_ConfigClockSource+0x170>
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c4c:	f000 8086 	beq.w	8003d5c <HAL_TIM_ConfigClockSource+0x176>
 8003c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c54:	d87f      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x170>
 8003c56:	2b70      	cmp	r3, #112	@ 0x70
 8003c58:	d01a      	beq.n	8003c90 <HAL_TIM_ConfigClockSource+0xaa>
 8003c5a:	2b70      	cmp	r3, #112	@ 0x70
 8003c5c:	d87b      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x170>
 8003c5e:	2b60      	cmp	r3, #96	@ 0x60
 8003c60:	d050      	beq.n	8003d04 <HAL_TIM_ConfigClockSource+0x11e>
 8003c62:	2b60      	cmp	r3, #96	@ 0x60
 8003c64:	d877      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x170>
 8003c66:	2b50      	cmp	r3, #80	@ 0x50
 8003c68:	d03c      	beq.n	8003ce4 <HAL_TIM_ConfigClockSource+0xfe>
 8003c6a:	2b50      	cmp	r3, #80	@ 0x50
 8003c6c:	d873      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x170>
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	d058      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0x13e>
 8003c72:	2b40      	cmp	r3, #64	@ 0x40
 8003c74:	d86f      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x170>
 8003c76:	2b30      	cmp	r3, #48	@ 0x30
 8003c78:	d064      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0x15e>
 8003c7a:	2b30      	cmp	r3, #48	@ 0x30
 8003c7c:	d86b      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x170>
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d060      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0x15e>
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d867      	bhi.n	8003d56 <HAL_TIM_ConfigClockSource+0x170>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d05c      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0x15e>
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d05a      	beq.n	8003d44 <HAL_TIM_ConfigClockSource+0x15e>
 8003c8e:	e062      	b.n	8003d56 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ca0:	f000 f97c 	bl	8003f9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003cb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
      break;
 8003cbc:	e04f      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cce:	f000 f965 	bl	8003f9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ce0:	609a      	str	r2, [r3, #8]
      break;
 8003ce2:	e03c      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	f000 f8d9 	bl	8003ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2150      	movs	r1, #80	@ 0x50
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 f932 	bl	8003f66 <TIM_ITRx_SetConfig>
      break;
 8003d02:	e02c      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d10:	461a      	mov	r2, r3
 8003d12:	f000 f8f8 	bl	8003f06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2160      	movs	r1, #96	@ 0x60
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f922 	bl	8003f66 <TIM_ITRx_SetConfig>
      break;
 8003d22:	e01c      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d30:	461a      	mov	r2, r3
 8003d32:	f000 f8b9 	bl	8003ea8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2140      	movs	r1, #64	@ 0x40
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 f912 	bl	8003f66 <TIM_ITRx_SetConfig>
      break;
 8003d42:	e00c      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	f000 f909 	bl	8003f66 <TIM_ITRx_SetConfig>
      break;
 8003d54:	e003      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
      break;
 8003d5a:	e000      	b.n	8003d5e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d5c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a30      	ldr	r2, [pc, #192]	@ (8003e9c <TIM_Base_SetConfig+0xd4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_Base_SetConfig+0x20>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de6:	d108      	bne.n	8003dfa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a27      	ldr	r2, [pc, #156]	@ (8003e9c <TIM_Base_SetConfig+0xd4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00b      	beq.n	8003e1a <TIM_Base_SetConfig+0x52>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e08:	d007      	beq.n	8003e1a <TIM_Base_SetConfig+0x52>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a24      	ldr	r2, [pc, #144]	@ (8003ea0 <TIM_Base_SetConfig+0xd8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d003      	beq.n	8003e1a <TIM_Base_SetConfig+0x52>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a23      	ldr	r2, [pc, #140]	@ (8003ea4 <TIM_Base_SetConfig+0xdc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d108      	bne.n	8003e2c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a12      	ldr	r2, [pc, #72]	@ (8003e9c <TIM_Base_SetConfig+0xd4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d007      	beq.n	8003e68 <TIM_Base_SetConfig+0xa0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a11      	ldr	r2, [pc, #68]	@ (8003ea0 <TIM_Base_SetConfig+0xd8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d003      	beq.n	8003e68 <TIM_Base_SetConfig+0xa0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a10      	ldr	r2, [pc, #64]	@ (8003ea4 <TIM_Base_SetConfig+0xdc>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d103      	bne.n	8003e70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d105      	bne.n	8003e8e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f023 0201 	bic.w	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	611a      	str	r2, [r3, #16]
  }
}
 8003e8e:	bf00      	nop
 8003e90:	3714      	adds	r7, #20
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	40012c00 	.word	0x40012c00
 8003ea0:	40014000 	.word	0x40014000
 8003ea4:	40014400 	.word	0x40014400

08003ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f023 0201 	bic.w	r2, r3, #1
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f023 030a 	bic.w	r3, r3, #10
 8003ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	621a      	str	r2, [r3, #32]
}
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b087      	sub	sp, #28
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f023 0210 	bic.w	r2, r3, #16
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	031b      	lsls	r3, r3, #12
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f42:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	621a      	str	r2, [r3, #32]
}
 8003f5a:	bf00      	nop
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f043 0307 	orr.w	r3, r3, #7
 8003f88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	609a      	str	r2, [r3, #8]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	021a      	lsls	r2, r3, #8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	609a      	str	r2, [r3, #8]
}
 8003fd0:	bf00      	nop
 8003fd2:	371c      	adds	r7, #28
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e04f      	b.n	8004094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a21      	ldr	r2, [pc, #132]	@ (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d108      	bne.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004024:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a14      	ldr	r2, [pc, #80]	@ (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d009      	beq.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800405c:	d004      	beq.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a10      	ldr	r2, [pc, #64]	@ (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d10c      	bne.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800406e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	4313      	orrs	r3, r2
 8004078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012c00 	.word	0x40012c00
 80040a4:	40014000 	.word	0x40014000

080040a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <sniprintf>:
 80040e4:	b40c      	push	{r2, r3}
 80040e6:	b530      	push	{r4, r5, lr}
 80040e8:	4b17      	ldr	r3, [pc, #92]	@ (8004148 <sniprintf+0x64>)
 80040ea:	1e0c      	subs	r4, r1, #0
 80040ec:	681d      	ldr	r5, [r3, #0]
 80040ee:	b09d      	sub	sp, #116	@ 0x74
 80040f0:	da08      	bge.n	8004104 <sniprintf+0x20>
 80040f2:	238b      	movs	r3, #139	@ 0x8b
 80040f4:	602b      	str	r3, [r5, #0]
 80040f6:	f04f 30ff 	mov.w	r0, #4294967295
 80040fa:	b01d      	add	sp, #116	@ 0x74
 80040fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004100:	b002      	add	sp, #8
 8004102:	4770      	bx	lr
 8004104:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004108:	f8ad 3014 	strh.w	r3, [sp, #20]
 800410c:	bf14      	ite	ne
 800410e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004112:	4623      	moveq	r3, r4
 8004114:	9304      	str	r3, [sp, #16]
 8004116:	9307      	str	r3, [sp, #28]
 8004118:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800411c:	9002      	str	r0, [sp, #8]
 800411e:	9006      	str	r0, [sp, #24]
 8004120:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004124:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004126:	ab21      	add	r3, sp, #132	@ 0x84
 8004128:	a902      	add	r1, sp, #8
 800412a:	4628      	mov	r0, r5
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	f000 f995 	bl	800445c <_svfiprintf_r>
 8004132:	1c43      	adds	r3, r0, #1
 8004134:	bfbc      	itt	lt
 8004136:	238b      	movlt	r3, #139	@ 0x8b
 8004138:	602b      	strlt	r3, [r5, #0]
 800413a:	2c00      	cmp	r4, #0
 800413c:	d0dd      	beq.n	80040fa <sniprintf+0x16>
 800413e:	9b02      	ldr	r3, [sp, #8]
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	e7d9      	b.n	80040fa <sniprintf+0x16>
 8004146:	bf00      	nop
 8004148:	2000000c 	.word	0x2000000c

0800414c <memset>:
 800414c:	4402      	add	r2, r0
 800414e:	4603      	mov	r3, r0
 8004150:	4293      	cmp	r3, r2
 8004152:	d100      	bne.n	8004156 <memset+0xa>
 8004154:	4770      	bx	lr
 8004156:	f803 1b01 	strb.w	r1, [r3], #1
 800415a:	e7f9      	b.n	8004150 <memset+0x4>

0800415c <__errno>:
 800415c:	4b01      	ldr	r3, [pc, #4]	@ (8004164 <__errno+0x8>)
 800415e:	6818      	ldr	r0, [r3, #0]
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	2000000c 	.word	0x2000000c

08004168 <__libc_init_array>:
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	4d0d      	ldr	r5, [pc, #52]	@ (80041a0 <__libc_init_array+0x38>)
 800416c:	4c0d      	ldr	r4, [pc, #52]	@ (80041a4 <__libc_init_array+0x3c>)
 800416e:	1b64      	subs	r4, r4, r5
 8004170:	10a4      	asrs	r4, r4, #2
 8004172:	2600      	movs	r6, #0
 8004174:	42a6      	cmp	r6, r4
 8004176:	d109      	bne.n	800418c <__libc_init_array+0x24>
 8004178:	4d0b      	ldr	r5, [pc, #44]	@ (80041a8 <__libc_init_array+0x40>)
 800417a:	4c0c      	ldr	r4, [pc, #48]	@ (80041ac <__libc_init_array+0x44>)
 800417c:	f000 fc66 	bl	8004a4c <_init>
 8004180:	1b64      	subs	r4, r4, r5
 8004182:	10a4      	asrs	r4, r4, #2
 8004184:	2600      	movs	r6, #0
 8004186:	42a6      	cmp	r6, r4
 8004188:	d105      	bne.n	8004196 <__libc_init_array+0x2e>
 800418a:	bd70      	pop	{r4, r5, r6, pc}
 800418c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004190:	4798      	blx	r3
 8004192:	3601      	adds	r6, #1
 8004194:	e7ee      	b.n	8004174 <__libc_init_array+0xc>
 8004196:	f855 3b04 	ldr.w	r3, [r5], #4
 800419a:	4798      	blx	r3
 800419c:	3601      	adds	r6, #1
 800419e:	e7f2      	b.n	8004186 <__libc_init_array+0x1e>
 80041a0:	08004b20 	.word	0x08004b20
 80041a4:	08004b20 	.word	0x08004b20
 80041a8:	08004b20 	.word	0x08004b20
 80041ac:	08004b24 	.word	0x08004b24

080041b0 <__retarget_lock_acquire_recursive>:
 80041b0:	4770      	bx	lr

080041b2 <__retarget_lock_release_recursive>:
 80041b2:	4770      	bx	lr

080041b4 <_free_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4605      	mov	r5, r0
 80041b8:	2900      	cmp	r1, #0
 80041ba:	d041      	beq.n	8004240 <_free_r+0x8c>
 80041bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c0:	1f0c      	subs	r4, r1, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	bfb8      	it	lt
 80041c6:	18e4      	addlt	r4, r4, r3
 80041c8:	f000 f8e0 	bl	800438c <__malloc_lock>
 80041cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004244 <_free_r+0x90>)
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	b933      	cbnz	r3, 80041e0 <_free_r+0x2c>
 80041d2:	6063      	str	r3, [r4, #4]
 80041d4:	6014      	str	r4, [r2, #0]
 80041d6:	4628      	mov	r0, r5
 80041d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041dc:	f000 b8dc 	b.w	8004398 <__malloc_unlock>
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	d908      	bls.n	80041f6 <_free_r+0x42>
 80041e4:	6820      	ldr	r0, [r4, #0]
 80041e6:	1821      	adds	r1, r4, r0
 80041e8:	428b      	cmp	r3, r1
 80041ea:	bf01      	itttt	eq
 80041ec:	6819      	ldreq	r1, [r3, #0]
 80041ee:	685b      	ldreq	r3, [r3, #4]
 80041f0:	1809      	addeq	r1, r1, r0
 80041f2:	6021      	streq	r1, [r4, #0]
 80041f4:	e7ed      	b.n	80041d2 <_free_r+0x1e>
 80041f6:	461a      	mov	r2, r3
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	b10b      	cbz	r3, 8004200 <_free_r+0x4c>
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	d9fa      	bls.n	80041f6 <_free_r+0x42>
 8004200:	6811      	ldr	r1, [r2, #0]
 8004202:	1850      	adds	r0, r2, r1
 8004204:	42a0      	cmp	r0, r4
 8004206:	d10b      	bne.n	8004220 <_free_r+0x6c>
 8004208:	6820      	ldr	r0, [r4, #0]
 800420a:	4401      	add	r1, r0
 800420c:	1850      	adds	r0, r2, r1
 800420e:	4283      	cmp	r3, r0
 8004210:	6011      	str	r1, [r2, #0]
 8004212:	d1e0      	bne.n	80041d6 <_free_r+0x22>
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	6053      	str	r3, [r2, #4]
 800421a:	4408      	add	r0, r1
 800421c:	6010      	str	r0, [r2, #0]
 800421e:	e7da      	b.n	80041d6 <_free_r+0x22>
 8004220:	d902      	bls.n	8004228 <_free_r+0x74>
 8004222:	230c      	movs	r3, #12
 8004224:	602b      	str	r3, [r5, #0]
 8004226:	e7d6      	b.n	80041d6 <_free_r+0x22>
 8004228:	6820      	ldr	r0, [r4, #0]
 800422a:	1821      	adds	r1, r4, r0
 800422c:	428b      	cmp	r3, r1
 800422e:	bf04      	itt	eq
 8004230:	6819      	ldreq	r1, [r3, #0]
 8004232:	685b      	ldreq	r3, [r3, #4]
 8004234:	6063      	str	r3, [r4, #4]
 8004236:	bf04      	itt	eq
 8004238:	1809      	addeq	r1, r1, r0
 800423a:	6021      	streq	r1, [r4, #0]
 800423c:	6054      	str	r4, [r2, #4]
 800423e:	e7ca      	b.n	80041d6 <_free_r+0x22>
 8004240:	bd38      	pop	{r3, r4, r5, pc}
 8004242:	bf00      	nop
 8004244:	200002e4 	.word	0x200002e4

08004248 <sbrk_aligned>:
 8004248:	b570      	push	{r4, r5, r6, lr}
 800424a:	4e0f      	ldr	r6, [pc, #60]	@ (8004288 <sbrk_aligned+0x40>)
 800424c:	460c      	mov	r4, r1
 800424e:	6831      	ldr	r1, [r6, #0]
 8004250:	4605      	mov	r5, r0
 8004252:	b911      	cbnz	r1, 800425a <sbrk_aligned+0x12>
 8004254:	f000 fba6 	bl	80049a4 <_sbrk_r>
 8004258:	6030      	str	r0, [r6, #0]
 800425a:	4621      	mov	r1, r4
 800425c:	4628      	mov	r0, r5
 800425e:	f000 fba1 	bl	80049a4 <_sbrk_r>
 8004262:	1c43      	adds	r3, r0, #1
 8004264:	d103      	bne.n	800426e <sbrk_aligned+0x26>
 8004266:	f04f 34ff 	mov.w	r4, #4294967295
 800426a:	4620      	mov	r0, r4
 800426c:	bd70      	pop	{r4, r5, r6, pc}
 800426e:	1cc4      	adds	r4, r0, #3
 8004270:	f024 0403 	bic.w	r4, r4, #3
 8004274:	42a0      	cmp	r0, r4
 8004276:	d0f8      	beq.n	800426a <sbrk_aligned+0x22>
 8004278:	1a21      	subs	r1, r4, r0
 800427a:	4628      	mov	r0, r5
 800427c:	f000 fb92 	bl	80049a4 <_sbrk_r>
 8004280:	3001      	adds	r0, #1
 8004282:	d1f2      	bne.n	800426a <sbrk_aligned+0x22>
 8004284:	e7ef      	b.n	8004266 <sbrk_aligned+0x1e>
 8004286:	bf00      	nop
 8004288:	200002e0 	.word	0x200002e0

0800428c <_malloc_r>:
 800428c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004290:	1ccd      	adds	r5, r1, #3
 8004292:	f025 0503 	bic.w	r5, r5, #3
 8004296:	3508      	adds	r5, #8
 8004298:	2d0c      	cmp	r5, #12
 800429a:	bf38      	it	cc
 800429c:	250c      	movcc	r5, #12
 800429e:	2d00      	cmp	r5, #0
 80042a0:	4606      	mov	r6, r0
 80042a2:	db01      	blt.n	80042a8 <_malloc_r+0x1c>
 80042a4:	42a9      	cmp	r1, r5
 80042a6:	d904      	bls.n	80042b2 <_malloc_r+0x26>
 80042a8:	230c      	movs	r3, #12
 80042aa:	6033      	str	r3, [r6, #0]
 80042ac:	2000      	movs	r0, #0
 80042ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004388 <_malloc_r+0xfc>
 80042b6:	f000 f869 	bl	800438c <__malloc_lock>
 80042ba:	f8d8 3000 	ldr.w	r3, [r8]
 80042be:	461c      	mov	r4, r3
 80042c0:	bb44      	cbnz	r4, 8004314 <_malloc_r+0x88>
 80042c2:	4629      	mov	r1, r5
 80042c4:	4630      	mov	r0, r6
 80042c6:	f7ff ffbf 	bl	8004248 <sbrk_aligned>
 80042ca:	1c43      	adds	r3, r0, #1
 80042cc:	4604      	mov	r4, r0
 80042ce:	d158      	bne.n	8004382 <_malloc_r+0xf6>
 80042d0:	f8d8 4000 	ldr.w	r4, [r8]
 80042d4:	4627      	mov	r7, r4
 80042d6:	2f00      	cmp	r7, #0
 80042d8:	d143      	bne.n	8004362 <_malloc_r+0xd6>
 80042da:	2c00      	cmp	r4, #0
 80042dc:	d04b      	beq.n	8004376 <_malloc_r+0xea>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	4639      	mov	r1, r7
 80042e2:	4630      	mov	r0, r6
 80042e4:	eb04 0903 	add.w	r9, r4, r3
 80042e8:	f000 fb5c 	bl	80049a4 <_sbrk_r>
 80042ec:	4581      	cmp	r9, r0
 80042ee:	d142      	bne.n	8004376 <_malloc_r+0xea>
 80042f0:	6821      	ldr	r1, [r4, #0]
 80042f2:	1a6d      	subs	r5, r5, r1
 80042f4:	4629      	mov	r1, r5
 80042f6:	4630      	mov	r0, r6
 80042f8:	f7ff ffa6 	bl	8004248 <sbrk_aligned>
 80042fc:	3001      	adds	r0, #1
 80042fe:	d03a      	beq.n	8004376 <_malloc_r+0xea>
 8004300:	6823      	ldr	r3, [r4, #0]
 8004302:	442b      	add	r3, r5
 8004304:	6023      	str	r3, [r4, #0]
 8004306:	f8d8 3000 	ldr.w	r3, [r8]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	bb62      	cbnz	r2, 8004368 <_malloc_r+0xdc>
 800430e:	f8c8 7000 	str.w	r7, [r8]
 8004312:	e00f      	b.n	8004334 <_malloc_r+0xa8>
 8004314:	6822      	ldr	r2, [r4, #0]
 8004316:	1b52      	subs	r2, r2, r5
 8004318:	d420      	bmi.n	800435c <_malloc_r+0xd0>
 800431a:	2a0b      	cmp	r2, #11
 800431c:	d917      	bls.n	800434e <_malloc_r+0xc2>
 800431e:	1961      	adds	r1, r4, r5
 8004320:	42a3      	cmp	r3, r4
 8004322:	6025      	str	r5, [r4, #0]
 8004324:	bf18      	it	ne
 8004326:	6059      	strne	r1, [r3, #4]
 8004328:	6863      	ldr	r3, [r4, #4]
 800432a:	bf08      	it	eq
 800432c:	f8c8 1000 	streq.w	r1, [r8]
 8004330:	5162      	str	r2, [r4, r5]
 8004332:	604b      	str	r3, [r1, #4]
 8004334:	4630      	mov	r0, r6
 8004336:	f000 f82f 	bl	8004398 <__malloc_unlock>
 800433a:	f104 000b 	add.w	r0, r4, #11
 800433e:	1d23      	adds	r3, r4, #4
 8004340:	f020 0007 	bic.w	r0, r0, #7
 8004344:	1ac2      	subs	r2, r0, r3
 8004346:	bf1c      	itt	ne
 8004348:	1a1b      	subne	r3, r3, r0
 800434a:	50a3      	strne	r3, [r4, r2]
 800434c:	e7af      	b.n	80042ae <_malloc_r+0x22>
 800434e:	6862      	ldr	r2, [r4, #4]
 8004350:	42a3      	cmp	r3, r4
 8004352:	bf0c      	ite	eq
 8004354:	f8c8 2000 	streq.w	r2, [r8]
 8004358:	605a      	strne	r2, [r3, #4]
 800435a:	e7eb      	b.n	8004334 <_malloc_r+0xa8>
 800435c:	4623      	mov	r3, r4
 800435e:	6864      	ldr	r4, [r4, #4]
 8004360:	e7ae      	b.n	80042c0 <_malloc_r+0x34>
 8004362:	463c      	mov	r4, r7
 8004364:	687f      	ldr	r7, [r7, #4]
 8004366:	e7b6      	b.n	80042d6 <_malloc_r+0x4a>
 8004368:	461a      	mov	r2, r3
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	42a3      	cmp	r3, r4
 800436e:	d1fb      	bne.n	8004368 <_malloc_r+0xdc>
 8004370:	2300      	movs	r3, #0
 8004372:	6053      	str	r3, [r2, #4]
 8004374:	e7de      	b.n	8004334 <_malloc_r+0xa8>
 8004376:	230c      	movs	r3, #12
 8004378:	6033      	str	r3, [r6, #0]
 800437a:	4630      	mov	r0, r6
 800437c:	f000 f80c 	bl	8004398 <__malloc_unlock>
 8004380:	e794      	b.n	80042ac <_malloc_r+0x20>
 8004382:	6005      	str	r5, [r0, #0]
 8004384:	e7d6      	b.n	8004334 <_malloc_r+0xa8>
 8004386:	bf00      	nop
 8004388:	200002e4 	.word	0x200002e4

0800438c <__malloc_lock>:
 800438c:	4801      	ldr	r0, [pc, #4]	@ (8004394 <__malloc_lock+0x8>)
 800438e:	f7ff bf0f 	b.w	80041b0 <__retarget_lock_acquire_recursive>
 8004392:	bf00      	nop
 8004394:	200002dc 	.word	0x200002dc

08004398 <__malloc_unlock>:
 8004398:	4801      	ldr	r0, [pc, #4]	@ (80043a0 <__malloc_unlock+0x8>)
 800439a:	f7ff bf0a 	b.w	80041b2 <__retarget_lock_release_recursive>
 800439e:	bf00      	nop
 80043a0:	200002dc 	.word	0x200002dc

080043a4 <__ssputs_r>:
 80043a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	688e      	ldr	r6, [r1, #8]
 80043aa:	461f      	mov	r7, r3
 80043ac:	42be      	cmp	r6, r7
 80043ae:	680b      	ldr	r3, [r1, #0]
 80043b0:	4682      	mov	sl, r0
 80043b2:	460c      	mov	r4, r1
 80043b4:	4690      	mov	r8, r2
 80043b6:	d82d      	bhi.n	8004414 <__ssputs_r+0x70>
 80043b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80043bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80043c0:	d026      	beq.n	8004410 <__ssputs_r+0x6c>
 80043c2:	6965      	ldr	r5, [r4, #20]
 80043c4:	6909      	ldr	r1, [r1, #16]
 80043c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043ca:	eba3 0901 	sub.w	r9, r3, r1
 80043ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043d2:	1c7b      	adds	r3, r7, #1
 80043d4:	444b      	add	r3, r9
 80043d6:	106d      	asrs	r5, r5, #1
 80043d8:	429d      	cmp	r5, r3
 80043da:	bf38      	it	cc
 80043dc:	461d      	movcc	r5, r3
 80043de:	0553      	lsls	r3, r2, #21
 80043e0:	d527      	bpl.n	8004432 <__ssputs_r+0x8e>
 80043e2:	4629      	mov	r1, r5
 80043e4:	f7ff ff52 	bl	800428c <_malloc_r>
 80043e8:	4606      	mov	r6, r0
 80043ea:	b360      	cbz	r0, 8004446 <__ssputs_r+0xa2>
 80043ec:	6921      	ldr	r1, [r4, #16]
 80043ee:	464a      	mov	r2, r9
 80043f0:	f000 fae8 	bl	80049c4 <memcpy>
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80043fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043fe:	81a3      	strh	r3, [r4, #12]
 8004400:	6126      	str	r6, [r4, #16]
 8004402:	6165      	str	r5, [r4, #20]
 8004404:	444e      	add	r6, r9
 8004406:	eba5 0509 	sub.w	r5, r5, r9
 800440a:	6026      	str	r6, [r4, #0]
 800440c:	60a5      	str	r5, [r4, #8]
 800440e:	463e      	mov	r6, r7
 8004410:	42be      	cmp	r6, r7
 8004412:	d900      	bls.n	8004416 <__ssputs_r+0x72>
 8004414:	463e      	mov	r6, r7
 8004416:	6820      	ldr	r0, [r4, #0]
 8004418:	4632      	mov	r2, r6
 800441a:	4641      	mov	r1, r8
 800441c:	f000 faa8 	bl	8004970 <memmove>
 8004420:	68a3      	ldr	r3, [r4, #8]
 8004422:	1b9b      	subs	r3, r3, r6
 8004424:	60a3      	str	r3, [r4, #8]
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	4433      	add	r3, r6
 800442a:	6023      	str	r3, [r4, #0]
 800442c:	2000      	movs	r0, #0
 800442e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004432:	462a      	mov	r2, r5
 8004434:	f000 fad4 	bl	80049e0 <_realloc_r>
 8004438:	4606      	mov	r6, r0
 800443a:	2800      	cmp	r0, #0
 800443c:	d1e0      	bne.n	8004400 <__ssputs_r+0x5c>
 800443e:	6921      	ldr	r1, [r4, #16]
 8004440:	4650      	mov	r0, sl
 8004442:	f7ff feb7 	bl	80041b4 <_free_r>
 8004446:	230c      	movs	r3, #12
 8004448:	f8ca 3000 	str.w	r3, [sl]
 800444c:	89a3      	ldrh	r3, [r4, #12]
 800444e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004452:	81a3      	strh	r3, [r4, #12]
 8004454:	f04f 30ff 	mov.w	r0, #4294967295
 8004458:	e7e9      	b.n	800442e <__ssputs_r+0x8a>
	...

0800445c <_svfiprintf_r>:
 800445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004460:	4698      	mov	r8, r3
 8004462:	898b      	ldrh	r3, [r1, #12]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	b09d      	sub	sp, #116	@ 0x74
 8004468:	4607      	mov	r7, r0
 800446a:	460d      	mov	r5, r1
 800446c:	4614      	mov	r4, r2
 800446e:	d510      	bpl.n	8004492 <_svfiprintf_r+0x36>
 8004470:	690b      	ldr	r3, [r1, #16]
 8004472:	b973      	cbnz	r3, 8004492 <_svfiprintf_r+0x36>
 8004474:	2140      	movs	r1, #64	@ 0x40
 8004476:	f7ff ff09 	bl	800428c <_malloc_r>
 800447a:	6028      	str	r0, [r5, #0]
 800447c:	6128      	str	r0, [r5, #16]
 800447e:	b930      	cbnz	r0, 800448e <_svfiprintf_r+0x32>
 8004480:	230c      	movs	r3, #12
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	f04f 30ff 	mov.w	r0, #4294967295
 8004488:	b01d      	add	sp, #116	@ 0x74
 800448a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800448e:	2340      	movs	r3, #64	@ 0x40
 8004490:	616b      	str	r3, [r5, #20]
 8004492:	2300      	movs	r3, #0
 8004494:	9309      	str	r3, [sp, #36]	@ 0x24
 8004496:	2320      	movs	r3, #32
 8004498:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800449c:	f8cd 800c 	str.w	r8, [sp, #12]
 80044a0:	2330      	movs	r3, #48	@ 0x30
 80044a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004640 <_svfiprintf_r+0x1e4>
 80044a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80044aa:	f04f 0901 	mov.w	r9, #1
 80044ae:	4623      	mov	r3, r4
 80044b0:	469a      	mov	sl, r3
 80044b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044b6:	b10a      	cbz	r2, 80044bc <_svfiprintf_r+0x60>
 80044b8:	2a25      	cmp	r2, #37	@ 0x25
 80044ba:	d1f9      	bne.n	80044b0 <_svfiprintf_r+0x54>
 80044bc:	ebba 0b04 	subs.w	fp, sl, r4
 80044c0:	d00b      	beq.n	80044da <_svfiprintf_r+0x7e>
 80044c2:	465b      	mov	r3, fp
 80044c4:	4622      	mov	r2, r4
 80044c6:	4629      	mov	r1, r5
 80044c8:	4638      	mov	r0, r7
 80044ca:	f7ff ff6b 	bl	80043a4 <__ssputs_r>
 80044ce:	3001      	adds	r0, #1
 80044d0:	f000 80a7 	beq.w	8004622 <_svfiprintf_r+0x1c6>
 80044d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044d6:	445a      	add	r2, fp
 80044d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80044da:	f89a 3000 	ldrb.w	r3, [sl]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 809f 	beq.w	8004622 <_svfiprintf_r+0x1c6>
 80044e4:	2300      	movs	r3, #0
 80044e6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ee:	f10a 0a01 	add.w	sl, sl, #1
 80044f2:	9304      	str	r3, [sp, #16]
 80044f4:	9307      	str	r3, [sp, #28]
 80044f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80044fc:	4654      	mov	r4, sl
 80044fe:	2205      	movs	r2, #5
 8004500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004504:	484e      	ldr	r0, [pc, #312]	@ (8004640 <_svfiprintf_r+0x1e4>)
 8004506:	f7fb fe63 	bl	80001d0 <memchr>
 800450a:	9a04      	ldr	r2, [sp, #16]
 800450c:	b9d8      	cbnz	r0, 8004546 <_svfiprintf_r+0xea>
 800450e:	06d0      	lsls	r0, r2, #27
 8004510:	bf44      	itt	mi
 8004512:	2320      	movmi	r3, #32
 8004514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004518:	0711      	lsls	r1, r2, #28
 800451a:	bf44      	itt	mi
 800451c:	232b      	movmi	r3, #43	@ 0x2b
 800451e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004522:	f89a 3000 	ldrb.w	r3, [sl]
 8004526:	2b2a      	cmp	r3, #42	@ 0x2a
 8004528:	d015      	beq.n	8004556 <_svfiprintf_r+0xfa>
 800452a:	9a07      	ldr	r2, [sp, #28]
 800452c:	4654      	mov	r4, sl
 800452e:	2000      	movs	r0, #0
 8004530:	f04f 0c0a 	mov.w	ip, #10
 8004534:	4621      	mov	r1, r4
 8004536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800453a:	3b30      	subs	r3, #48	@ 0x30
 800453c:	2b09      	cmp	r3, #9
 800453e:	d94b      	bls.n	80045d8 <_svfiprintf_r+0x17c>
 8004540:	b1b0      	cbz	r0, 8004570 <_svfiprintf_r+0x114>
 8004542:	9207      	str	r2, [sp, #28]
 8004544:	e014      	b.n	8004570 <_svfiprintf_r+0x114>
 8004546:	eba0 0308 	sub.w	r3, r0, r8
 800454a:	fa09 f303 	lsl.w	r3, r9, r3
 800454e:	4313      	orrs	r3, r2
 8004550:	9304      	str	r3, [sp, #16]
 8004552:	46a2      	mov	sl, r4
 8004554:	e7d2      	b.n	80044fc <_svfiprintf_r+0xa0>
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	1d19      	adds	r1, r3, #4
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	9103      	str	r1, [sp, #12]
 800455e:	2b00      	cmp	r3, #0
 8004560:	bfbb      	ittet	lt
 8004562:	425b      	neglt	r3, r3
 8004564:	f042 0202 	orrlt.w	r2, r2, #2
 8004568:	9307      	strge	r3, [sp, #28]
 800456a:	9307      	strlt	r3, [sp, #28]
 800456c:	bfb8      	it	lt
 800456e:	9204      	strlt	r2, [sp, #16]
 8004570:	7823      	ldrb	r3, [r4, #0]
 8004572:	2b2e      	cmp	r3, #46	@ 0x2e
 8004574:	d10a      	bne.n	800458c <_svfiprintf_r+0x130>
 8004576:	7863      	ldrb	r3, [r4, #1]
 8004578:	2b2a      	cmp	r3, #42	@ 0x2a
 800457a:	d132      	bne.n	80045e2 <_svfiprintf_r+0x186>
 800457c:	9b03      	ldr	r3, [sp, #12]
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	9203      	str	r2, [sp, #12]
 8004584:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004588:	3402      	adds	r4, #2
 800458a:	9305      	str	r3, [sp, #20]
 800458c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004650 <_svfiprintf_r+0x1f4>
 8004590:	7821      	ldrb	r1, [r4, #0]
 8004592:	2203      	movs	r2, #3
 8004594:	4650      	mov	r0, sl
 8004596:	f7fb fe1b 	bl	80001d0 <memchr>
 800459a:	b138      	cbz	r0, 80045ac <_svfiprintf_r+0x150>
 800459c:	9b04      	ldr	r3, [sp, #16]
 800459e:	eba0 000a 	sub.w	r0, r0, sl
 80045a2:	2240      	movs	r2, #64	@ 0x40
 80045a4:	4082      	lsls	r2, r0
 80045a6:	4313      	orrs	r3, r2
 80045a8:	3401      	adds	r4, #1
 80045aa:	9304      	str	r3, [sp, #16]
 80045ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b0:	4824      	ldr	r0, [pc, #144]	@ (8004644 <_svfiprintf_r+0x1e8>)
 80045b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80045b6:	2206      	movs	r2, #6
 80045b8:	f7fb fe0a 	bl	80001d0 <memchr>
 80045bc:	2800      	cmp	r0, #0
 80045be:	d036      	beq.n	800462e <_svfiprintf_r+0x1d2>
 80045c0:	4b21      	ldr	r3, [pc, #132]	@ (8004648 <_svfiprintf_r+0x1ec>)
 80045c2:	bb1b      	cbnz	r3, 800460c <_svfiprintf_r+0x1b0>
 80045c4:	9b03      	ldr	r3, [sp, #12]
 80045c6:	3307      	adds	r3, #7
 80045c8:	f023 0307 	bic.w	r3, r3, #7
 80045cc:	3308      	adds	r3, #8
 80045ce:	9303      	str	r3, [sp, #12]
 80045d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045d2:	4433      	add	r3, r6
 80045d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80045d6:	e76a      	b.n	80044ae <_svfiprintf_r+0x52>
 80045d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80045dc:	460c      	mov	r4, r1
 80045de:	2001      	movs	r0, #1
 80045e0:	e7a8      	b.n	8004534 <_svfiprintf_r+0xd8>
 80045e2:	2300      	movs	r3, #0
 80045e4:	3401      	adds	r4, #1
 80045e6:	9305      	str	r3, [sp, #20]
 80045e8:	4619      	mov	r1, r3
 80045ea:	f04f 0c0a 	mov.w	ip, #10
 80045ee:	4620      	mov	r0, r4
 80045f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045f4:	3a30      	subs	r2, #48	@ 0x30
 80045f6:	2a09      	cmp	r2, #9
 80045f8:	d903      	bls.n	8004602 <_svfiprintf_r+0x1a6>
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0c6      	beq.n	800458c <_svfiprintf_r+0x130>
 80045fe:	9105      	str	r1, [sp, #20]
 8004600:	e7c4      	b.n	800458c <_svfiprintf_r+0x130>
 8004602:	fb0c 2101 	mla	r1, ip, r1, r2
 8004606:	4604      	mov	r4, r0
 8004608:	2301      	movs	r3, #1
 800460a:	e7f0      	b.n	80045ee <_svfiprintf_r+0x192>
 800460c:	ab03      	add	r3, sp, #12
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	462a      	mov	r2, r5
 8004612:	4b0e      	ldr	r3, [pc, #56]	@ (800464c <_svfiprintf_r+0x1f0>)
 8004614:	a904      	add	r1, sp, #16
 8004616:	4638      	mov	r0, r7
 8004618:	f3af 8000 	nop.w
 800461c:	1c42      	adds	r2, r0, #1
 800461e:	4606      	mov	r6, r0
 8004620:	d1d6      	bne.n	80045d0 <_svfiprintf_r+0x174>
 8004622:	89ab      	ldrh	r3, [r5, #12]
 8004624:	065b      	lsls	r3, r3, #25
 8004626:	f53f af2d 	bmi.w	8004484 <_svfiprintf_r+0x28>
 800462a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800462c:	e72c      	b.n	8004488 <_svfiprintf_r+0x2c>
 800462e:	ab03      	add	r3, sp, #12
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	462a      	mov	r2, r5
 8004634:	4b05      	ldr	r3, [pc, #20]	@ (800464c <_svfiprintf_r+0x1f0>)
 8004636:	a904      	add	r1, sp, #16
 8004638:	4638      	mov	r0, r7
 800463a:	f000 f879 	bl	8004730 <_printf_i>
 800463e:	e7ed      	b.n	800461c <_svfiprintf_r+0x1c0>
 8004640:	08004ae4 	.word	0x08004ae4
 8004644:	08004aee 	.word	0x08004aee
 8004648:	00000000 	.word	0x00000000
 800464c:	080043a5 	.word	0x080043a5
 8004650:	08004aea 	.word	0x08004aea

08004654 <_printf_common>:
 8004654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	4616      	mov	r6, r2
 800465a:	4698      	mov	r8, r3
 800465c:	688a      	ldr	r2, [r1, #8]
 800465e:	690b      	ldr	r3, [r1, #16]
 8004660:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004664:	4293      	cmp	r3, r2
 8004666:	bfb8      	it	lt
 8004668:	4613      	movlt	r3, r2
 800466a:	6033      	str	r3, [r6, #0]
 800466c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004670:	4607      	mov	r7, r0
 8004672:	460c      	mov	r4, r1
 8004674:	b10a      	cbz	r2, 800467a <_printf_common+0x26>
 8004676:	3301      	adds	r3, #1
 8004678:	6033      	str	r3, [r6, #0]
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	0699      	lsls	r1, r3, #26
 800467e:	bf42      	ittt	mi
 8004680:	6833      	ldrmi	r3, [r6, #0]
 8004682:	3302      	addmi	r3, #2
 8004684:	6033      	strmi	r3, [r6, #0]
 8004686:	6825      	ldr	r5, [r4, #0]
 8004688:	f015 0506 	ands.w	r5, r5, #6
 800468c:	d106      	bne.n	800469c <_printf_common+0x48>
 800468e:	f104 0a19 	add.w	sl, r4, #25
 8004692:	68e3      	ldr	r3, [r4, #12]
 8004694:	6832      	ldr	r2, [r6, #0]
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	42ab      	cmp	r3, r5
 800469a:	dc26      	bgt.n	80046ea <_printf_common+0x96>
 800469c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80046a0:	6822      	ldr	r2, [r4, #0]
 80046a2:	3b00      	subs	r3, #0
 80046a4:	bf18      	it	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	0692      	lsls	r2, r2, #26
 80046aa:	d42b      	bmi.n	8004704 <_printf_common+0xb0>
 80046ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80046b0:	4641      	mov	r1, r8
 80046b2:	4638      	mov	r0, r7
 80046b4:	47c8      	blx	r9
 80046b6:	3001      	adds	r0, #1
 80046b8:	d01e      	beq.n	80046f8 <_printf_common+0xa4>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	6922      	ldr	r2, [r4, #16]
 80046be:	f003 0306 	and.w	r3, r3, #6
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	bf02      	ittt	eq
 80046c6:	68e5      	ldreq	r5, [r4, #12]
 80046c8:	6833      	ldreq	r3, [r6, #0]
 80046ca:	1aed      	subeq	r5, r5, r3
 80046cc:	68a3      	ldr	r3, [r4, #8]
 80046ce:	bf0c      	ite	eq
 80046d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046d4:	2500      	movne	r5, #0
 80046d6:	4293      	cmp	r3, r2
 80046d8:	bfc4      	itt	gt
 80046da:	1a9b      	subgt	r3, r3, r2
 80046dc:	18ed      	addgt	r5, r5, r3
 80046de:	2600      	movs	r6, #0
 80046e0:	341a      	adds	r4, #26
 80046e2:	42b5      	cmp	r5, r6
 80046e4:	d11a      	bne.n	800471c <_printf_common+0xc8>
 80046e6:	2000      	movs	r0, #0
 80046e8:	e008      	b.n	80046fc <_printf_common+0xa8>
 80046ea:	2301      	movs	r3, #1
 80046ec:	4652      	mov	r2, sl
 80046ee:	4641      	mov	r1, r8
 80046f0:	4638      	mov	r0, r7
 80046f2:	47c8      	blx	r9
 80046f4:	3001      	adds	r0, #1
 80046f6:	d103      	bne.n	8004700 <_printf_common+0xac>
 80046f8:	f04f 30ff 	mov.w	r0, #4294967295
 80046fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004700:	3501      	adds	r5, #1
 8004702:	e7c6      	b.n	8004692 <_printf_common+0x3e>
 8004704:	18e1      	adds	r1, r4, r3
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	2030      	movs	r0, #48	@ 0x30
 800470a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800470e:	4422      	add	r2, r4
 8004710:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004714:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004718:	3302      	adds	r3, #2
 800471a:	e7c7      	b.n	80046ac <_printf_common+0x58>
 800471c:	2301      	movs	r3, #1
 800471e:	4622      	mov	r2, r4
 8004720:	4641      	mov	r1, r8
 8004722:	4638      	mov	r0, r7
 8004724:	47c8      	blx	r9
 8004726:	3001      	adds	r0, #1
 8004728:	d0e6      	beq.n	80046f8 <_printf_common+0xa4>
 800472a:	3601      	adds	r6, #1
 800472c:	e7d9      	b.n	80046e2 <_printf_common+0x8e>
	...

08004730 <_printf_i>:
 8004730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004734:	7e0f      	ldrb	r7, [r1, #24]
 8004736:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004738:	2f78      	cmp	r7, #120	@ 0x78
 800473a:	4691      	mov	r9, r2
 800473c:	4680      	mov	r8, r0
 800473e:	460c      	mov	r4, r1
 8004740:	469a      	mov	sl, r3
 8004742:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004746:	d807      	bhi.n	8004758 <_printf_i+0x28>
 8004748:	2f62      	cmp	r7, #98	@ 0x62
 800474a:	d80a      	bhi.n	8004762 <_printf_i+0x32>
 800474c:	2f00      	cmp	r7, #0
 800474e:	f000 80d2 	beq.w	80048f6 <_printf_i+0x1c6>
 8004752:	2f58      	cmp	r7, #88	@ 0x58
 8004754:	f000 80b9 	beq.w	80048ca <_printf_i+0x19a>
 8004758:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800475c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004760:	e03a      	b.n	80047d8 <_printf_i+0xa8>
 8004762:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004766:	2b15      	cmp	r3, #21
 8004768:	d8f6      	bhi.n	8004758 <_printf_i+0x28>
 800476a:	a101      	add	r1, pc, #4	@ (adr r1, 8004770 <_printf_i+0x40>)
 800476c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004770:	080047c9 	.word	0x080047c9
 8004774:	080047dd 	.word	0x080047dd
 8004778:	08004759 	.word	0x08004759
 800477c:	08004759 	.word	0x08004759
 8004780:	08004759 	.word	0x08004759
 8004784:	08004759 	.word	0x08004759
 8004788:	080047dd 	.word	0x080047dd
 800478c:	08004759 	.word	0x08004759
 8004790:	08004759 	.word	0x08004759
 8004794:	08004759 	.word	0x08004759
 8004798:	08004759 	.word	0x08004759
 800479c:	080048dd 	.word	0x080048dd
 80047a0:	08004807 	.word	0x08004807
 80047a4:	08004897 	.word	0x08004897
 80047a8:	08004759 	.word	0x08004759
 80047ac:	08004759 	.word	0x08004759
 80047b0:	080048ff 	.word	0x080048ff
 80047b4:	08004759 	.word	0x08004759
 80047b8:	08004807 	.word	0x08004807
 80047bc:	08004759 	.word	0x08004759
 80047c0:	08004759 	.word	0x08004759
 80047c4:	0800489f 	.word	0x0800489f
 80047c8:	6833      	ldr	r3, [r6, #0]
 80047ca:	1d1a      	adds	r2, r3, #4
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6032      	str	r2, [r6, #0]
 80047d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80047d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047d8:	2301      	movs	r3, #1
 80047da:	e09d      	b.n	8004918 <_printf_i+0x1e8>
 80047dc:	6833      	ldr	r3, [r6, #0]
 80047de:	6820      	ldr	r0, [r4, #0]
 80047e0:	1d19      	adds	r1, r3, #4
 80047e2:	6031      	str	r1, [r6, #0]
 80047e4:	0606      	lsls	r6, r0, #24
 80047e6:	d501      	bpl.n	80047ec <_printf_i+0xbc>
 80047e8:	681d      	ldr	r5, [r3, #0]
 80047ea:	e003      	b.n	80047f4 <_printf_i+0xc4>
 80047ec:	0645      	lsls	r5, r0, #25
 80047ee:	d5fb      	bpl.n	80047e8 <_printf_i+0xb8>
 80047f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047f4:	2d00      	cmp	r5, #0
 80047f6:	da03      	bge.n	8004800 <_printf_i+0xd0>
 80047f8:	232d      	movs	r3, #45	@ 0x2d
 80047fa:	426d      	negs	r5, r5
 80047fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004800:	4859      	ldr	r0, [pc, #356]	@ (8004968 <_printf_i+0x238>)
 8004802:	230a      	movs	r3, #10
 8004804:	e011      	b.n	800482a <_printf_i+0xfa>
 8004806:	6821      	ldr	r1, [r4, #0]
 8004808:	6833      	ldr	r3, [r6, #0]
 800480a:	0608      	lsls	r0, r1, #24
 800480c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004810:	d402      	bmi.n	8004818 <_printf_i+0xe8>
 8004812:	0649      	lsls	r1, r1, #25
 8004814:	bf48      	it	mi
 8004816:	b2ad      	uxthmi	r5, r5
 8004818:	2f6f      	cmp	r7, #111	@ 0x6f
 800481a:	4853      	ldr	r0, [pc, #332]	@ (8004968 <_printf_i+0x238>)
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	bf14      	ite	ne
 8004820:	230a      	movne	r3, #10
 8004822:	2308      	moveq	r3, #8
 8004824:	2100      	movs	r1, #0
 8004826:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800482a:	6866      	ldr	r6, [r4, #4]
 800482c:	60a6      	str	r6, [r4, #8]
 800482e:	2e00      	cmp	r6, #0
 8004830:	bfa2      	ittt	ge
 8004832:	6821      	ldrge	r1, [r4, #0]
 8004834:	f021 0104 	bicge.w	r1, r1, #4
 8004838:	6021      	strge	r1, [r4, #0]
 800483a:	b90d      	cbnz	r5, 8004840 <_printf_i+0x110>
 800483c:	2e00      	cmp	r6, #0
 800483e:	d04b      	beq.n	80048d8 <_printf_i+0x1a8>
 8004840:	4616      	mov	r6, r2
 8004842:	fbb5 f1f3 	udiv	r1, r5, r3
 8004846:	fb03 5711 	mls	r7, r3, r1, r5
 800484a:	5dc7      	ldrb	r7, [r0, r7]
 800484c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004850:	462f      	mov	r7, r5
 8004852:	42bb      	cmp	r3, r7
 8004854:	460d      	mov	r5, r1
 8004856:	d9f4      	bls.n	8004842 <_printf_i+0x112>
 8004858:	2b08      	cmp	r3, #8
 800485a:	d10b      	bne.n	8004874 <_printf_i+0x144>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	07df      	lsls	r7, r3, #31
 8004860:	d508      	bpl.n	8004874 <_printf_i+0x144>
 8004862:	6923      	ldr	r3, [r4, #16]
 8004864:	6861      	ldr	r1, [r4, #4]
 8004866:	4299      	cmp	r1, r3
 8004868:	bfde      	ittt	le
 800486a:	2330      	movle	r3, #48	@ 0x30
 800486c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004870:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004874:	1b92      	subs	r2, r2, r6
 8004876:	6122      	str	r2, [r4, #16]
 8004878:	f8cd a000 	str.w	sl, [sp]
 800487c:	464b      	mov	r3, r9
 800487e:	aa03      	add	r2, sp, #12
 8004880:	4621      	mov	r1, r4
 8004882:	4640      	mov	r0, r8
 8004884:	f7ff fee6 	bl	8004654 <_printf_common>
 8004888:	3001      	adds	r0, #1
 800488a:	d14a      	bne.n	8004922 <_printf_i+0x1f2>
 800488c:	f04f 30ff 	mov.w	r0, #4294967295
 8004890:	b004      	add	sp, #16
 8004892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	f043 0320 	orr.w	r3, r3, #32
 800489c:	6023      	str	r3, [r4, #0]
 800489e:	4833      	ldr	r0, [pc, #204]	@ (800496c <_printf_i+0x23c>)
 80048a0:	2778      	movs	r7, #120	@ 0x78
 80048a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	6831      	ldr	r1, [r6, #0]
 80048aa:	061f      	lsls	r7, r3, #24
 80048ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80048b0:	d402      	bmi.n	80048b8 <_printf_i+0x188>
 80048b2:	065f      	lsls	r7, r3, #25
 80048b4:	bf48      	it	mi
 80048b6:	b2ad      	uxthmi	r5, r5
 80048b8:	6031      	str	r1, [r6, #0]
 80048ba:	07d9      	lsls	r1, r3, #31
 80048bc:	bf44      	itt	mi
 80048be:	f043 0320 	orrmi.w	r3, r3, #32
 80048c2:	6023      	strmi	r3, [r4, #0]
 80048c4:	b11d      	cbz	r5, 80048ce <_printf_i+0x19e>
 80048c6:	2310      	movs	r3, #16
 80048c8:	e7ac      	b.n	8004824 <_printf_i+0xf4>
 80048ca:	4827      	ldr	r0, [pc, #156]	@ (8004968 <_printf_i+0x238>)
 80048cc:	e7e9      	b.n	80048a2 <_printf_i+0x172>
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	f023 0320 	bic.w	r3, r3, #32
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	e7f6      	b.n	80048c6 <_printf_i+0x196>
 80048d8:	4616      	mov	r6, r2
 80048da:	e7bd      	b.n	8004858 <_printf_i+0x128>
 80048dc:	6833      	ldr	r3, [r6, #0]
 80048de:	6825      	ldr	r5, [r4, #0]
 80048e0:	6961      	ldr	r1, [r4, #20]
 80048e2:	1d18      	adds	r0, r3, #4
 80048e4:	6030      	str	r0, [r6, #0]
 80048e6:	062e      	lsls	r6, r5, #24
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	d501      	bpl.n	80048f0 <_printf_i+0x1c0>
 80048ec:	6019      	str	r1, [r3, #0]
 80048ee:	e002      	b.n	80048f6 <_printf_i+0x1c6>
 80048f0:	0668      	lsls	r0, r5, #25
 80048f2:	d5fb      	bpl.n	80048ec <_printf_i+0x1bc>
 80048f4:	8019      	strh	r1, [r3, #0]
 80048f6:	2300      	movs	r3, #0
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	4616      	mov	r6, r2
 80048fc:	e7bc      	b.n	8004878 <_printf_i+0x148>
 80048fe:	6833      	ldr	r3, [r6, #0]
 8004900:	1d1a      	adds	r2, r3, #4
 8004902:	6032      	str	r2, [r6, #0]
 8004904:	681e      	ldr	r6, [r3, #0]
 8004906:	6862      	ldr	r2, [r4, #4]
 8004908:	2100      	movs	r1, #0
 800490a:	4630      	mov	r0, r6
 800490c:	f7fb fc60 	bl	80001d0 <memchr>
 8004910:	b108      	cbz	r0, 8004916 <_printf_i+0x1e6>
 8004912:	1b80      	subs	r0, r0, r6
 8004914:	6060      	str	r0, [r4, #4]
 8004916:	6863      	ldr	r3, [r4, #4]
 8004918:	6123      	str	r3, [r4, #16]
 800491a:	2300      	movs	r3, #0
 800491c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004920:	e7aa      	b.n	8004878 <_printf_i+0x148>
 8004922:	6923      	ldr	r3, [r4, #16]
 8004924:	4632      	mov	r2, r6
 8004926:	4649      	mov	r1, r9
 8004928:	4640      	mov	r0, r8
 800492a:	47d0      	blx	sl
 800492c:	3001      	adds	r0, #1
 800492e:	d0ad      	beq.n	800488c <_printf_i+0x15c>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	079b      	lsls	r3, r3, #30
 8004934:	d413      	bmi.n	800495e <_printf_i+0x22e>
 8004936:	68e0      	ldr	r0, [r4, #12]
 8004938:	9b03      	ldr	r3, [sp, #12]
 800493a:	4298      	cmp	r0, r3
 800493c:	bfb8      	it	lt
 800493e:	4618      	movlt	r0, r3
 8004940:	e7a6      	b.n	8004890 <_printf_i+0x160>
 8004942:	2301      	movs	r3, #1
 8004944:	4632      	mov	r2, r6
 8004946:	4649      	mov	r1, r9
 8004948:	4640      	mov	r0, r8
 800494a:	47d0      	blx	sl
 800494c:	3001      	adds	r0, #1
 800494e:	d09d      	beq.n	800488c <_printf_i+0x15c>
 8004950:	3501      	adds	r5, #1
 8004952:	68e3      	ldr	r3, [r4, #12]
 8004954:	9903      	ldr	r1, [sp, #12]
 8004956:	1a5b      	subs	r3, r3, r1
 8004958:	42ab      	cmp	r3, r5
 800495a:	dcf2      	bgt.n	8004942 <_printf_i+0x212>
 800495c:	e7eb      	b.n	8004936 <_printf_i+0x206>
 800495e:	2500      	movs	r5, #0
 8004960:	f104 0619 	add.w	r6, r4, #25
 8004964:	e7f5      	b.n	8004952 <_printf_i+0x222>
 8004966:	bf00      	nop
 8004968:	08004af5 	.word	0x08004af5
 800496c:	08004b06 	.word	0x08004b06

08004970 <memmove>:
 8004970:	4288      	cmp	r0, r1
 8004972:	b510      	push	{r4, lr}
 8004974:	eb01 0402 	add.w	r4, r1, r2
 8004978:	d902      	bls.n	8004980 <memmove+0x10>
 800497a:	4284      	cmp	r4, r0
 800497c:	4623      	mov	r3, r4
 800497e:	d807      	bhi.n	8004990 <memmove+0x20>
 8004980:	1e43      	subs	r3, r0, #1
 8004982:	42a1      	cmp	r1, r4
 8004984:	d008      	beq.n	8004998 <memmove+0x28>
 8004986:	f811 2b01 	ldrb.w	r2, [r1], #1
 800498a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800498e:	e7f8      	b.n	8004982 <memmove+0x12>
 8004990:	4402      	add	r2, r0
 8004992:	4601      	mov	r1, r0
 8004994:	428a      	cmp	r2, r1
 8004996:	d100      	bne.n	800499a <memmove+0x2a>
 8004998:	bd10      	pop	{r4, pc}
 800499a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800499e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049a2:	e7f7      	b.n	8004994 <memmove+0x24>

080049a4 <_sbrk_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	4d06      	ldr	r5, [pc, #24]	@ (80049c0 <_sbrk_r+0x1c>)
 80049a8:	2300      	movs	r3, #0
 80049aa:	4604      	mov	r4, r0
 80049ac:	4608      	mov	r0, r1
 80049ae:	602b      	str	r3, [r5, #0]
 80049b0:	f7fc fcbc 	bl	800132c <_sbrk>
 80049b4:	1c43      	adds	r3, r0, #1
 80049b6:	d102      	bne.n	80049be <_sbrk_r+0x1a>
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	b103      	cbz	r3, 80049be <_sbrk_r+0x1a>
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	bd38      	pop	{r3, r4, r5, pc}
 80049c0:	200002d8 	.word	0x200002d8

080049c4 <memcpy>:
 80049c4:	440a      	add	r2, r1
 80049c6:	4291      	cmp	r1, r2
 80049c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80049cc:	d100      	bne.n	80049d0 <memcpy+0xc>
 80049ce:	4770      	bx	lr
 80049d0:	b510      	push	{r4, lr}
 80049d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049da:	4291      	cmp	r1, r2
 80049dc:	d1f9      	bne.n	80049d2 <memcpy+0xe>
 80049de:	bd10      	pop	{r4, pc}

080049e0 <_realloc_r>:
 80049e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049e4:	4680      	mov	r8, r0
 80049e6:	4615      	mov	r5, r2
 80049e8:	460c      	mov	r4, r1
 80049ea:	b921      	cbnz	r1, 80049f6 <_realloc_r+0x16>
 80049ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049f0:	4611      	mov	r1, r2
 80049f2:	f7ff bc4b 	b.w	800428c <_malloc_r>
 80049f6:	b92a      	cbnz	r2, 8004a04 <_realloc_r+0x24>
 80049f8:	f7ff fbdc 	bl	80041b4 <_free_r>
 80049fc:	2400      	movs	r4, #0
 80049fe:	4620      	mov	r0, r4
 8004a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a04:	f000 f81a 	bl	8004a3c <_malloc_usable_size_r>
 8004a08:	4285      	cmp	r5, r0
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	d802      	bhi.n	8004a14 <_realloc_r+0x34>
 8004a0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a12:	d8f4      	bhi.n	80049fe <_realloc_r+0x1e>
 8004a14:	4629      	mov	r1, r5
 8004a16:	4640      	mov	r0, r8
 8004a18:	f7ff fc38 	bl	800428c <_malloc_r>
 8004a1c:	4607      	mov	r7, r0
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d0ec      	beq.n	80049fc <_realloc_r+0x1c>
 8004a22:	42b5      	cmp	r5, r6
 8004a24:	462a      	mov	r2, r5
 8004a26:	4621      	mov	r1, r4
 8004a28:	bf28      	it	cs
 8004a2a:	4632      	movcs	r2, r6
 8004a2c:	f7ff ffca 	bl	80049c4 <memcpy>
 8004a30:	4621      	mov	r1, r4
 8004a32:	4640      	mov	r0, r8
 8004a34:	f7ff fbbe 	bl	80041b4 <_free_r>
 8004a38:	463c      	mov	r4, r7
 8004a3a:	e7e0      	b.n	80049fe <_realloc_r+0x1e>

08004a3c <_malloc_usable_size_r>:
 8004a3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a40:	1f18      	subs	r0, r3, #4
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bfbc      	itt	lt
 8004a46:	580b      	ldrlt	r3, [r1, r0]
 8004a48:	18c0      	addlt	r0, r0, r3
 8004a4a:	4770      	bx	lr

08004a4c <_init>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr

08004a58 <_fini>:
 8004a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a5a:	bf00      	nop
 8004a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5e:	bc08      	pop	{r3}
 8004a60:	469e      	mov	lr, r3
 8004a62:	4770      	bx	lr
